{"ast":null,"code":"import _classCallCheck from \"C:/Users/pvplo/OneDrive/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/editpallav-main/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/pvplo/OneDrive/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/editpallav-main/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { addUniqueItem, removeItem } from '../../utils/array.mjs';\n\nvar NodeStack = /*#__PURE__*/function () {\n  function NodeStack() {\n    _classCallCheck(this, NodeStack);\n\n    this.members = [];\n  }\n\n  _createClass(NodeStack, [{\n    key: \"add\",\n    value: function add(node) {\n      addUniqueItem(this.members, node);\n      node.scheduleRender();\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(node) {\n      removeItem(this.members, node);\n\n      if (node === this.prevLead) {\n        this.prevLead = undefined;\n      }\n\n      if (node === this.lead) {\n        var prevLead = this.members[this.members.length - 1];\n\n        if (prevLead) {\n          this.promote(prevLead);\n        }\n      }\n    }\n  }, {\n    key: \"relegate\",\n    value: function relegate(node) {\n      var indexOfNode = this.members.findIndex(function (member) {\n        return node === member;\n      });\n      if (indexOfNode === 0) return false;\n      /**\n       * Find the next projection node that is present\n       */\n\n      var prevLead;\n\n      for (var i = indexOfNode; i >= 0; i--) {\n        var member = this.members[i];\n\n        if (member.isPresent !== false) {\n          prevLead = member;\n          break;\n        }\n      }\n\n      if (prevLead) {\n        this.promote(prevLead);\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"promote\",\n    value: function promote(node, preserveFollowOpacity) {\n      var prevLead = this.lead;\n      if (node === prevLead) return;\n      this.prevLead = prevLead;\n      this.lead = node;\n      node.show();\n\n      if (prevLead) {\n        prevLead.instance && prevLead.scheduleRender();\n        node.scheduleRender();\n        node.resumeFrom = prevLead;\n\n        if (preserveFollowOpacity) {\n          node.resumeFrom.preserveOpacity = true;\n        }\n\n        if (prevLead.snapshot) {\n          node.snapshot = prevLead.snapshot;\n          node.snapshot.latestValues = prevLead.animationValues || prevLead.latestValues;\n        }\n\n        if (node.root && node.root.isUpdating) {\n          node.isLayoutDirty = true;\n        }\n\n        var crossfade = node.options.crossfade;\n\n        if (crossfade === false) {\n          prevLead.hide();\n        }\n        /**\n         * TODO:\n         *   - Test border radius when previous node was deleted\n         *   - boxShadow mixing\n         *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n         *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n         *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n         * ---\n         *   - Crossfade opacity of root nodes\n         *   - layoutId changes after animation\n         *   - layoutId changes mid animation\n         */\n\n      }\n    }\n  }, {\n    key: \"exitAnimationComplete\",\n    value: function exitAnimationComplete() {\n      this.members.forEach(function (node) {\n        var options = node.options,\n            resumingFrom = node.resumingFrom;\n        options.onExitComplete && options.onExitComplete();\n\n        if (resumingFrom) {\n          resumingFrom.options.onExitComplete && resumingFrom.options.onExitComplete();\n        }\n      });\n    }\n  }, {\n    key: \"scheduleRender\",\n    value: function scheduleRender() {\n      this.members.forEach(function (node) {\n        node.instance && node.scheduleRender(false);\n      });\n    }\n    /**\n     * Clear any leads that have been removed this render to prevent them from being\n     * used in future animations and to prevent memory leaks\n     */\n\n  }, {\n    key: \"removeLeadSnapshot\",\n    value: function removeLeadSnapshot() {\n      if (this.lead && this.lead.snapshot) {\n        this.lead.snapshot = undefined;\n      }\n    }\n  }]);\n\n  return NodeStack;\n}();\n\nexport { NodeStack };","map":{"version":3,"names":["addUniqueItem","removeItem","NodeStack","members","node","scheduleRender","prevLead","undefined","lead","length","promote","indexOfNode","findIndex","member","i","isPresent","preserveFollowOpacity","show","instance","resumeFrom","preserveOpacity","snapshot","latestValues","animationValues","root","isUpdating","isLayoutDirty","crossfade","options","hide","forEach","resumingFrom","onExitComplete"],"sources":["C:/Users/pvplo/OneDrive/Рабочий стол/editpallav-main/node_modules/framer-motion/dist/es/projection/shared/stack.mjs"],"sourcesContent":["import { addUniqueItem, removeItem } from '../../utils/array.mjs';\n\nclass NodeStack {\n    constructor() {\n        this.members = [];\n    }\n    add(node) {\n        addUniqueItem(this.members, node);\n        node.scheduleRender();\n    }\n    remove(node) {\n        removeItem(this.members, node);\n        if (node === this.prevLead) {\n            this.prevLead = undefined;\n        }\n        if (node === this.lead) {\n            const prevLead = this.members[this.members.length - 1];\n            if (prevLead) {\n                this.promote(prevLead);\n            }\n        }\n    }\n    relegate(node) {\n        const indexOfNode = this.members.findIndex((member) => node === member);\n        if (indexOfNode === 0)\n            return false;\n        /**\n         * Find the next projection node that is present\n         */\n        let prevLead;\n        for (let i = indexOfNode; i >= 0; i--) {\n            const member = this.members[i];\n            if (member.isPresent !== false) {\n                prevLead = member;\n                break;\n            }\n        }\n        if (prevLead) {\n            this.promote(prevLead);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    promote(node, preserveFollowOpacity) {\n        const prevLead = this.lead;\n        if (node === prevLead)\n            return;\n        this.prevLead = prevLead;\n        this.lead = node;\n        node.show();\n        if (prevLead) {\n            prevLead.instance && prevLead.scheduleRender();\n            node.scheduleRender();\n            node.resumeFrom = prevLead;\n            if (preserveFollowOpacity) {\n                node.resumeFrom.preserveOpacity = true;\n            }\n            if (prevLead.snapshot) {\n                node.snapshot = prevLead.snapshot;\n                node.snapshot.latestValues =\n                    prevLead.animationValues || prevLead.latestValues;\n            }\n            if (node.root && node.root.isUpdating) {\n                node.isLayoutDirty = true;\n            }\n            const { crossfade } = node.options;\n            if (crossfade === false) {\n                prevLead.hide();\n            }\n            /**\n             * TODO:\n             *   - Test border radius when previous node was deleted\n             *   - boxShadow mixing\n             *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n             *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n             *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n             * ---\n             *   - Crossfade opacity of root nodes\n             *   - layoutId changes after animation\n             *   - layoutId changes mid animation\n             */\n        }\n    }\n    exitAnimationComplete() {\n        this.members.forEach((node) => {\n            const { options, resumingFrom } = node;\n            options.onExitComplete && options.onExitComplete();\n            if (resumingFrom) {\n                resumingFrom.options.onExitComplete &&\n                    resumingFrom.options.onExitComplete();\n            }\n        });\n    }\n    scheduleRender() {\n        this.members.forEach((node) => {\n            node.instance && node.scheduleRender(false);\n        });\n    }\n    /**\n     * Clear any leads that have been removed this render to prevent them from being\n     * used in future animations and to prevent memory leaks\n     */\n    removeLeadSnapshot() {\n        if (this.lead && this.lead.snapshot) {\n            this.lead.snapshot = undefined;\n        }\n    }\n}\n\nexport { NodeStack };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}