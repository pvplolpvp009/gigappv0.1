{"ast":null,"code":"import _slicedToArray from \"C:/Users/pvplo/OneDrive/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/editpallav-main/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"C:/Users/pvplo/OneDrive/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/editpallav-main/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"C:/Users/pvplo/OneDrive/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/editpallav-main/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"defaultTransition\"],\n    _excluded2 = [\"delay\", \"times\", \"type\"];\nimport { createGeneratorEasing } from '../../easing/utils/create-generator-easing.mjs';\nimport { resolveElements } from '../../render/dom/utils/resolve-element.mjs';\nimport { defaultOffset } from '../../utils/offsets/default.mjs';\nimport { fillOffset } from '../../utils/offsets/fill.mjs';\nimport { progress } from '../../utils/progress.mjs';\nimport { secondsToMilliseconds } from '../../utils/time-conversion.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\nimport { calcNextTime } from './utils/calc-time.mjs';\nimport { addKeyframes } from './utils/edit.mjs';\nimport { compareByTime } from './utils/sort.mjs';\nvar defaultSegmentEasing = \"easeInOut\";\n\nfunction createAnimationsFromSequence(sequence) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$defaultTransitio = _ref.defaultTransition,\n      defaultTransition = _ref$defaultTransitio === void 0 ? {} : _ref$defaultTransitio,\n      sequenceTransition = _objectWithoutProperties(_ref, _excluded);\n\n  var scope = arguments.length > 2 ? arguments[2] : undefined;\n  var defaultDuration = defaultTransition.duration || 0.3;\n  var animationDefinitions = new Map();\n  var sequences = new Map();\n  var elementCache = {};\n  var timeLabels = new Map();\n  var prevTime = 0;\n  var currentTime = 0;\n  var totalDuration = 0;\n  /**\n   * Build the timeline by mapping over the sequence array and converting\n   * the definitions into keyframes and offsets with absolute time values.\n   * These will later get converted into relative offsets in a second pass.\n   */\n\n  var _loop = function _loop(i) {\n    var segment = sequence[i];\n    /**\n     * If this is a timeline label, mark it and skip the rest of this iteration.\n     */\n\n    if (typeof segment === \"string\") {\n      timeLabels.set(segment, currentTime);\n      return \"continue\";\n    } else if (!Array.isArray(segment)) {\n      timeLabels.set(segment.name, calcNextTime(currentTime, segment.at, prevTime, timeLabels));\n      return \"continue\";\n    }\n\n    var _segment = _slicedToArray(segment, 3),\n        subject = _segment[0],\n        keyframes = _segment[1],\n        _segment$ = _segment[2],\n        transition = _segment$ === void 0 ? {} : _segment$;\n    /**\n     * If a relative or absolute time value has been specified we need to resolve\n     * it in relation to the currentTime.\n     */\n\n\n    if (transition.at !== undefined) {\n      currentTime = calcNextTime(currentTime, transition.at, prevTime, timeLabels);\n    }\n    /**\n     * Keep track of the maximum duration in this definition. This will be\n     * applied to currentTime once the definition has been parsed.\n     */\n\n\n    var maxDuration = 0;\n\n    var resolveValueSequence = function resolveValueSequence(valueKeyframes, valueTransition, valueSequence) {\n      var elementIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      var numElements = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n      var valueKeyframesAsList = keyframesAsList(valueKeyframes);\n\n      var _valueTransition$dela = valueTransition.delay,\n          delay = _valueTransition$dela === void 0 ? 0 : _valueTransition$dela,\n          _valueTransition$time = valueTransition.times,\n          times = _valueTransition$time === void 0 ? defaultOffset(valueKeyframesAsList) : _valueTransition$time,\n          _valueTransition$type = valueTransition.type,\n          type = _valueTransition$type === void 0 ? \"keyframes\" : _valueTransition$type,\n          remainingTransition = _objectWithoutProperties(valueTransition, _excluded2);\n\n      var _valueTransition$ease = valueTransition.ease,\n          ease = _valueTransition$ease === void 0 ? defaultTransition.ease || \"easeOut\" : _valueTransition$ease,\n          duration = valueTransition.duration;\n      /**\n       * Resolve stagger() if defined.\n       */\n\n      var calculatedDelay = typeof delay === \"function\" ? delay(elementIndex, numElements) : delay;\n      /**\n       * If this animation should and can use a spring, generate a spring easing function.\n       */\n\n      var numKeyframes = valueKeyframesAsList.length;\n\n      if (numKeyframes <= 2 && type === \"spring\") {\n        /**\n         * As we're creating an easing function from a spring,\n         * ideally we want to generate it using the real distance\n         * between the two keyframes. However this isn't always\n         * possible - in these situations we use 0-100.\n         */\n        var absoluteDelta = 100;\n\n        if (numKeyframes === 2 && isNumberKeyframesArray(valueKeyframesAsList)) {\n          var delta = valueKeyframesAsList[1] - valueKeyframesAsList[0];\n          absoluteDelta = Math.abs(delta);\n        }\n\n        var springTransition = _objectSpread({}, remainingTransition);\n\n        if (duration !== undefined) {\n          springTransition.duration = secondsToMilliseconds(duration);\n        }\n\n        var springEasing = createGeneratorEasing(springTransition, absoluteDelta);\n        ease = springEasing.ease;\n        duration = springEasing.duration;\n      }\n\n      duration !== null && duration !== void 0 ? duration : duration = defaultDuration;\n      var startTime = currentTime + calculatedDelay;\n      var targetTime = startTime + duration;\n      /**\n       * If there's only one time offset of 0, fill in a second with length 1\n       */\n\n      if (times.length === 1 && times[0] === 0) {\n        times[1] = 1;\n      }\n      /**\n       * Fill out if offset if fewer offsets than keyframes\n       */\n\n\n      var remainder = times.length - valueKeyframesAsList.length;\n      remainder > 0 && fillOffset(times, remainder);\n      /**\n       * If only one value has been set, ie [1], push a null to the start of\n       * the keyframe array. This will let us mark a keyframe at this point\n       * that will later be hydrated with the previous value.\n       */\n\n      valueKeyframesAsList.length === 1 && valueKeyframesAsList.unshift(null);\n      /**\n       * Add keyframes, mapping offsets to absolute time.\n       */\n\n      addKeyframes(valueSequence, valueKeyframesAsList, ease, times, startTime, targetTime);\n      maxDuration = Math.max(calculatedDelay + duration, maxDuration);\n      totalDuration = Math.max(targetTime, totalDuration);\n    };\n\n    if (isMotionValue(subject)) {\n      var subjectSequence = getSubjectSequence(subject, sequences);\n      resolveValueSequence(keyframes, transition, getValueSequence(\"default\", subjectSequence));\n    } else {\n      /**\n       * Find all the elements specified in the definition and parse value\n       * keyframes from their timeline definitions.\n       */\n      var elements = resolveElements(subject, scope, elementCache);\n      var numElements = elements.length;\n      /**\n       * For every element in this segment, process the defined values.\n       */\n\n      for (var elementIndex = 0; elementIndex < numElements; elementIndex++) {\n        /**\n         * Cast necessary, but we know these are of this type\n         */\n        keyframes = keyframes;\n        transition = transition;\n        var element = elements[elementIndex];\n\n        var _subjectSequence = getSubjectSequence(element, sequences);\n\n        for (var key in keyframes) {\n          resolveValueSequence(keyframes[key], getValueTransition(transition, key), getValueSequence(key, _subjectSequence), elementIndex, numElements);\n        }\n      }\n    }\n\n    prevTime = currentTime;\n    currentTime += maxDuration;\n  };\n\n  for (var i = 0; i < sequence.length; i++) {\n    var _ret = _loop(i);\n\n    if (_ret === \"continue\") continue;\n  }\n  /**\n   * For every element and value combination create a new animation.\n   */\n\n\n  sequences.forEach(function (valueSequences, element) {\n    for (var key in valueSequences) {\n      var valueSequence = valueSequences[key];\n      /**\n       * Arrange all the keyframes in ascending time order.\n       */\n\n      valueSequence.sort(compareByTime);\n      var keyframes = [];\n      var valueOffset = [];\n      var valueEasing = [];\n      /**\n       * For each keyframe, translate absolute times into\n       * relative offsets based on the total duration of the timeline.\n       */\n\n      for (var _i = 0; _i < valueSequence.length; _i++) {\n        var _valueSequence$_i = valueSequence[_i],\n            at = _valueSequence$_i.at,\n            value = _valueSequence$_i.value,\n            easing = _valueSequence$_i.easing;\n        keyframes.push(value);\n        valueOffset.push(progress(0, totalDuration, at));\n        valueEasing.push(easing || \"easeOut\");\n      }\n      /**\n       * If the first keyframe doesn't land on offset: 0\n       * provide one by duplicating the initial keyframe. This ensures\n       * it snaps to the first keyframe when the animation starts.\n       */\n\n\n      if (valueOffset[0] !== 0) {\n        valueOffset.unshift(0);\n        keyframes.unshift(keyframes[0]);\n        valueEasing.unshift(defaultSegmentEasing);\n      }\n      /**\n       * If the last keyframe doesn't land on offset: 1\n       * provide one with a null wildcard value. This will ensure it\n       * stays static until the end of the animation.\n       */\n\n\n      if (valueOffset[valueOffset.length - 1] !== 1) {\n        valueOffset.push(1);\n        keyframes.push(null);\n      }\n\n      if (!animationDefinitions.has(element)) {\n        animationDefinitions.set(element, {\n          keyframes: {},\n          transition: {}\n        });\n      }\n\n      var definition = animationDefinitions.get(element);\n      definition.keyframes[key] = keyframes;\n      definition.transition[key] = _objectSpread(_objectSpread({}, defaultTransition), {}, {\n        duration: totalDuration,\n        ease: valueEasing,\n        times: valueOffset\n      }, sequenceTransition);\n    }\n  });\n  return animationDefinitions;\n}\n\nfunction getSubjectSequence(subject, sequences) {\n  !sequences.has(subject) && sequences.set(subject, {});\n  return sequences.get(subject);\n}\n\nfunction getValueSequence(name, sequences) {\n  if (!sequences[name]) sequences[name] = [];\n  return sequences[name];\n}\n\nfunction keyframesAsList(keyframes) {\n  return Array.isArray(keyframes) ? keyframes : [keyframes];\n}\n\nfunction getValueTransition(transition, key) {\n  return transition[key] ? _objectSpread(_objectSpread({}, transition), transition[key]) : _objectSpread({}, transition);\n}\n\nvar isNumber = function isNumber(keyframe) {\n  return typeof keyframe === \"number\";\n};\n\nvar isNumberKeyframesArray = function isNumberKeyframesArray(keyframes) {\n  return keyframes.every(isNumber);\n};\n\nexport { createAnimationsFromSequence, getValueTransition };","map":{"version":3,"names":["createGeneratorEasing","resolveElements","defaultOffset","fillOffset","progress","secondsToMilliseconds","isMotionValue","calcNextTime","addKeyframes","compareByTime","defaultSegmentEasing","createAnimationsFromSequence","sequence","defaultTransition","sequenceTransition","scope","defaultDuration","duration","animationDefinitions","Map","sequences","elementCache","timeLabels","prevTime","currentTime","totalDuration","i","segment","set","Array","isArray","name","at","subject","keyframes","transition","undefined","maxDuration","resolveValueSequence","valueKeyframes","valueTransition","valueSequence","elementIndex","numElements","valueKeyframesAsList","keyframesAsList","delay","times","type","remainingTransition","ease","calculatedDelay","numKeyframes","length","absoluteDelta","isNumberKeyframesArray","delta","Math","abs","springTransition","springEasing","startTime","targetTime","remainder","unshift","max","subjectSequence","getSubjectSequence","getValueSequence","elements","element","key","getValueTransition","forEach","valueSequences","sort","valueOffset","valueEasing","value","easing","push","has","definition","get","isNumber","keyframe","every"],"sources":["C:/Users/pvplo/OneDrive/Рабочий стол/editpallav-main/node_modules/framer-motion/dist/es/animation/sequence/create.mjs"],"sourcesContent":["import { createGeneratorEasing } from '../../easing/utils/create-generator-easing.mjs';\nimport { resolveElements } from '../../render/dom/utils/resolve-element.mjs';\nimport { defaultOffset } from '../../utils/offsets/default.mjs';\nimport { fillOffset } from '../../utils/offsets/fill.mjs';\nimport { progress } from '../../utils/progress.mjs';\nimport { secondsToMilliseconds } from '../../utils/time-conversion.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\nimport { calcNextTime } from './utils/calc-time.mjs';\nimport { addKeyframes } from './utils/edit.mjs';\nimport { compareByTime } from './utils/sort.mjs';\n\nconst defaultSegmentEasing = \"easeInOut\";\nfunction createAnimationsFromSequence(sequence, { defaultTransition = {}, ...sequenceTransition } = {}, scope) {\n    const defaultDuration = defaultTransition.duration || 0.3;\n    const animationDefinitions = new Map();\n    const sequences = new Map();\n    const elementCache = {};\n    const timeLabels = new Map();\n    let prevTime = 0;\n    let currentTime = 0;\n    let totalDuration = 0;\n    /**\n     * Build the timeline by mapping over the sequence array and converting\n     * the definitions into keyframes and offsets with absolute time values.\n     * These will later get converted into relative offsets in a second pass.\n     */\n    for (let i = 0; i < sequence.length; i++) {\n        const segment = sequence[i];\n        /**\n         * If this is a timeline label, mark it and skip the rest of this iteration.\n         */\n        if (typeof segment === \"string\") {\n            timeLabels.set(segment, currentTime);\n            continue;\n        }\n        else if (!Array.isArray(segment)) {\n            timeLabels.set(segment.name, calcNextTime(currentTime, segment.at, prevTime, timeLabels));\n            continue;\n        }\n        let [subject, keyframes, transition = {}] = segment;\n        /**\n         * If a relative or absolute time value has been specified we need to resolve\n         * it in relation to the currentTime.\n         */\n        if (transition.at !== undefined) {\n            currentTime = calcNextTime(currentTime, transition.at, prevTime, timeLabels);\n        }\n        /**\n         * Keep track of the maximum duration in this definition. This will be\n         * applied to currentTime once the definition has been parsed.\n         */\n        let maxDuration = 0;\n        const resolveValueSequence = (valueKeyframes, valueTransition, valueSequence, elementIndex = 0, numElements = 0) => {\n            const valueKeyframesAsList = keyframesAsList(valueKeyframes);\n            const { delay = 0, times = defaultOffset(valueKeyframesAsList), type = \"keyframes\", ...remainingTransition } = valueTransition;\n            let { ease = defaultTransition.ease || \"easeOut\", duration } = valueTransition;\n            /**\n             * Resolve stagger() if defined.\n             */\n            const calculatedDelay = typeof delay === \"function\"\n                ? delay(elementIndex, numElements)\n                : delay;\n            /**\n             * If this animation should and can use a spring, generate a spring easing function.\n             */\n            const numKeyframes = valueKeyframesAsList.length;\n            if (numKeyframes <= 2 && type === \"spring\") {\n                /**\n                 * As we're creating an easing function from a spring,\n                 * ideally we want to generate it using the real distance\n                 * between the two keyframes. However this isn't always\n                 * possible - in these situations we use 0-100.\n                 */\n                let absoluteDelta = 100;\n                if (numKeyframes === 2 &&\n                    isNumberKeyframesArray(valueKeyframesAsList)) {\n                    const delta = valueKeyframesAsList[1] - valueKeyframesAsList[0];\n                    absoluteDelta = Math.abs(delta);\n                }\n                const springTransition = { ...remainingTransition };\n                if (duration !== undefined) {\n                    springTransition.duration = secondsToMilliseconds(duration);\n                }\n                const springEasing = createGeneratorEasing(springTransition, absoluteDelta);\n                ease = springEasing.ease;\n                duration = springEasing.duration;\n            }\n            duration !== null && duration !== void 0 ? duration : (duration = defaultDuration);\n            const startTime = currentTime + calculatedDelay;\n            const targetTime = startTime + duration;\n            /**\n             * If there's only one time offset of 0, fill in a second with length 1\n             */\n            if (times.length === 1 && times[0] === 0) {\n                times[1] = 1;\n            }\n            /**\n             * Fill out if offset if fewer offsets than keyframes\n             */\n            const remainder = times.length - valueKeyframesAsList.length;\n            remainder > 0 && fillOffset(times, remainder);\n            /**\n             * If only one value has been set, ie [1], push a null to the start of\n             * the keyframe array. This will let us mark a keyframe at this point\n             * that will later be hydrated with the previous value.\n             */\n            valueKeyframesAsList.length === 1 &&\n                valueKeyframesAsList.unshift(null);\n            /**\n             * Add keyframes, mapping offsets to absolute time.\n             */\n            addKeyframes(valueSequence, valueKeyframesAsList, ease, times, startTime, targetTime);\n            maxDuration = Math.max(calculatedDelay + duration, maxDuration);\n            totalDuration = Math.max(targetTime, totalDuration);\n        };\n        if (isMotionValue(subject)) {\n            const subjectSequence = getSubjectSequence(subject, sequences);\n            resolveValueSequence(keyframes, transition, getValueSequence(\"default\", subjectSequence));\n        }\n        else {\n            /**\n             * Find all the elements specified in the definition and parse value\n             * keyframes from their timeline definitions.\n             */\n            const elements = resolveElements(subject, scope, elementCache);\n            const numElements = elements.length;\n            /**\n             * For every element in this segment, process the defined values.\n             */\n            for (let elementIndex = 0; elementIndex < numElements; elementIndex++) {\n                /**\n                 * Cast necessary, but we know these are of this type\n                 */\n                keyframes = keyframes;\n                transition = transition;\n                const element = elements[elementIndex];\n                const subjectSequence = getSubjectSequence(element, sequences);\n                for (const key in keyframes) {\n                    resolveValueSequence(keyframes[key], getValueTransition(transition, key), getValueSequence(key, subjectSequence), elementIndex, numElements);\n                }\n            }\n        }\n        prevTime = currentTime;\n        currentTime += maxDuration;\n    }\n    /**\n     * For every element and value combination create a new animation.\n     */\n    sequences.forEach((valueSequences, element) => {\n        for (const key in valueSequences) {\n            const valueSequence = valueSequences[key];\n            /**\n             * Arrange all the keyframes in ascending time order.\n             */\n            valueSequence.sort(compareByTime);\n            const keyframes = [];\n            const valueOffset = [];\n            const valueEasing = [];\n            /**\n             * For each keyframe, translate absolute times into\n             * relative offsets based on the total duration of the timeline.\n             */\n            for (let i = 0; i < valueSequence.length; i++) {\n                const { at, value, easing } = valueSequence[i];\n                keyframes.push(value);\n                valueOffset.push(progress(0, totalDuration, at));\n                valueEasing.push(easing || \"easeOut\");\n            }\n            /**\n             * If the first keyframe doesn't land on offset: 0\n             * provide one by duplicating the initial keyframe. This ensures\n             * it snaps to the first keyframe when the animation starts.\n             */\n            if (valueOffset[0] !== 0) {\n                valueOffset.unshift(0);\n                keyframes.unshift(keyframes[0]);\n                valueEasing.unshift(defaultSegmentEasing);\n            }\n            /**\n             * If the last keyframe doesn't land on offset: 1\n             * provide one with a null wildcard value. This will ensure it\n             * stays static until the end of the animation.\n             */\n            if (valueOffset[valueOffset.length - 1] !== 1) {\n                valueOffset.push(1);\n                keyframes.push(null);\n            }\n            if (!animationDefinitions.has(element)) {\n                animationDefinitions.set(element, {\n                    keyframes: {},\n                    transition: {},\n                });\n            }\n            const definition = animationDefinitions.get(element);\n            definition.keyframes[key] = keyframes;\n            definition.transition[key] = {\n                ...defaultTransition,\n                duration: totalDuration,\n                ease: valueEasing,\n                times: valueOffset,\n                ...sequenceTransition,\n            };\n        }\n    });\n    return animationDefinitions;\n}\nfunction getSubjectSequence(subject, sequences) {\n    !sequences.has(subject) && sequences.set(subject, {});\n    return sequences.get(subject);\n}\nfunction getValueSequence(name, sequences) {\n    if (!sequences[name])\n        sequences[name] = [];\n    return sequences[name];\n}\nfunction keyframesAsList(keyframes) {\n    return Array.isArray(keyframes) ? keyframes : [keyframes];\n}\nfunction getValueTransition(transition, key) {\n    return transition[key]\n        ? {\n            ...transition,\n            ...transition[key],\n        }\n        : { ...transition };\n}\nconst isNumber = (keyframe) => typeof keyframe === \"number\";\nconst isNumberKeyframesArray = (keyframes) => keyframes.every(isNumber);\n\nexport { createAnimationsFromSequence, getValueTransition };\n"],"mappings":";;;;;AAAA,SAASA,qBAAT,QAAsC,gDAAtC;AACA,SAASC,eAAT,QAAgC,4CAAhC;AACA,SAASC,aAAT,QAA8B,iCAA9B;AACA,SAASC,UAAT,QAA2B,8BAA3B;AACA,SAASC,QAAT,QAAyB,0BAAzB;AACA,SAASC,qBAAT,QAAsC,iCAAtC;AACA,SAASC,aAAT,QAA8B,uCAA9B;AACA,SAASC,YAAT,QAA6B,uBAA7B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,aAAT,QAA8B,kBAA9B;AAEA,IAAMC,oBAAoB,GAAG,WAA7B;;AACA,SAASC,4BAAT,CAAsCC,QAAtC,EAA+G;EAAA,+EAAX,EAAW;EAAA,iCAA7DC,iBAA6D;EAAA,IAA7DA,iBAA6D,sCAAzC,EAAyC;EAAA,IAAlCC,kBAAkC;;EAAA,IAAPC,KAAO;EAC3G,IAAMC,eAAe,GAAGH,iBAAiB,CAACI,QAAlB,IAA8B,GAAtD;EACA,IAAMC,oBAAoB,GAAG,IAAIC,GAAJ,EAA7B;EACA,IAAMC,SAAS,GAAG,IAAID,GAAJ,EAAlB;EACA,IAAME,YAAY,GAAG,EAArB;EACA,IAAMC,UAAU,GAAG,IAAIH,GAAJ,EAAnB;EACA,IAAII,QAAQ,GAAG,CAAf;EACA,IAAIC,WAAW,GAAG,CAAlB;EACA,IAAIC,aAAa,GAAG,CAApB;EACA;AACJ;AACA;AACA;AACA;;EAb+G,2BAclGC,CAdkG;IAevG,IAAMC,OAAO,GAAGf,QAAQ,CAACc,CAAD,CAAxB;IACA;AACR;AACA;;IACQ,IAAI,OAAOC,OAAP,KAAmB,QAAvB,EAAiC;MAC7BL,UAAU,CAACM,GAAX,CAAeD,OAAf,EAAwBH,WAAxB;MACA;IACH,CAHD,MAIK,IAAI,CAACK,KAAK,CAACC,OAAN,CAAcH,OAAd,CAAL,EAA6B;MAC9BL,UAAU,CAACM,GAAX,CAAeD,OAAO,CAACI,IAAvB,EAA6BxB,YAAY,CAACiB,WAAD,EAAcG,OAAO,CAACK,EAAtB,EAA0BT,QAA1B,EAAoCD,UAApC,CAAzC;MACA;IACH;;IACD,8BAA4CK,OAA5C;IAAA,IAAKM,OAAL;IAAA,IAAcC,SAAd;IAAA;IAAA,IAAyBC,UAAzB,0BAAsC,EAAtC;IACA;AACR;AACA;AACA;;;IACQ,IAAIA,UAAU,CAACH,EAAX,KAAkBI,SAAtB,EAAiC;MAC7BZ,WAAW,GAAGjB,YAAY,CAACiB,WAAD,EAAcW,UAAU,CAACH,EAAzB,EAA6BT,QAA7B,EAAuCD,UAAvC,CAA1B;IACH;IACD;AACR;AACA;AACA;;;IACQ,IAAIe,WAAW,GAAG,CAAlB;;IACA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,cAAD,EAAiBC,eAAjB,EAAkCC,aAAlC,EAAuF;MAAA,IAAtCC,YAAsC,uEAAvB,CAAuB;MAAA,IAApBC,WAAoB,uEAAN,CAAM;MAChH,IAAMC,oBAAoB,GAAGC,eAAe,CAACN,cAAD,CAA5C;;MACA,4BAA+GC,eAA/G,CAAQM,KAAR;MAAA,IAAQA,KAAR,sCAAgB,CAAhB;MAAA,4BAA+GN,eAA/G,CAAmBO,KAAnB;MAAA,IAAmBA,KAAnB,sCAA2B7C,aAAa,CAAC0C,oBAAD,CAAxC;MAAA,4BAA+GJ,eAA/G,CAAgEQ,IAAhE;MAAA,IAAgEA,IAAhE,sCAAuE,WAAvE;MAAA,IAAuFC,mBAAvF,4BAA+GT,eAA/G;;MACA,4BAA+DA,eAA/D,CAAMU,IAAN;MAAA,IAAMA,IAAN,sCAAarC,iBAAiB,CAACqC,IAAlB,IAA0B,SAAvC;MAAA,IAAkDjC,QAAlD,GAA+DuB,eAA/D,CAAkDvB,QAAlD;MACA;AACZ;AACA;;MACY,IAAMkC,eAAe,GAAG,OAAOL,KAAP,KAAiB,UAAjB,GAClBA,KAAK,CAACJ,YAAD,EAAeC,WAAf,CADa,GAElBG,KAFN;MAGA;AACZ;AACA;;MACY,IAAMM,YAAY,GAAGR,oBAAoB,CAACS,MAA1C;;MACA,IAAID,YAAY,IAAI,CAAhB,IAAqBJ,IAAI,KAAK,QAAlC,EAA4C;QACxC;AAChB;AACA;AACA;AACA;AACA;QACgB,IAAIM,aAAa,GAAG,GAApB;;QACA,IAAIF,YAAY,KAAK,CAAjB,IACAG,sBAAsB,CAACX,oBAAD,CAD1B,EACkD;UAC9C,IAAMY,KAAK,GAAGZ,oBAAoB,CAAC,CAAD,CAApB,GAA0BA,oBAAoB,CAAC,CAAD,CAA5D;UACAU,aAAa,GAAGG,IAAI,CAACC,GAAL,CAASF,KAAT,CAAhB;QACH;;QACD,IAAMG,gBAAgB,qBAAQV,mBAAR,CAAtB;;QACA,IAAIhC,QAAQ,KAAKmB,SAAjB,EAA4B;UACxBuB,gBAAgB,CAAC1C,QAAjB,GAA4BZ,qBAAqB,CAACY,QAAD,CAAjD;QACH;;QACD,IAAM2C,YAAY,GAAG5D,qBAAqB,CAAC2D,gBAAD,EAAmBL,aAAnB,CAA1C;QACAJ,IAAI,GAAGU,YAAY,CAACV,IAApB;QACAjC,QAAQ,GAAG2C,YAAY,CAAC3C,QAAxB;MACH;;MACDA,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2CA,QAA3C,GAAuDA,QAAQ,GAAGD,eAAlE;MACA,IAAM6C,SAAS,GAAGrC,WAAW,GAAG2B,eAAhC;MACA,IAAMW,UAAU,GAAGD,SAAS,GAAG5C,QAA/B;MACA;AACZ;AACA;;MACY,IAAI8B,KAAK,CAACM,MAAN,KAAiB,CAAjB,IAAsBN,KAAK,CAAC,CAAD,CAAL,KAAa,CAAvC,EAA0C;QACtCA,KAAK,CAAC,CAAD,CAAL,GAAW,CAAX;MACH;MACD;AACZ;AACA;;;MACY,IAAMgB,SAAS,GAAGhB,KAAK,CAACM,MAAN,GAAeT,oBAAoB,CAACS,MAAtD;MACAU,SAAS,GAAG,CAAZ,IAAiB5D,UAAU,CAAC4C,KAAD,EAAQgB,SAAR,CAA3B;MACA;AACZ;AACA;AACA;AACA;;MACYnB,oBAAoB,CAACS,MAArB,KAAgC,CAAhC,IACIT,oBAAoB,CAACoB,OAArB,CAA6B,IAA7B,CADJ;MAEA;AACZ;AACA;;MACYxD,YAAY,CAACiC,aAAD,EAAgBG,oBAAhB,EAAsCM,IAAtC,EAA4CH,KAA5C,EAAmDc,SAAnD,EAA8DC,UAA9D,CAAZ;MACAzB,WAAW,GAAGoB,IAAI,CAACQ,GAAL,CAASd,eAAe,GAAGlC,QAA3B,EAAqCoB,WAArC,CAAd;MACAZ,aAAa,GAAGgC,IAAI,CAACQ,GAAL,CAASH,UAAT,EAAqBrC,aAArB,CAAhB;IACH,CA9DD;;IA+DA,IAAInB,aAAa,CAAC2B,OAAD,CAAjB,EAA4B;MACxB,IAAMiC,eAAe,GAAGC,kBAAkB,CAAClC,OAAD,EAAUb,SAAV,CAA1C;MACAkB,oBAAoB,CAACJ,SAAD,EAAYC,UAAZ,EAAwBiC,gBAAgB,CAAC,SAAD,EAAYF,eAAZ,CAAxC,CAApB;IACH,CAHD,MAIK;MACD;AACZ;AACA;AACA;MACY,IAAMG,QAAQ,GAAGpE,eAAe,CAACgC,OAAD,EAAUlB,KAAV,EAAiBM,YAAjB,CAAhC;MACA,IAAMsB,WAAW,GAAG0B,QAAQ,CAAChB,MAA7B;MACA;AACZ;AACA;;MACY,KAAK,IAAIX,YAAY,GAAG,CAAxB,EAA2BA,YAAY,GAAGC,WAA1C,EAAuDD,YAAY,EAAnE,EAAuE;QACnE;AAChB;AACA;QACgBR,SAAS,GAAGA,SAAZ;QACAC,UAAU,GAAGA,UAAb;QACA,IAAMmC,OAAO,GAAGD,QAAQ,CAAC3B,YAAD,CAAxB;;QACA,IAAMwB,gBAAe,GAAGC,kBAAkB,CAACG,OAAD,EAAUlD,SAAV,CAA1C;;QACA,KAAK,IAAMmD,GAAX,IAAkBrC,SAAlB,EAA6B;UACzBI,oBAAoB,CAACJ,SAAS,CAACqC,GAAD,CAAV,EAAiBC,kBAAkB,CAACrC,UAAD,EAAaoC,GAAb,CAAnC,EAAsDH,gBAAgB,CAACG,GAAD,EAAML,gBAAN,CAAtE,EAA8FxB,YAA9F,EAA4GC,WAA5G,CAApB;QACH;MACJ;IACJ;;IACDpB,QAAQ,GAAGC,WAAX;IACAA,WAAW,IAAIa,WAAf;EAnIuG;;EAc3G,KAAK,IAAIX,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,QAAQ,CAACyC,MAA7B,EAAqC3B,CAAC,EAAtC,EAA0C;IAAA,iBAAjCA,CAAiC;;IAAA,yBAWlC;EA2GP;EACD;AACJ;AACA;;;EACIN,SAAS,CAACqD,OAAV,CAAkB,UAACC,cAAD,EAAiBJ,OAAjB,EAA6B;IAC3C,KAAK,IAAMC,GAAX,IAAkBG,cAAlB,EAAkC;MAC9B,IAAMjC,aAAa,GAAGiC,cAAc,CAACH,GAAD,CAApC;MACA;AACZ;AACA;;MACY9B,aAAa,CAACkC,IAAd,CAAmBlE,aAAnB;MACA,IAAMyB,SAAS,GAAG,EAAlB;MACA,IAAM0C,WAAW,GAAG,EAApB;MACA,IAAMC,WAAW,GAAG,EAApB;MACA;AACZ;AACA;AACA;;MACY,KAAK,IAAInD,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGe,aAAa,CAACY,MAAlC,EAA0C3B,EAAC,EAA3C,EAA+C;QAC3C,wBAA8Be,aAAa,CAACf,EAAD,CAA3C;QAAA,IAAQM,EAAR,qBAAQA,EAAR;QAAA,IAAY8C,KAAZ,qBAAYA,KAAZ;QAAA,IAAmBC,MAAnB,qBAAmBA,MAAnB;QACA7C,SAAS,CAAC8C,IAAV,CAAeF,KAAf;QACAF,WAAW,CAACI,IAAZ,CAAiB5E,QAAQ,CAAC,CAAD,EAAIqB,aAAJ,EAAmBO,EAAnB,CAAzB;QACA6C,WAAW,CAACG,IAAZ,CAAiBD,MAAM,IAAI,SAA3B;MACH;MACD;AACZ;AACA;AACA;AACA;;;MACY,IAAIH,WAAW,CAAC,CAAD,CAAX,KAAmB,CAAvB,EAA0B;QACtBA,WAAW,CAACZ,OAAZ,CAAoB,CAApB;QACA9B,SAAS,CAAC8B,OAAV,CAAkB9B,SAAS,CAAC,CAAD,CAA3B;QACA2C,WAAW,CAACb,OAAZ,CAAoBtD,oBAApB;MACH;MACD;AACZ;AACA;AACA;AACA;;;MACY,IAAIkE,WAAW,CAACA,WAAW,CAACvB,MAAZ,GAAqB,CAAtB,CAAX,KAAwC,CAA5C,EAA+C;QAC3CuB,WAAW,CAACI,IAAZ,CAAiB,CAAjB;QACA9C,SAAS,CAAC8C,IAAV,CAAe,IAAf;MACH;;MACD,IAAI,CAAC9D,oBAAoB,CAAC+D,GAArB,CAAyBX,OAAzB,CAAL,EAAwC;QACpCpD,oBAAoB,CAACU,GAArB,CAAyB0C,OAAzB,EAAkC;UAC9BpC,SAAS,EAAE,EADmB;UAE9BC,UAAU,EAAE;QAFkB,CAAlC;MAIH;;MACD,IAAM+C,UAAU,GAAGhE,oBAAoB,CAACiE,GAArB,CAAyBb,OAAzB,CAAnB;MACAY,UAAU,CAAChD,SAAX,CAAqBqC,GAArB,IAA4BrC,SAA5B;MACAgD,UAAU,CAAC/C,UAAX,CAAsBoC,GAAtB,oCACO1D,iBADP;QAEII,QAAQ,EAAEQ,aAFd;QAGIyB,IAAI,EAAE2B,WAHV;QAII9B,KAAK,EAAE6B;MAJX,GAKO9D,kBALP;IAOH;EACJ,CAvDD;EAwDA,OAAOI,oBAAP;AACH;;AACD,SAASiD,kBAAT,CAA4BlC,OAA5B,EAAqCb,SAArC,EAAgD;EAC5C,CAACA,SAAS,CAAC6D,GAAV,CAAchD,OAAd,CAAD,IAA2Bb,SAAS,CAACQ,GAAV,CAAcK,OAAd,EAAuB,EAAvB,CAA3B;EACA,OAAOb,SAAS,CAAC+D,GAAV,CAAclD,OAAd,CAAP;AACH;;AACD,SAASmC,gBAAT,CAA0BrC,IAA1B,EAAgCX,SAAhC,EAA2C;EACvC,IAAI,CAACA,SAAS,CAACW,IAAD,CAAd,EACIX,SAAS,CAACW,IAAD,CAAT,GAAkB,EAAlB;EACJ,OAAOX,SAAS,CAACW,IAAD,CAAhB;AACH;;AACD,SAASc,eAAT,CAAyBX,SAAzB,EAAoC;EAChC,OAAOL,KAAK,CAACC,OAAN,CAAcI,SAAd,IAA2BA,SAA3B,GAAuC,CAACA,SAAD,CAA9C;AACH;;AACD,SAASsC,kBAAT,CAA4BrC,UAA5B,EAAwCoC,GAAxC,EAA6C;EACzC,OAAOpC,UAAU,CAACoC,GAAD,CAAV,mCAEIpC,UAFJ,GAGIA,UAAU,CAACoC,GAAD,CAHd,sBAKIpC,UALJ,CAAP;AAMH;;AACD,IAAMiD,QAAQ,GAAG,SAAXA,QAAW,CAACC,QAAD;EAAA,OAAc,OAAOA,QAAP,KAAoB,QAAlC;AAAA,CAAjB;;AACA,IAAM9B,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACrB,SAAD;EAAA,OAAeA,SAAS,CAACoD,KAAV,CAAgBF,QAAhB,CAAf;AAAA,CAA/B;;AAEA,SAASzE,4BAAT,EAAuC6D,kBAAvC"},"metadata":{},"sourceType":"module"}