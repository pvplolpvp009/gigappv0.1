{"ast":null,"code":"import { transformPropOrder } from './transform.mjs';\nvar translateAlias = {\n  x: \"translateX\",\n  y: \"translateY\",\n  z: \"translateZ\",\n  transformPerspective: \"perspective\"\n};\nvar numTransforms = transformPropOrder.length;\n/**\n * Build a CSS transform style from individual x/y/scale etc properties.\n *\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\n * providing a transformTemplate function.\n */\n\nfunction buildTransform(transform, _ref, transformIsDefault, transformTemplate) {\n  var _ref$enableHardwareAc = _ref.enableHardwareAcceleration,\n      enableHardwareAcceleration = _ref$enableHardwareAc === void 0 ? true : _ref$enableHardwareAc,\n      _ref$allowTransformNo = _ref.allowTransformNone,\n      allowTransformNone = _ref$allowTransformNo === void 0 ? true : _ref$allowTransformNo;\n  // The transform string we're going to build into.\n  var transformString = \"\";\n  /**\n   * Loop over all possible transforms in order, adding the ones that\n   * are present to the transform string.\n   */\n\n  for (var i = 0; i < numTransforms; i++) {\n    var key = transformPropOrder[i];\n\n    if (transform[key] !== undefined) {\n      var transformName = translateAlias[key] || key;\n      transformString += \"\".concat(transformName, \"(\").concat(transform[key], \") \");\n    }\n  }\n\n  if (enableHardwareAcceleration && !transform.z) {\n    transformString += \"translateZ(0)\";\n  }\n\n  transformString = transformString.trim(); // If we have a custom `transform` template, pass our transform values and\n  // generated transformString to that before returning\n\n  if (transformTemplate) {\n    transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n  } else if (allowTransformNone && transformIsDefault) {\n    transformString = \"none\";\n  }\n\n  return transformString;\n}\n\nexport { buildTransform };","map":{"version":3,"names":["transformPropOrder","translateAlias","x","y","z","transformPerspective","numTransforms","length","buildTransform","transform","transformIsDefault","transformTemplate","enableHardwareAcceleration","allowTransformNone","transformString","i","key","undefined","transformName","trim"],"sources":["C:/Users/pvplo/OneDrive/Рабочий стол/editpallav-main/node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs"],"sourcesContent":["import { transformPropOrder } from './transform.mjs';\n\nconst translateAlias = {\n    x: \"translateX\",\n    y: \"translateY\",\n    z: \"translateZ\",\n    transformPerspective: \"perspective\",\n};\nconst numTransforms = transformPropOrder.length;\n/**\n * Build a CSS transform style from individual x/y/scale etc properties.\n *\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\n * providing a transformTemplate function.\n */\nfunction buildTransform(transform, { enableHardwareAcceleration = true, allowTransformNone = true, }, transformIsDefault, transformTemplate) {\n    // The transform string we're going to build into.\n    let transformString = \"\";\n    /**\n     * Loop over all possible transforms in order, adding the ones that\n     * are present to the transform string.\n     */\n    for (let i = 0; i < numTransforms; i++) {\n        const key = transformPropOrder[i];\n        if (transform[key] !== undefined) {\n            const transformName = translateAlias[key] || key;\n            transformString += `${transformName}(${transform[key]}) `;\n        }\n    }\n    if (enableHardwareAcceleration && !transform.z) {\n        transformString += \"translateZ(0)\";\n    }\n    transformString = transformString.trim();\n    // If we have a custom `transform` template, pass our transform values and\n    // generated transformString to that before returning\n    if (transformTemplate) {\n        transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n    }\n    else if (allowTransformNone && transformIsDefault) {\n        transformString = \"none\";\n    }\n    return transformString;\n}\n\nexport { buildTransform };\n"],"mappings":"AAAA,SAASA,kBAAT,QAAmC,iBAAnC;AAEA,IAAMC,cAAc,GAAG;EACnBC,CAAC,EAAE,YADgB;EAEnBC,CAAC,EAAE,YAFgB;EAGnBC,CAAC,EAAE,YAHgB;EAInBC,oBAAoB,EAAE;AAJH,CAAvB;AAMA,IAAMC,aAAa,GAAGN,kBAAkB,CAACO,MAAzC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,cAAT,CAAwBC,SAAxB,QAAsGC,kBAAtG,EAA0HC,iBAA1H,EAA6I;EAAA,iCAAxGC,0BAAwG;EAAA,IAAxGA,0BAAwG,sCAA3E,IAA2E;EAAA,iCAArEC,kBAAqE;EAAA,IAArEA,kBAAqE,sCAAhD,IAAgD;EACzI;EACA,IAAIC,eAAe,GAAG,EAAtB;EACA;AACJ;AACA;AACA;;EACI,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,aAApB,EAAmCS,CAAC,EAApC,EAAwC;IACpC,IAAMC,GAAG,GAAGhB,kBAAkB,CAACe,CAAD,CAA9B;;IACA,IAAIN,SAAS,CAACO,GAAD,CAAT,KAAmBC,SAAvB,EAAkC;MAC9B,IAAMC,aAAa,GAAGjB,cAAc,CAACe,GAAD,CAAd,IAAuBA,GAA7C;MACAF,eAAe,cAAOI,aAAP,cAAwBT,SAAS,CAACO,GAAD,CAAjC,OAAf;IACH;EACJ;;EACD,IAAIJ,0BAA0B,IAAI,CAACH,SAAS,CAACL,CAA7C,EAAgD;IAC5CU,eAAe,IAAI,eAAnB;EACH;;EACDA,eAAe,GAAGA,eAAe,CAACK,IAAhB,EAAlB,CAjByI,CAkBzI;EACA;;EACA,IAAIR,iBAAJ,EAAuB;IACnBG,eAAe,GAAGH,iBAAiB,CAACF,SAAD,EAAYC,kBAAkB,GAAG,EAAH,GAAQI,eAAtC,CAAnC;EACH,CAFD,MAGK,IAAID,kBAAkB,IAAIH,kBAA1B,EAA8C;IAC/CI,eAAe,GAAG,MAAlB;EACH;;EACD,OAAOA,eAAP;AACH;;AAED,SAASN,cAAT"},"metadata":{},"sourceType":"module"}