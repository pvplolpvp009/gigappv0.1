{"ast":null,"code":"import _classCallCheck from \"C:/Users/pvplo/OneDrive/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/editpallav-main/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/pvplo/OneDrive/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/editpallav-main/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { velocityPerSecond } from '../utils/velocity-per-second.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { time } from '../frameloop/sync-time.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n/**\n * Maximum time between the value of two frames, beyond which we\n * assume the velocity has since been 0.\n */\n\nvar MAX_VELOCITY_DELTA = 30;\n\nvar isFloat = function isFloat(value) {\n  return !isNaN(parseFloat(value));\n};\n\nvar collectMotionValues = {\n  current: undefined\n};\n/**\n * `MotionValue` is used to track the state and velocity of motion values.\n *\n * @public\n */\n\nvar MotionValue = /*#__PURE__*/function () {\n  /**\n   * @param init - The initiating value\n   * @param config - Optional configuration options\n   *\n   * -  `transformer`: A function to transform incoming values with.\n   *\n   * @internal\n   */\n  function MotionValue(init) {\n    var _this = this;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, MotionValue);\n\n    /**\n     * This will be replaced by the build step with the latest version number.\n     * When MotionValues are provided to motion components, warn if versions are mixed.\n     */\n    this.version = \"11.2.10\";\n    /**\n     * Tracks whether this value can output a velocity. Currently this is only true\n     * if the value is numerical, but we might be able to widen the scope here and support\n     * other value types.\n     *\n     * @internal\n     */\n\n    this.canTrackVelocity = null;\n    /**\n     * An object containing a SubscriptionManager for each active event.\n     */\n\n    this.events = {};\n\n    this.updateAndNotify = function (v) {\n      var render = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var currentTime = time.now();\n      /**\n       * If we're updating the value during another frame or eventloop\n       * than the previous frame, then the we set the previous frame value\n       * to current.\n       */\n\n      if (_this.updatedAt !== currentTime) {\n        _this.setPrevFrameValue();\n      }\n\n      _this.prev = _this.current;\n\n      _this.setCurrent(v); // Update update subscribers\n\n\n      if (_this.current !== _this.prev && _this.events.change) {\n        _this.events.change.notify(_this.current);\n      } // Update render subscribers\n\n\n      if (render && _this.events.renderRequest) {\n        _this.events.renderRequest.notify(_this.current);\n      }\n    };\n\n    this.hasAnimated = false;\n    this.setCurrent(init);\n    this.owner = options.owner;\n  }\n\n  _createClass(MotionValue, [{\n    key: \"setCurrent\",\n    value: function setCurrent(current) {\n      this.current = current;\n      this.updatedAt = time.now();\n\n      if (this.canTrackVelocity === null && current !== undefined) {\n        this.canTrackVelocity = isFloat(this.current);\n      }\n    }\n  }, {\n    key: \"setPrevFrameValue\",\n    value: function setPrevFrameValue() {\n      var prevFrameValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.current;\n      this.prevFrameValue = prevFrameValue;\n      this.prevUpdatedAt = this.updatedAt;\n    }\n    /**\n     * Adds a function that will be notified when the `MotionValue` is updated.\n     *\n     * It returns a function that, when called, will cancel the subscription.\n     *\n     * When calling `onChange` inside a React component, it should be wrapped with the\n     * `useEffect` hook. As it returns an unsubscribe function, this should be returned\n     * from the `useEffect` function to ensure you don't add duplicate subscribers..\n     *\n     * ```jsx\n     * export const MyComponent = () => {\n     *   const x = useMotionValue(0)\n     *   const y = useMotionValue(0)\n     *   const opacity = useMotionValue(1)\n     *\n     *   useEffect(() => {\n     *     function updateOpacity() {\n     *       const maxXY = Math.max(x.get(), y.get())\n     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\n     *       opacity.set(newOpacity)\n     *     }\n     *\n     *     const unsubscribeX = x.on(\"change\", updateOpacity)\n     *     const unsubscribeY = y.on(\"change\", updateOpacity)\n     *\n     *     return () => {\n     *       unsubscribeX()\n     *       unsubscribeY()\n     *     }\n     *   }, [])\n     *\n     *   return <motion.div style={{ x }} />\n     * }\n     * ```\n     *\n     * @param subscriber - A function that receives the latest value.\n     * @returns A function that, when called, will cancel this subscription.\n     *\n     * @deprecated\n     */\n\n  }, {\n    key: \"onChange\",\n    value: function onChange(subscription) {\n      if (process.env.NODE_ENV !== \"production\") {\n        warnOnce(false, \"value.onChange(callback) is deprecated. Switch to value.on(\\\"change\\\", callback).\");\n      }\n\n      return this.on(\"change\", subscription);\n    }\n  }, {\n    key: \"on\",\n    value: function on(eventName, callback) {\n      var _this2 = this;\n\n      if (!this.events[eventName]) {\n        this.events[eventName] = new SubscriptionManager();\n      }\n\n      var unsubscribe = this.events[eventName].add(callback);\n\n      if (eventName === \"change\") {\n        return function () {\n          unsubscribe();\n          /**\n           * If we have no more change listeners by the start\n           * of the next frame, stop active animations.\n           */\n\n          frame.read(function () {\n            if (!_this2.events.change.getSize()) {\n              _this2.stop();\n            }\n          });\n        };\n      }\n\n      return unsubscribe;\n    }\n  }, {\n    key: \"clearListeners\",\n    value: function clearListeners() {\n      for (var eventManagers in this.events) {\n        this.events[eventManagers].clear();\n      }\n    }\n    /**\n     * Attaches a passive effect to the `MotionValue`.\n     *\n     * @internal\n     */\n\n  }, {\n    key: \"attach\",\n    value: function attach(passiveEffect, stopPassiveEffect) {\n      this.passiveEffect = passiveEffect;\n      this.stopPassiveEffect = stopPassiveEffect;\n    }\n    /**\n     * Sets the state of the `MotionValue`.\n     *\n     * @remarks\n     *\n     * ```jsx\n     * const x = useMotionValue(0)\n     * x.set(10)\n     * ```\n     *\n     * @param latest - Latest value to set.\n     * @param render - Whether to notify render subscribers. Defaults to `true`\n     *\n     * @public\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(v) {\n      var render = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      if (!render || !this.passiveEffect) {\n        this.updateAndNotify(v, render);\n      } else {\n        this.passiveEffect(v, this.updateAndNotify);\n      }\n    }\n  }, {\n    key: \"setWithVelocity\",\n    value: function setWithVelocity(prev, current, delta) {\n      this.set(current);\n      this.prev = undefined;\n      this.prevFrameValue = prev;\n      this.prevUpdatedAt = this.updatedAt - delta;\n    }\n    /**\n     * Set the state of the `MotionValue`, stopping any active animations,\n     * effects, and resets velocity to `0`.\n     */\n\n  }, {\n    key: \"jump\",\n    value: function jump(v) {\n      var endAnimation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      this.updateAndNotify(v);\n      this.prev = v;\n      this.prevUpdatedAt = this.prevFrameValue = undefined;\n      endAnimation && this.stop();\n      if (this.stopPassiveEffect) this.stopPassiveEffect();\n    }\n    /**\n     * Returns the latest state of `MotionValue`\n     *\n     * @returns - The latest state of `MotionValue`\n     *\n     * @public\n     */\n\n  }, {\n    key: \"get\",\n    value: function get() {\n      if (collectMotionValues.current) {\n        collectMotionValues.current.push(this);\n      }\n\n      return this.current;\n    }\n    /**\n     * @public\n     */\n\n  }, {\n    key: \"getPrevious\",\n    value: function getPrevious() {\n      return this.prev;\n    }\n    /**\n     * Returns the latest velocity of `MotionValue`\n     *\n     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\n     *\n     * @public\n     */\n\n  }, {\n    key: \"getVelocity\",\n    value: function getVelocity() {\n      var currentTime = time.now();\n\n      if (!this.canTrackVelocity || this.prevFrameValue === undefined || currentTime - this.updatedAt > MAX_VELOCITY_DELTA) {\n        return 0;\n      }\n\n      var delta = Math.min(this.updatedAt - this.prevUpdatedAt, MAX_VELOCITY_DELTA); // Casts because of parseFloat's poor typing\n\n      return velocityPerSecond(parseFloat(this.current) - parseFloat(this.prevFrameValue), delta);\n    }\n    /**\n     * Registers a new animation to control this `MotionValue`. Only one\n     * animation can drive a `MotionValue` at one time.\n     *\n     * ```jsx\n     * value.start()\n     * ```\n     *\n     * @param animation - A function that starts the provided animation\n     *\n     * @internal\n     */\n\n  }, {\n    key: \"start\",\n    value: function start(startAnimation) {\n      var _this3 = this;\n\n      this.stop();\n      return new Promise(function (resolve) {\n        _this3.hasAnimated = true;\n        _this3.animation = startAnimation(resolve);\n\n        if (_this3.events.animationStart) {\n          _this3.events.animationStart.notify();\n        }\n      }).then(function () {\n        if (_this3.events.animationComplete) {\n          _this3.events.animationComplete.notify();\n        }\n\n        _this3.clearAnimation();\n      });\n    }\n    /**\n     * Stop the currently active animation.\n     *\n     * @public\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (this.animation) {\n        this.animation.stop();\n\n        if (this.events.animationCancel) {\n          this.events.animationCancel.notify();\n        }\n      }\n\n      this.clearAnimation();\n    }\n    /**\n     * Returns `true` if this value is currently animating.\n     *\n     * @public\n     */\n\n  }, {\n    key: \"isAnimating\",\n    value: function isAnimating() {\n      return !!this.animation;\n    }\n  }, {\n    key: \"clearAnimation\",\n    value: function clearAnimation() {\n      delete this.animation;\n    }\n    /**\n     * Destroy and clean up subscribers to this `MotionValue`.\n     *\n     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\n     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\n     * created a `MotionValue` via the `motionValue` function.\n     *\n     * @public\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.clearListeners();\n      this.stop();\n\n      if (this.stopPassiveEffect) {\n        this.stopPassiveEffect();\n      }\n    }\n  }]);\n\n  return MotionValue;\n}();\n\nfunction motionValue(init, options) {\n  return new MotionValue(init, options);\n}\n\nexport { MotionValue, collectMotionValues, motionValue };","map":{"version":3,"names":["SubscriptionManager","velocityPerSecond","warnOnce","time","frame","MAX_VELOCITY_DELTA","isFloat","value","isNaN","parseFloat","collectMotionValues","current","undefined","MotionValue","init","options","version","canTrackVelocity","events","updateAndNotify","v","render","currentTime","now","updatedAt","setPrevFrameValue","prev","setCurrent","change","notify","renderRequest","hasAnimated","owner","prevFrameValue","prevUpdatedAt","subscription","process","env","NODE_ENV","on","eventName","callback","unsubscribe","add","read","getSize","stop","eventManagers","clear","passiveEffect","stopPassiveEffect","delta","set","endAnimation","push","Math","min","startAnimation","Promise","resolve","animation","animationStart","then","animationComplete","clearAnimation","animationCancel","clearListeners","motionValue"],"sources":["C:/Users/pvplo/OneDrive/Рабочий стол/editpallav-main/node_modules/framer-motion/dist/es/value/index.mjs"],"sourcesContent":["import { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { velocityPerSecond } from '../utils/velocity-per-second.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { time } from '../frameloop/sync-time.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\n/**\n * Maximum time between the value of two frames, beyond which we\n * assume the velocity has since been 0.\n */\nconst MAX_VELOCITY_DELTA = 30;\nconst isFloat = (value) => {\n    return !isNaN(parseFloat(value));\n};\nconst collectMotionValues = {\n    current: undefined,\n};\n/**\n * `MotionValue` is used to track the state and velocity of motion values.\n *\n * @public\n */\nclass MotionValue {\n    /**\n     * @param init - The initiating value\n     * @param config - Optional configuration options\n     *\n     * -  `transformer`: A function to transform incoming values with.\n     *\n     * @internal\n     */\n    constructor(init, options = {}) {\n        /**\n         * This will be replaced by the build step with the latest version number.\n         * When MotionValues are provided to motion components, warn if versions are mixed.\n         */\n        this.version = \"11.2.10\";\n        /**\n         * Tracks whether this value can output a velocity. Currently this is only true\n         * if the value is numerical, but we might be able to widen the scope here and support\n         * other value types.\n         *\n         * @internal\n         */\n        this.canTrackVelocity = null;\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        this.updateAndNotify = (v, render = true) => {\n            const currentTime = time.now();\n            /**\n             * If we're updating the value during another frame or eventloop\n             * than the previous frame, then the we set the previous frame value\n             * to current.\n             */\n            if (this.updatedAt !== currentTime) {\n                this.setPrevFrameValue();\n            }\n            this.prev = this.current;\n            this.setCurrent(v);\n            // Update update subscribers\n            if (this.current !== this.prev && this.events.change) {\n                this.events.change.notify(this.current);\n            }\n            // Update render subscribers\n            if (render && this.events.renderRequest) {\n                this.events.renderRequest.notify(this.current);\n            }\n        };\n        this.hasAnimated = false;\n        this.setCurrent(init);\n        this.owner = options.owner;\n    }\n    setCurrent(current) {\n        this.current = current;\n        this.updatedAt = time.now();\n        if (this.canTrackVelocity === null && current !== undefined) {\n            this.canTrackVelocity = isFloat(this.current);\n        }\n    }\n    setPrevFrameValue(prevFrameValue = this.current) {\n        this.prevFrameValue = prevFrameValue;\n        this.prevUpdatedAt = this.updatedAt;\n    }\n    /**\n     * Adds a function that will be notified when the `MotionValue` is updated.\n     *\n     * It returns a function that, when called, will cancel the subscription.\n     *\n     * When calling `onChange` inside a React component, it should be wrapped with the\n     * `useEffect` hook. As it returns an unsubscribe function, this should be returned\n     * from the `useEffect` function to ensure you don't add duplicate subscribers..\n     *\n     * ```jsx\n     * export const MyComponent = () => {\n     *   const x = useMotionValue(0)\n     *   const y = useMotionValue(0)\n     *   const opacity = useMotionValue(1)\n     *\n     *   useEffect(() => {\n     *     function updateOpacity() {\n     *       const maxXY = Math.max(x.get(), y.get())\n     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\n     *       opacity.set(newOpacity)\n     *     }\n     *\n     *     const unsubscribeX = x.on(\"change\", updateOpacity)\n     *     const unsubscribeY = y.on(\"change\", updateOpacity)\n     *\n     *     return () => {\n     *       unsubscribeX()\n     *       unsubscribeY()\n     *     }\n     *   }, [])\n     *\n     *   return <motion.div style={{ x }} />\n     * }\n     * ```\n     *\n     * @param subscriber - A function that receives the latest value.\n     * @returns A function that, when called, will cancel this subscription.\n     *\n     * @deprecated\n     */\n    onChange(subscription) {\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(false, `value.onChange(callback) is deprecated. Switch to value.on(\"change\", callback).`);\n        }\n        return this.on(\"change\", subscription);\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        const unsubscribe = this.events[eventName].add(callback);\n        if (eventName === \"change\") {\n            return () => {\n                unsubscribe();\n                /**\n                 * If we have no more change listeners by the start\n                 * of the next frame, stop active animations.\n                 */\n                frame.read(() => {\n                    if (!this.events.change.getSize()) {\n                        this.stop();\n                    }\n                });\n            };\n        }\n        return unsubscribe;\n    }\n    clearListeners() {\n        for (const eventManagers in this.events) {\n            this.events[eventManagers].clear();\n        }\n    }\n    /**\n     * Attaches a passive effect to the `MotionValue`.\n     *\n     * @internal\n     */\n    attach(passiveEffect, stopPassiveEffect) {\n        this.passiveEffect = passiveEffect;\n        this.stopPassiveEffect = stopPassiveEffect;\n    }\n    /**\n     * Sets the state of the `MotionValue`.\n     *\n     * @remarks\n     *\n     * ```jsx\n     * const x = useMotionValue(0)\n     * x.set(10)\n     * ```\n     *\n     * @param latest - Latest value to set.\n     * @param render - Whether to notify render subscribers. Defaults to `true`\n     *\n     * @public\n     */\n    set(v, render = true) {\n        if (!render || !this.passiveEffect) {\n            this.updateAndNotify(v, render);\n        }\n        else {\n            this.passiveEffect(v, this.updateAndNotify);\n        }\n    }\n    setWithVelocity(prev, current, delta) {\n        this.set(current);\n        this.prev = undefined;\n        this.prevFrameValue = prev;\n        this.prevUpdatedAt = this.updatedAt - delta;\n    }\n    /**\n     * Set the state of the `MotionValue`, stopping any active animations,\n     * effects, and resets velocity to `0`.\n     */\n    jump(v, endAnimation = true) {\n        this.updateAndNotify(v);\n        this.prev = v;\n        this.prevUpdatedAt = this.prevFrameValue = undefined;\n        endAnimation && this.stop();\n        if (this.stopPassiveEffect)\n            this.stopPassiveEffect();\n    }\n    /**\n     * Returns the latest state of `MotionValue`\n     *\n     * @returns - The latest state of `MotionValue`\n     *\n     * @public\n     */\n    get() {\n        if (collectMotionValues.current) {\n            collectMotionValues.current.push(this);\n        }\n        return this.current;\n    }\n    /**\n     * @public\n     */\n    getPrevious() {\n        return this.prev;\n    }\n    /**\n     * Returns the latest velocity of `MotionValue`\n     *\n     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\n     *\n     * @public\n     */\n    getVelocity() {\n        const currentTime = time.now();\n        if (!this.canTrackVelocity ||\n            this.prevFrameValue === undefined ||\n            currentTime - this.updatedAt > MAX_VELOCITY_DELTA) {\n            return 0;\n        }\n        const delta = Math.min(this.updatedAt - this.prevUpdatedAt, MAX_VELOCITY_DELTA);\n        // Casts because of parseFloat's poor typing\n        return velocityPerSecond(parseFloat(this.current) -\n            parseFloat(this.prevFrameValue), delta);\n    }\n    /**\n     * Registers a new animation to control this `MotionValue`. Only one\n     * animation can drive a `MotionValue` at one time.\n     *\n     * ```jsx\n     * value.start()\n     * ```\n     *\n     * @param animation - A function that starts the provided animation\n     *\n     * @internal\n     */\n    start(startAnimation) {\n        this.stop();\n        return new Promise((resolve) => {\n            this.hasAnimated = true;\n            this.animation = startAnimation(resolve);\n            if (this.events.animationStart) {\n                this.events.animationStart.notify();\n            }\n        }).then(() => {\n            if (this.events.animationComplete) {\n                this.events.animationComplete.notify();\n            }\n            this.clearAnimation();\n        });\n    }\n    /**\n     * Stop the currently active animation.\n     *\n     * @public\n     */\n    stop() {\n        if (this.animation) {\n            this.animation.stop();\n            if (this.events.animationCancel) {\n                this.events.animationCancel.notify();\n            }\n        }\n        this.clearAnimation();\n    }\n    /**\n     * Returns `true` if this value is currently animating.\n     *\n     * @public\n     */\n    isAnimating() {\n        return !!this.animation;\n    }\n    clearAnimation() {\n        delete this.animation;\n    }\n    /**\n     * Destroy and clean up subscribers to this `MotionValue`.\n     *\n     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\n     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\n     * created a `MotionValue` via the `motionValue` function.\n     *\n     * @public\n     */\n    destroy() {\n        this.clearListeners();\n        this.stop();\n        if (this.stopPassiveEffect) {\n            this.stopPassiveEffect();\n        }\n    }\n}\nfunction motionValue(init, options) {\n    return new MotionValue(init, options);\n}\n\nexport { MotionValue, collectMotionValues, motionValue };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}