{"ast":null,"code":"import _objectWithoutProperties from \"C:/Users/pvplo/OneDrive/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/editpallav-main/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectSpread from \"C:/Users/pvplo/OneDrive/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/editpallav-main/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"C:/Users/pvplo/OneDrive/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/editpallav-main/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/pvplo/OneDrive/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/editpallav-main/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar _excluded = [\"willChange\"],\n    _excluded2 = [\"children\"];\nimport { warning, invariant } from '../utils/errors.mjs';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { isRefObject } from '../utils/is-ref-object.mjs';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isWillChangeMotionValue } from '../value/use-will-change/is.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { transformProps } from './html/utils/transform.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { isVariantLabel } from './utils/is-variant-label.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { variantProps } from './utils/variant-props.mjs';\nimport { visualElementStore } from './store.mjs';\nimport { KeyframeResolver } from './utils/KeyframesResolver.mjs';\nimport { isNumericalString } from '../utils/is-numerical-string.mjs';\nimport { isZeroValueString } from '../utils/is-zero-value-string.mjs';\nimport { findValueType } from './dom/value-types/find.mjs';\nimport { complex } from '../value/types/complex/index.mjs';\nimport { getAnimatableNone } from './dom/value-types/animatable-none.mjs';\nimport { frame, cancelFrame } from '../frameloop/frame.mjs';\nvar featureNames = Object.keys(featureDefinitions);\nvar numFeatures = featureNames.length;\nvar propEventHandlers = [\"AnimationStart\", \"AnimationComplete\", \"Update\", \"BeforeLayoutMeasure\", \"LayoutMeasure\", \"LayoutAnimationStart\", \"LayoutAnimationComplete\"];\nvar numVariantProps = variantProps.length;\n\nfunction getClosestProjectingNode(visualElement) {\n  if (!visualElement) return undefined;\n  return visualElement.options.allowProjection !== false ? visualElement.projection : getClosestProjectingNode(visualElement.parent);\n}\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\n\n\nvar VisualElement = /*#__PURE__*/function () {\n  function VisualElement(_ref) {\n    var _this = this;\n\n    var parent = _ref.parent,\n        props = _ref.props,\n        presenceContext = _ref.presenceContext,\n        reducedMotionConfig = _ref.reducedMotionConfig,\n        blockInitialAnimation = _ref.blockInitialAnimation,\n        visualState = _ref.visualState;\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, VisualElement);\n\n    this.resolveKeyframes = function (keyframes, // We use an onComplete callback here rather than a Promise as a Promise\n    // resolution is a microtask and we want to retain the ability to force\n    // the resolution of keyframes synchronously.\n    onComplete, name, value) {\n      return new _this.KeyframeResolver(keyframes, onComplete, name, value, _this);\n    };\n    /**\n     * A reference to the current underlying Instance, e.g. a HTMLElement\n     * or Three.Mesh etc.\n     */\n\n\n    this.current = null;\n    /**\n     * A set containing references to this VisualElement's children.\n     */\n\n    this.children = new Set();\n    /**\n     * Determine what role this visual element should take in the variant tree.\n     */\n\n    this.isVariantNode = false;\n    this.isControllingVariants = false;\n    /**\n     * Decides whether this VisualElement should animate in reduced motion\n     * mode.\n     *\n     * TODO: This is currently set on every individual VisualElement but feels\n     * like it could be set globally.\n     */\n\n    this.shouldReduceMotion = null;\n    /**\n     * A map of all motion values attached to this visual element. Motion\n     * values are source of truth for any given animated value. A motion\n     * value might be provided externally by the component via props.\n     */\n\n    this.values = new Map();\n    this.KeyframeResolver = KeyframeResolver;\n    /**\n     * Cleanup functions for active features (hover/tap/exit etc)\n     */\n\n    this.features = {};\n    /**\n     * A map of every subscription that binds the provided or generated\n     * motion values onChange listeners to this visual element.\n     */\n\n    this.valueSubscriptions = new Map();\n    /**\n     * A reference to the previously-provided motion values as returned\n     * from scrapeMotionValuesFromProps. We use the keys in here to determine\n     * if any motion values need to be removed after props are updated.\n     */\n\n    this.prevMotionValues = {};\n    /**\n     * An object containing a SubscriptionManager for each active event.\n     */\n\n    this.events = {};\n    /**\n     * An object containing an unsubscribe function for each prop event subscription.\n     * For example, every \"Update\" event can have multiple subscribers via\n     * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n     */\n\n    this.propEventSubscriptions = {};\n\n    this.notifyUpdate = function () {\n      return _this.notify(\"Update\", _this.latestValues);\n    };\n\n    this.render = function () {\n      if (!_this.current) return;\n\n      _this.triggerBuild();\n\n      _this.renderInstance(_this.current, _this.renderState, _this.props.style, _this.projection);\n    };\n\n    this.scheduleRender = function () {\n      return frame.render(_this.render, false, true);\n    };\n\n    var latestValues = visualState.latestValues,\n        renderState = visualState.renderState;\n    this.latestValues = latestValues;\n    this.baseTarget = _objectSpread({}, latestValues);\n    this.initialValues = props.initial ? _objectSpread({}, latestValues) : {};\n    this.renderState = renderState;\n    this.parent = parent;\n    this.props = props;\n    this.presenceContext = presenceContext;\n    this.depth = parent ? parent.depth + 1 : 0;\n    this.reducedMotionConfig = reducedMotionConfig;\n    this.options = options;\n    this.blockInitialAnimation = Boolean(blockInitialAnimation);\n    this.isControllingVariants = isControllingVariants(props);\n    this.isVariantNode = isVariantNode(props);\n\n    if (this.isVariantNode) {\n      this.variantChildren = new Set();\n    }\n\n    this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n    /**\n     * Any motion values that are provided to the element when created\n     * aren't yet bound to the element, as this would technically be impure.\n     * However, we iterate through the motion values and set them to the\n     * initial values for this component.\n     *\n     * TODO: This is impure and we should look at changing this to run on mount.\n     * Doing so will break some tests but this isn't neccessarily a breaking change,\n     * more a reflection of the test.\n     */\n\n    var _this$scrapeMotionVal = this.scrapeMotionValuesFromProps(props, {}, this),\n        willChange = _this$scrapeMotionVal.willChange,\n        initialMotionValues = _objectWithoutProperties(_this$scrapeMotionVal, _excluded);\n\n    for (var key in initialMotionValues) {\n      var value = initialMotionValues[key];\n\n      if (latestValues[key] !== undefined && isMotionValue(value)) {\n        value.set(latestValues[key], false);\n\n        if (isWillChangeMotionValue(willChange)) {\n          willChange.add(key);\n        }\n      }\n    }\n  }\n\n  _createClass(VisualElement, [{\n    key: \"scrapeMotionValuesFromProps\",\n    value:\n    /**\n     * This method takes React props and returns found MotionValues. For example, HTML\n     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n     *\n     * This isn't an abstract method as it needs calling in the constructor, but it is\n     * intended to be one.\n     */\n    function scrapeMotionValuesFromProps(_props, _prevProps, _visualElement) {\n      return {};\n    }\n  }, {\n    key: \"mount\",\n    value: function mount(instance) {\n      var _this2 = this;\n\n      this.current = instance;\n      visualElementStore.set(instance, this);\n\n      if (this.projection && !this.projection.instance) {\n        this.projection.mount(instance);\n      }\n\n      if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n        this.removeFromVariantTree = this.parent.addVariantChild(this);\n      }\n\n      this.values.forEach(function (value, key) {\n        return _this2.bindToMotionValue(key, value);\n      });\n\n      if (!hasReducedMotionListener.current) {\n        initPrefersReducedMotion();\n      }\n\n      this.shouldReduceMotion = this.reducedMotionConfig === \"never\" ? false : this.reducedMotionConfig === \"always\" ? true : prefersReducedMotion.current;\n\n      if (process.env.NODE_ENV !== \"production\") {\n        warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n      }\n\n      if (this.parent) this.parent.children.add(this);\n      this.update(this.props, this.presenceContext);\n    }\n  }, {\n    key: \"unmount\",\n    value: function unmount() {\n      var _a;\n\n      visualElementStore.delete(this.current);\n      this.projection && this.projection.unmount();\n      cancelFrame(this.notifyUpdate);\n      cancelFrame(this.render);\n      this.valueSubscriptions.forEach(function (remove) {\n        return remove();\n      });\n      this.removeFromVariantTree && this.removeFromVariantTree();\n      this.parent && this.parent.children.delete(this);\n\n      for (var key in this.events) {\n        this.events[key].clear();\n      }\n\n      for (var _key in this.features) {\n        (_a = this.features[_key]) === null || _a === void 0 ? void 0 : _a.unmount();\n      }\n\n      this.current = null;\n    }\n  }, {\n    key: \"bindToMotionValue\",\n    value: function bindToMotionValue(key, value) {\n      var _this3 = this;\n\n      var valueIsTransform = transformProps.has(key);\n      var removeOnChange = value.on(\"change\", function (latestValue) {\n        _this3.latestValues[key] = latestValue;\n        _this3.props.onUpdate && frame.preRender(_this3.notifyUpdate);\n\n        if (valueIsTransform && _this3.projection) {\n          _this3.projection.isTransformDirty = true;\n        }\n      });\n      var removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n      this.valueSubscriptions.set(key, function () {\n        removeOnChange();\n        removeOnRenderRequest();\n        if (value.owner) value.stop();\n      });\n    }\n  }, {\n    key: \"sortNodePosition\",\n    value: function sortNodePosition(other) {\n      /**\n       * If these nodes aren't even of the same type we can't compare their depth.\n       */\n      if (!this.current || !this.sortInstanceNodePosition || this.type !== other.type) {\n        return 0;\n      }\n\n      return this.sortInstanceNodePosition(this.current, other.current);\n    }\n  }, {\n    key: \"loadFeatures\",\n    value: function loadFeatures(_ref2, isStrict, preloadedFeatures, initialLayoutGroupConfig) {\n      var _this4 = this;\n\n      var children = _ref2.children,\n          renderedProps = _objectWithoutProperties(_ref2, _excluded2);\n\n      var ProjectionNodeConstructor;\n      var MeasureLayout;\n      /**\n       * If we're in development mode, check to make sure we're not rendering a motion component\n       * as a child of LazyMotion, as this will break the file-size benefits of using it.\n       */\n\n      if (process.env.NODE_ENV !== \"production\" && preloadedFeatures && isStrict) {\n        var strictMessage = \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\";\n        renderedProps.ignoreStrict ? warning(false, strictMessage) : invariant(false, strictMessage);\n      }\n\n      for (var i = 0; i < numFeatures; i++) {\n        var name = featureNames[i];\n        var _featureDefinitions$n = featureDefinitions[name],\n            isEnabled = _featureDefinitions$n.isEnabled,\n            FeatureConstructor = _featureDefinitions$n.Feature,\n            ProjectionNode = _featureDefinitions$n.ProjectionNode,\n            MeasureLayoutComponent = _featureDefinitions$n.MeasureLayout;\n        if (ProjectionNode) ProjectionNodeConstructor = ProjectionNode;\n\n        if (isEnabled(renderedProps)) {\n          if (!this.features[name] && FeatureConstructor) {\n            this.features[name] = new FeatureConstructor(this);\n          }\n\n          if (MeasureLayoutComponent) {\n            MeasureLayout = MeasureLayoutComponent;\n          }\n        }\n      }\n\n      if ((this.type === \"html\" || this.type === \"svg\") && !this.projection && ProjectionNodeConstructor) {\n        var layoutId = renderedProps.layoutId,\n            layout = renderedProps.layout,\n            drag = renderedProps.drag,\n            dragConstraints = renderedProps.dragConstraints,\n            layoutScroll = renderedProps.layoutScroll,\n            layoutRoot = renderedProps.layoutRoot;\n        this.projection = new ProjectionNodeConstructor(this.latestValues, renderedProps[\"data-framer-portal-id\"] ? undefined : getClosestProjectingNode(this.parent));\n        this.projection.setOptions({\n          layoutId: layoutId,\n          layout: layout,\n          alwaysMeasureLayout: Boolean(drag) || dragConstraints && isRefObject(dragConstraints),\n          visualElement: this,\n          scheduleRender: function scheduleRender() {\n            return _this4.scheduleRender();\n          },\n\n          /**\n           * TODO: Update options in an effect. This could be tricky as it'll be too late\n           * to update by the time layout animations run.\n           * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n           * ensuring it gets called if there's no potential layout animations.\n           *\n           */\n          animationType: typeof layout === \"string\" ? layout : \"both\",\n          initialPromotionConfig: initialLayoutGroupConfig,\n          layoutScroll: layoutScroll,\n          layoutRoot: layoutRoot\n        });\n      }\n\n      return MeasureLayout;\n    }\n  }, {\n    key: \"updateFeatures\",\n    value: function updateFeatures() {\n      for (var key in this.features) {\n        var feature = this.features[key];\n\n        if (feature.isMounted) {\n          feature.update();\n        } else {\n          feature.mount();\n          feature.isMounted = true;\n        }\n      }\n    }\n  }, {\n    key: \"triggerBuild\",\n    value: function triggerBuild() {\n      this.build(this.renderState, this.latestValues, this.options, this.props);\n    }\n    /**\n     * Measure the current viewport box with or without transforms.\n     * Only measures axis-aligned boxes, rotate and skew must be manually\n     * removed with a re-render to work.\n     */\n\n  }, {\n    key: \"measureViewportBox\",\n    value: function measureViewportBox() {\n      return this.current ? this.measureInstanceViewportBox(this.current, this.props) : createBox();\n    }\n  }, {\n    key: \"getStaticValue\",\n    value: function getStaticValue(key) {\n      return this.latestValues[key];\n    }\n  }, {\n    key: \"setStaticValue\",\n    value: function setStaticValue(key, value) {\n      this.latestValues[key] = value;\n    }\n    /**\n     * Update the provided props. Ensure any newly-added motion values are\n     * added to our map, old ones removed, and listeners updated.\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(props, presenceContext) {\n      if (props.transformTemplate || this.props.transformTemplate) {\n        this.scheduleRender();\n      }\n\n      this.prevProps = this.props;\n      this.props = props;\n      this.prevPresenceContext = this.presenceContext;\n      this.presenceContext = presenceContext;\n      /**\n       * Update prop event handlers ie onAnimationStart, onAnimationComplete\n       */\n\n      for (var i = 0; i < propEventHandlers.length; i++) {\n        var key = propEventHandlers[i];\n\n        if (this.propEventSubscriptions[key]) {\n          this.propEventSubscriptions[key]();\n          delete this.propEventSubscriptions[key];\n        }\n\n        var listenerName = \"on\" + key;\n        var listener = props[listenerName];\n\n        if (listener) {\n          this.propEventSubscriptions[key] = this.on(key, listener);\n        }\n      }\n\n      this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps, this), this.prevMotionValues);\n\n      if (this.handleChildMotionValue) {\n        this.handleChildMotionValue();\n      }\n    }\n  }, {\n    key: \"getProps\",\n    value: function getProps() {\n      return this.props;\n    }\n    /**\n     * Returns the variant definition with a given name.\n     */\n\n  }, {\n    key: \"getVariant\",\n    value: function getVariant(name) {\n      return this.props.variants ? this.props.variants[name] : undefined;\n    }\n    /**\n     * Returns the defined default transition on this component.\n     */\n\n  }, {\n    key: \"getDefaultTransition\",\n    value: function getDefaultTransition() {\n      return this.props.transition;\n    }\n  }, {\n    key: \"getTransformPagePoint\",\n    value: function getTransformPagePoint() {\n      return this.props.transformPagePoint;\n    }\n  }, {\n    key: \"getClosestVariantNode\",\n    value: function getClosestVariantNode() {\n      return this.isVariantNode ? this : this.parent ? this.parent.getClosestVariantNode() : undefined;\n    }\n  }, {\n    key: \"getVariantContext\",\n    value: function getVariantContext() {\n      var startAtParent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (startAtParent) {\n        return this.parent ? this.parent.getVariantContext() : undefined;\n      }\n\n      if (!this.isControllingVariants) {\n        var _context = this.parent ? this.parent.getVariantContext() || {} : {};\n\n        if (this.props.initial !== undefined) {\n          _context.initial = this.props.initial;\n        }\n\n        return _context;\n      }\n\n      var context = {};\n\n      for (var i = 0; i < numVariantProps; i++) {\n        var name = variantProps[i];\n        var prop = this.props[name];\n\n        if (isVariantLabel(prop) || prop === false) {\n          context[name] = prop;\n        }\n      }\n\n      return context;\n    }\n    /**\n     * Add a child visual element to our set of children.\n     */\n\n  }, {\n    key: \"addVariantChild\",\n    value: function addVariantChild(child) {\n      var closestVariantNode = this.getClosestVariantNode();\n\n      if (closestVariantNode) {\n        closestVariantNode.variantChildren && closestVariantNode.variantChildren.add(child);\n        return function () {\n          return closestVariantNode.variantChildren.delete(child);\n        };\n      }\n    }\n    /**\n     * Add a motion value and bind it to this visual element.\n     */\n\n  }, {\n    key: \"addValue\",\n    value: function addValue(key, value) {\n      // Remove existing value if it exists\n      var existingValue = this.values.get(key);\n\n      if (value !== existingValue) {\n        if (existingValue) this.removeValue(key);\n        this.bindToMotionValue(key, value);\n        this.values.set(key, value);\n        this.latestValues[key] = value.get();\n      }\n    }\n    /**\n     * Remove a motion value and unbind any active subscriptions.\n     */\n\n  }, {\n    key: \"removeValue\",\n    value: function removeValue(key) {\n      this.values.delete(key);\n      var unsubscribe = this.valueSubscriptions.get(key);\n\n      if (unsubscribe) {\n        unsubscribe();\n        this.valueSubscriptions.delete(key);\n      }\n\n      delete this.latestValues[key];\n      this.removeValueFromRenderState(key, this.renderState);\n    }\n    /**\n     * Check whether we have a motion value for this key\n     */\n\n  }, {\n    key: \"hasValue\",\n    value: function hasValue(key) {\n      return this.values.has(key);\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue(key, defaultValue) {\n      if (this.props.values && this.props.values[key]) {\n        return this.props.values[key];\n      }\n\n      var value = this.values.get(key);\n\n      if (value === undefined && defaultValue !== undefined) {\n        value = motionValue(defaultValue === null ? undefined : defaultValue, {\n          owner: this\n        });\n        this.addValue(key, value);\n      }\n\n      return value;\n    }\n    /**\n     * If we're trying to animate to a previously unencountered value,\n     * we need to check for it in our state and as a last resort read it\n     * directly from the instance (which might have performance implications).\n     */\n\n  }, {\n    key: \"readValue\",\n    value: function readValue(key, target) {\n      var _a;\n\n      var value = this.latestValues[key] !== undefined || !this.current ? this.latestValues[key] : (_a = this.getBaseTargetFromProps(this.props, key)) !== null && _a !== void 0 ? _a : this.readValueFromInstance(this.current, key, this.options);\n\n      if (value !== undefined && value !== null) {\n        if (typeof value === \"string\" && (isNumericalString(value) || isZeroValueString(value))) {\n          // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n          value = parseFloat(value);\n        } else if (!findValueType(value) && complex.test(target)) {\n          value = getAnimatableNone(key, target);\n        }\n\n        this.setBaseTarget(key, isMotionValue(value) ? value.get() : value);\n      }\n\n      return isMotionValue(value) ? value.get() : value;\n    }\n    /**\n     * Set the base target to later animate back to. This is currently\n     * only hydrated on creation and when we first read a value.\n     */\n\n  }, {\n    key: \"setBaseTarget\",\n    value: function setBaseTarget(key, value) {\n      this.baseTarget[key] = value;\n    }\n    /**\n     * Find the base target for a value thats been removed from all animation\n     * props.\n     */\n\n  }, {\n    key: \"getBaseTarget\",\n    value: function getBaseTarget(key) {\n      var _a;\n\n      var initial = this.props.initial;\n      var valueFromInitial;\n\n      if (typeof initial === \"string\" || typeof initial === \"object\") {\n        var variant = resolveVariantFromProps(this.props, initial, (_a = this.presenceContext) === null || _a === void 0 ? void 0 : _a.custom);\n\n        if (variant) {\n          valueFromInitial = variant[key];\n        }\n      }\n      /**\n       * If this value still exists in the current initial variant, read that.\n       */\n\n\n      if (initial && valueFromInitial !== undefined) {\n        return valueFromInitial;\n      }\n      /**\n       * Alternatively, if this VisualElement config has defined a getBaseTarget\n       * so we can read the value from an alternative source, try that.\n       */\n\n\n      var target = this.getBaseTargetFromProps(this.props, key);\n      if (target !== undefined && !isMotionValue(target)) return target;\n      /**\n       * If the value was initially defined on initial, but it doesn't any more,\n       * return undefined. Otherwise return the value as initially read from the DOM.\n       */\n\n      return this.initialValues[key] !== undefined && valueFromInitial === undefined ? undefined : this.baseTarget[key];\n    }\n  }, {\n    key: \"on\",\n    value: function on(eventName, callback) {\n      if (!this.events[eventName]) {\n        this.events[eventName] = new SubscriptionManager();\n      }\n\n      return this.events[eventName].add(callback);\n    }\n  }, {\n    key: \"notify\",\n    value: function notify(eventName) {\n      if (this.events[eventName]) {\n        var _this$events$eventNam;\n\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key2 = 1; _key2 < _len; _key2++) {\n          args[_key2 - 1] = arguments[_key2];\n        }\n\n        (_this$events$eventNam = this.events[eventName]).notify.apply(_this$events$eventNam, args);\n      }\n    }\n  }]);\n\n  return VisualElement;\n}();\n\nexport { VisualElement };","map":{"version":3,"names":["warning","invariant","createBox","isRefObject","initPrefersReducedMotion","hasReducedMotionListener","prefersReducedMotion","SubscriptionManager","motionValue","isWillChangeMotionValue","isMotionValue","transformProps","isControllingVariants","isVariantNode","isVariantLabel","updateMotionValuesFromProps","resolveVariantFromProps","warnOnce","featureDefinitions","variantProps","visualElementStore","KeyframeResolver","isNumericalString","isZeroValueString","findValueType","complex","getAnimatableNone","frame","cancelFrame","featureNames","Object","keys","numFeatures","length","propEventHandlers","numVariantProps","getClosestProjectingNode","visualElement","undefined","options","allowProjection","projection","parent","VisualElement","props","presenceContext","reducedMotionConfig","blockInitialAnimation","visualState","resolveKeyframes","keyframes","onComplete","name","value","current","children","Set","shouldReduceMotion","values","Map","features","valueSubscriptions","prevMotionValues","events","propEventSubscriptions","notifyUpdate","notify","latestValues","render","triggerBuild","renderInstance","renderState","style","scheduleRender","baseTarget","initialValues","initial","depth","Boolean","variantChildren","manuallyAnimateOnMount","scrapeMotionValuesFromProps","willChange","initialMotionValues","key","set","add","_props","_prevProps","_visualElement","instance","mount","removeFromVariantTree","addVariantChild","forEach","bindToMotionValue","process","env","NODE_ENV","update","_a","delete","unmount","remove","clear","valueIsTransform","has","removeOnChange","on","latestValue","onUpdate","preRender","isTransformDirty","removeOnRenderRequest","owner","stop","other","sortInstanceNodePosition","type","isStrict","preloadedFeatures","initialLayoutGroupConfig","renderedProps","ProjectionNodeConstructor","MeasureLayout","strictMessage","ignoreStrict","i","isEnabled","FeatureConstructor","Feature","ProjectionNode","MeasureLayoutComponent","layoutId","layout","drag","dragConstraints","layoutScroll","layoutRoot","setOptions","alwaysMeasureLayout","animationType","initialPromotionConfig","feature","isMounted","build","measureInstanceViewportBox","transformTemplate","prevProps","prevPresenceContext","listenerName","listener","handleChildMotionValue","variants","transition","transformPagePoint","getClosestVariantNode","startAtParent","getVariantContext","context","prop","child","closestVariantNode","existingValue","get","removeValue","unsubscribe","removeValueFromRenderState","defaultValue","addValue","target","getBaseTargetFromProps","readValueFromInstance","parseFloat","test","setBaseTarget","valueFromInitial","variant","custom","eventName","callback","args"],"sources":["C:/Users/pvplo/OneDrive/Рабочий стол/editpallav-main/node_modules/framer-motion/dist/es/render/VisualElement.mjs"],"sourcesContent":["import { warning, invariant } from '../utils/errors.mjs';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { isRefObject } from '../utils/is-ref-object.mjs';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isWillChangeMotionValue } from '../value/use-will-change/is.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { transformProps } from './html/utils/transform.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { isVariantLabel } from './utils/is-variant-label.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { variantProps } from './utils/variant-props.mjs';\nimport { visualElementStore } from './store.mjs';\nimport { KeyframeResolver } from './utils/KeyframesResolver.mjs';\nimport { isNumericalString } from '../utils/is-numerical-string.mjs';\nimport { isZeroValueString } from '../utils/is-zero-value-string.mjs';\nimport { findValueType } from './dom/value-types/find.mjs';\nimport { complex } from '../value/types/complex/index.mjs';\nimport { getAnimatableNone } from './dom/value-types/animatable-none.mjs';\nimport { frame, cancelFrame } from '../frameloop/frame.mjs';\n\nconst featureNames = Object.keys(featureDefinitions);\nconst numFeatures = featureNames.length;\nconst propEventHandlers = [\n    \"AnimationStart\",\n    \"AnimationComplete\",\n    \"Update\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutMeasure\",\n    \"LayoutAnimationStart\",\n    \"LayoutAnimationComplete\",\n];\nconst numVariantProps = variantProps.length;\nfunction getClosestProjectingNode(visualElement) {\n    if (!visualElement)\n        return undefined;\n    return visualElement.options.allowProjection !== false\n        ? visualElement.projection\n        : getClosestProjectingNode(visualElement.parent);\n}\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\nclass VisualElement {\n    /**\n     * This method takes React props and returns found MotionValues. For example, HTML\n     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n     *\n     * This isn't an abstract method as it needs calling in the constructor, but it is\n     * intended to be one.\n     */\n    scrapeMotionValuesFromProps(_props, _prevProps, _visualElement) {\n        return {};\n    }\n    constructor({ parent, props, presenceContext, reducedMotionConfig, blockInitialAnimation, visualState, }, options = {}) {\n        this.resolveKeyframes = (keyframes, \n        // We use an onComplete callback here rather than a Promise as a Promise\n        // resolution is a microtask and we want to retain the ability to force\n        // the resolution of keyframes synchronously.\n        onComplete, name, value) => {\n            return new this.KeyframeResolver(keyframes, onComplete, name, value, this);\n        };\n        /**\n         * A reference to the current underlying Instance, e.g. a HTMLElement\n         * or Three.Mesh etc.\n         */\n        this.current = null;\n        /**\n         * A set containing references to this VisualElement's children.\n         */\n        this.children = new Set();\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */\n        this.isVariantNode = false;\n        this.isControllingVariants = false;\n        /**\n         * Decides whether this VisualElement should animate in reduced motion\n         * mode.\n         *\n         * TODO: This is currently set on every individual VisualElement but feels\n         * like it could be set globally.\n         */\n        this.shouldReduceMotion = null;\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */\n        this.values = new Map();\n        this.KeyframeResolver = KeyframeResolver;\n        /**\n         * Cleanup functions for active features (hover/tap/exit etc)\n         */\n        this.features = {};\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */\n        this.valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */\n        this.prevMotionValues = {};\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        /**\n         * An object containing an unsubscribe function for each prop event subscription.\n         * For example, every \"Update\" event can have multiple subscribers via\n         * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n         */\n        this.propEventSubscriptions = {};\n        this.notifyUpdate = () => this.notify(\"Update\", this.latestValues);\n        this.render = () => {\n            if (!this.current)\n                return;\n            this.triggerBuild();\n            this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n        };\n        this.scheduleRender = () => frame.render(this.render, false, true);\n        const { latestValues, renderState } = visualState;\n        this.latestValues = latestValues;\n        this.baseTarget = { ...latestValues };\n        this.initialValues = props.initial ? { ...latestValues } : {};\n        this.renderState = renderState;\n        this.parent = parent;\n        this.props = props;\n        this.presenceContext = presenceContext;\n        this.depth = parent ? parent.depth + 1 : 0;\n        this.reducedMotionConfig = reducedMotionConfig;\n        this.options = options;\n        this.blockInitialAnimation = Boolean(blockInitialAnimation);\n        this.isControllingVariants = isControllingVariants(props);\n        this.isVariantNode = isVariantNode(props);\n        if (this.isVariantNode) {\n            this.variantChildren = new Set();\n        }\n        this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't neccessarily a breaking change,\n         * more a reflection of the test.\n         */\n        const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {}, this);\n        for (const key in initialMotionValues) {\n            const value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key], false);\n                if (isWillChangeMotionValue(willChange)) {\n                    willChange.add(key);\n                }\n            }\n        }\n    }\n    mount(instance) {\n        this.current = instance;\n        visualElementStore.set(instance, this);\n        if (this.projection && !this.projection.instance) {\n            this.projection.mount(instance);\n        }\n        if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n            this.removeFromVariantTree = this.parent.addVariantChild(this);\n        }\n        this.values.forEach((value, key) => this.bindToMotionValue(key, value));\n        if (!hasReducedMotionListener.current) {\n            initPrefersReducedMotion();\n        }\n        this.shouldReduceMotion =\n            this.reducedMotionConfig === \"never\"\n                ? false\n                : this.reducedMotionConfig === \"always\"\n                    ? true\n                    : prefersReducedMotion.current;\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n        }\n        if (this.parent)\n            this.parent.children.add(this);\n        this.update(this.props, this.presenceContext);\n    }\n    unmount() {\n        var _a;\n        visualElementStore.delete(this.current);\n        this.projection && this.projection.unmount();\n        cancelFrame(this.notifyUpdate);\n        cancelFrame(this.render);\n        this.valueSubscriptions.forEach((remove) => remove());\n        this.removeFromVariantTree && this.removeFromVariantTree();\n        this.parent && this.parent.children.delete(this);\n        for (const key in this.events) {\n            this.events[key].clear();\n        }\n        for (const key in this.features) {\n            (_a = this.features[key]) === null || _a === void 0 ? void 0 : _a.unmount();\n        }\n        this.current = null;\n    }\n    bindToMotionValue(key, value) {\n        const valueIsTransform = transformProps.has(key);\n        const removeOnChange = value.on(\"change\", (latestValue) => {\n            this.latestValues[key] = latestValue;\n            this.props.onUpdate && frame.preRender(this.notifyUpdate);\n            if (valueIsTransform && this.projection) {\n                this.projection.isTransformDirty = true;\n            }\n        });\n        const removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n        this.valueSubscriptions.set(key, () => {\n            removeOnChange();\n            removeOnRenderRequest();\n            if (value.owner)\n                value.stop();\n        });\n    }\n    sortNodePosition(other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */\n        if (!this.current ||\n            !this.sortInstanceNodePosition ||\n            this.type !== other.type) {\n            return 0;\n        }\n        return this.sortInstanceNodePosition(this.current, other.current);\n    }\n    loadFeatures({ children, ...renderedProps }, isStrict, preloadedFeatures, initialLayoutGroupConfig) {\n        let ProjectionNodeConstructor;\n        let MeasureLayout;\n        /**\n         * If we're in development mode, check to make sure we're not rendering a motion component\n         * as a child of LazyMotion, as this will break the file-size benefits of using it.\n         */\n        if (process.env.NODE_ENV !== \"production\" &&\n            preloadedFeatures &&\n            isStrict) {\n            const strictMessage = \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\";\n            renderedProps.ignoreStrict\n                ? warning(false, strictMessage)\n                : invariant(false, strictMessage);\n        }\n        for (let i = 0; i < numFeatures; i++) {\n            const name = featureNames[i];\n            const { isEnabled, Feature: FeatureConstructor, ProjectionNode, MeasureLayout: MeasureLayoutComponent, } = featureDefinitions[name];\n            if (ProjectionNode)\n                ProjectionNodeConstructor = ProjectionNode;\n            if (isEnabled(renderedProps)) {\n                if (!this.features[name] && FeatureConstructor) {\n                    this.features[name] = new FeatureConstructor(this);\n                }\n                if (MeasureLayoutComponent) {\n                    MeasureLayout = MeasureLayoutComponent;\n                }\n            }\n        }\n        if ((this.type === \"html\" || this.type === \"svg\") &&\n            !this.projection &&\n            ProjectionNodeConstructor) {\n            const { layoutId, layout, drag, dragConstraints, layoutScroll, layoutRoot, } = renderedProps;\n            this.projection = new ProjectionNodeConstructor(this.latestValues, renderedProps[\"data-framer-portal-id\"]\n                ? undefined\n                : getClosestProjectingNode(this.parent));\n            this.projection.setOptions({\n                layoutId,\n                layout,\n                alwaysMeasureLayout: Boolean(drag) ||\n                    (dragConstraints && isRefObject(dragConstraints)),\n                visualElement: this,\n                scheduleRender: () => this.scheduleRender(),\n                /**\n                 * TODO: Update options in an effect. This could be tricky as it'll be too late\n                 * to update by the time layout animations run.\n                 * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n                 * ensuring it gets called if there's no potential layout animations.\n                 *\n                 */\n                animationType: typeof layout === \"string\" ? layout : \"both\",\n                initialPromotionConfig: initialLayoutGroupConfig,\n                layoutScroll,\n                layoutRoot,\n            });\n        }\n        return MeasureLayout;\n    }\n    updateFeatures() {\n        for (const key in this.features) {\n            const feature = this.features[key];\n            if (feature.isMounted) {\n                feature.update();\n            }\n            else {\n                feature.mount();\n                feature.isMounted = true;\n            }\n        }\n    }\n    triggerBuild() {\n        this.build(this.renderState, this.latestValues, this.options, this.props);\n    }\n    /**\n     * Measure the current viewport box with or without transforms.\n     * Only measures axis-aligned boxes, rotate and skew must be manually\n     * removed with a re-render to work.\n     */\n    measureViewportBox() {\n        return this.current\n            ? this.measureInstanceViewportBox(this.current, this.props)\n            : createBox();\n    }\n    getStaticValue(key) {\n        return this.latestValues[key];\n    }\n    setStaticValue(key, value) {\n        this.latestValues[key] = value;\n    }\n    /**\n     * Update the provided props. Ensure any newly-added motion values are\n     * added to our map, old ones removed, and listeners updated.\n     */\n    update(props, presenceContext) {\n        if (props.transformTemplate || this.props.transformTemplate) {\n            this.scheduleRender();\n        }\n        this.prevProps = this.props;\n        this.props = props;\n        this.prevPresenceContext = this.presenceContext;\n        this.presenceContext = presenceContext;\n        /**\n         * Update prop event handlers ie onAnimationStart, onAnimationComplete\n         */\n        for (let i = 0; i < propEventHandlers.length; i++) {\n            const key = propEventHandlers[i];\n            if (this.propEventSubscriptions[key]) {\n                this.propEventSubscriptions[key]();\n                delete this.propEventSubscriptions[key];\n            }\n            const listenerName = (\"on\" + key);\n            const listener = props[listenerName];\n            if (listener) {\n                this.propEventSubscriptions[key] = this.on(key, listener);\n            }\n        }\n        this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps, this), this.prevMotionValues);\n        if (this.handleChildMotionValue) {\n            this.handleChildMotionValue();\n        }\n    }\n    getProps() {\n        return this.props;\n    }\n    /**\n     * Returns the variant definition with a given name.\n     */\n    getVariant(name) {\n        return this.props.variants ? this.props.variants[name] : undefined;\n    }\n    /**\n     * Returns the defined default transition on this component.\n     */\n    getDefaultTransition() {\n        return this.props.transition;\n    }\n    getTransformPagePoint() {\n        return this.props.transformPagePoint;\n    }\n    getClosestVariantNode() {\n        return this.isVariantNode\n            ? this\n            : this.parent\n                ? this.parent.getClosestVariantNode()\n                : undefined;\n    }\n    getVariantContext(startAtParent = false) {\n        if (startAtParent) {\n            return this.parent ? this.parent.getVariantContext() : undefined;\n        }\n        if (!this.isControllingVariants) {\n            const context = this.parent\n                ? this.parent.getVariantContext() || {}\n                : {};\n            if (this.props.initial !== undefined) {\n                context.initial = this.props.initial;\n            }\n            return context;\n        }\n        const context = {};\n        for (let i = 0; i < numVariantProps; i++) {\n            const name = variantProps[i];\n            const prop = this.props[name];\n            if (isVariantLabel(prop) || prop === false) {\n                context[name] = prop;\n            }\n        }\n        return context;\n    }\n    /**\n     * Add a child visual element to our set of children.\n     */\n    addVariantChild(child) {\n        const closestVariantNode = this.getClosestVariantNode();\n        if (closestVariantNode) {\n            closestVariantNode.variantChildren &&\n                closestVariantNode.variantChildren.add(child);\n            return () => closestVariantNode.variantChildren.delete(child);\n        }\n    }\n    /**\n     * Add a motion value and bind it to this visual element.\n     */\n    addValue(key, value) {\n        // Remove existing value if it exists\n        const existingValue = this.values.get(key);\n        if (value !== existingValue) {\n            if (existingValue)\n                this.removeValue(key);\n            this.bindToMotionValue(key, value);\n            this.values.set(key, value);\n            this.latestValues[key] = value.get();\n        }\n    }\n    /**\n     * Remove a motion value and unbind any active subscriptions.\n     */\n    removeValue(key) {\n        this.values.delete(key);\n        const unsubscribe = this.valueSubscriptions.get(key);\n        if (unsubscribe) {\n            unsubscribe();\n            this.valueSubscriptions.delete(key);\n        }\n        delete this.latestValues[key];\n        this.removeValueFromRenderState(key, this.renderState);\n    }\n    /**\n     * Check whether we have a motion value for this key\n     */\n    hasValue(key) {\n        return this.values.has(key);\n    }\n    getValue(key, defaultValue) {\n        if (this.props.values && this.props.values[key]) {\n            return this.props.values[key];\n        }\n        let value = this.values.get(key);\n        if (value === undefined && defaultValue !== undefined) {\n            value = motionValue(defaultValue === null ? undefined : defaultValue, { owner: this });\n            this.addValue(key, value);\n        }\n        return value;\n    }\n    /**\n     * If we're trying to animate to a previously unencountered value,\n     * we need to check for it in our state and as a last resort read it\n     * directly from the instance (which might have performance implications).\n     */\n    readValue(key, target) {\n        var _a;\n        let value = this.latestValues[key] !== undefined || !this.current\n            ? this.latestValues[key]\n            : (_a = this.getBaseTargetFromProps(this.props, key)) !== null && _a !== void 0 ? _a : this.readValueFromInstance(this.current, key, this.options);\n        if (value !== undefined && value !== null) {\n            if (typeof value === \"string\" &&\n                (isNumericalString(value) || isZeroValueString(value))) {\n                // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n                value = parseFloat(value);\n            }\n            else if (!findValueType(value) && complex.test(target)) {\n                value = getAnimatableNone(key, target);\n            }\n            this.setBaseTarget(key, isMotionValue(value) ? value.get() : value);\n        }\n        return isMotionValue(value) ? value.get() : value;\n    }\n    /**\n     * Set the base target to later animate back to. This is currently\n     * only hydrated on creation and when we first read a value.\n     */\n    setBaseTarget(key, value) {\n        this.baseTarget[key] = value;\n    }\n    /**\n     * Find the base target for a value thats been removed from all animation\n     * props.\n     */\n    getBaseTarget(key) {\n        var _a;\n        const { initial } = this.props;\n        let valueFromInitial;\n        if (typeof initial === \"string\" || typeof initial === \"object\") {\n            const variant = resolveVariantFromProps(this.props, initial, (_a = this.presenceContext) === null || _a === void 0 ? void 0 : _a.custom);\n            if (variant) {\n                valueFromInitial = variant[key];\n            }\n        }\n        /**\n         * If this value still exists in the current initial variant, read that.\n         */\n        if (initial && valueFromInitial !== undefined) {\n            return valueFromInitial;\n        }\n        /**\n         * Alternatively, if this VisualElement config has defined a getBaseTarget\n         * so we can read the value from an alternative source, try that.\n         */\n        const target = this.getBaseTargetFromProps(this.props, key);\n        if (target !== undefined && !isMotionValue(target))\n            return target;\n        /**\n         * If the value was initially defined on initial, but it doesn't any more,\n         * return undefined. Otherwise return the value as initially read from the DOM.\n         */\n        return this.initialValues[key] !== undefined &&\n            valueFromInitial === undefined\n            ? undefined\n            : this.baseTarget[key];\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        return this.events[eventName].add(callback);\n    }\n    notify(eventName, ...args) {\n        if (this.events[eventName]) {\n            this.events[eventName].notify(...args);\n        }\n    }\n}\n\nexport { VisualElement };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}