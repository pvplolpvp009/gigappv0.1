{"ast":null,"code":"import _toConsumableArray from \"C:/Users/pvplo/OneDrive/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/editpallav-main/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { invariant } from './errors.mjs';\nimport { clamp } from './clamp.mjs';\nimport { pipe } from './pipe.mjs';\nimport { progress } from './progress.mjs';\nimport { noop } from './noop.mjs';\nimport { mix } from './mix/index.mjs';\n\nfunction createMixers(output, ease, customMixer) {\n  var mixers = [];\n  var mixerFactory = customMixer || mix;\n  var numMixers = output.length - 1;\n\n  for (var i = 0; i < numMixers; i++) {\n    var mixer = mixerFactory(output[i], output[i + 1]);\n\n    if (ease) {\n      var easingFunction = Array.isArray(ease) ? ease[i] || noop : ease;\n      mixer = pipe(easingFunction, mixer);\n    }\n\n    mixers.push(mixer);\n  }\n\n  return mixers;\n}\n/**\n * Create a function that maps from a numerical input array to a generic output array.\n *\n * Accepts:\n *   - Numbers\n *   - Colors (hex, hsl, hsla, rgb, rgba)\n *   - Complex (combinations of one or more numbers or strings)\n *\n * ```jsx\n * const mixColor = interpolate([0, 1], ['#fff', '#000'])\n *\n * mixColor(0.5) // 'rgba(128, 128, 128, 1)'\n * ```\n *\n * TODO Revist this approach once we've moved to data models for values,\n * probably not needed to pregenerate mixer functions.\n *\n * @public\n */\n\n\nfunction interpolate(input, output) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref$clamp = _ref.clamp,\n      isClamp = _ref$clamp === void 0 ? true : _ref$clamp,\n      ease = _ref.ease,\n      mixer = _ref.mixer;\n\n  var inputLength = input.length;\n  invariant(inputLength === output.length, \"Both input and output ranges must be the same length\");\n  /**\n   * If we're only provided a single input, we can just make a function\n   * that returns the output.\n   */\n\n  if (inputLength === 1) return function () {\n    return output[0];\n  };\n  if (inputLength === 2 && input[0] === input[1]) return function () {\n    return output[1];\n  }; // If input runs highest -> lowest, reverse both arrays\n\n  if (input[0] > input[inputLength - 1]) {\n    input = _toConsumableArray(input).reverse();\n    output = _toConsumableArray(output).reverse();\n  }\n\n  var mixers = createMixers(output, ease, mixer);\n  var numMixers = mixers.length;\n\n  var interpolator = function interpolator(v) {\n    var i = 0;\n\n    if (numMixers > 1) {\n      for (; i < input.length - 2; i++) {\n        if (v < input[i + 1]) break;\n      }\n    }\n\n    var progressInRange = progress(input[i], input[i + 1], v);\n    return mixers[i](progressInRange);\n  };\n\n  return isClamp ? function (v) {\n    return interpolator(clamp(input[0], input[inputLength - 1], v));\n  } : interpolator;\n}\n\nexport { interpolate };","map":{"version":3,"names":["invariant","clamp","pipe","progress","noop","mix","createMixers","output","ease","customMixer","mixers","mixerFactory","numMixers","length","i","mixer","easingFunction","Array","isArray","push","interpolate","input","isClamp","inputLength","reverse","interpolator","v","progressInRange"],"sources":["C:/Users/pvplo/OneDrive/Рабочий стол/editpallav-main/node_modules/framer-motion/dist/es/utils/interpolate.mjs"],"sourcesContent":["import { invariant } from './errors.mjs';\nimport { clamp } from './clamp.mjs';\nimport { pipe } from './pipe.mjs';\nimport { progress } from './progress.mjs';\nimport { noop } from './noop.mjs';\nimport { mix } from './mix/index.mjs';\n\nfunction createMixers(output, ease, customMixer) {\n    const mixers = [];\n    const mixerFactory = customMixer || mix;\n    const numMixers = output.length - 1;\n    for (let i = 0; i < numMixers; i++) {\n        let mixer = mixerFactory(output[i], output[i + 1]);\n        if (ease) {\n            const easingFunction = Array.isArray(ease) ? ease[i] || noop : ease;\n            mixer = pipe(easingFunction, mixer);\n        }\n        mixers.push(mixer);\n    }\n    return mixers;\n}\n/**\n * Create a function that maps from a numerical input array to a generic output array.\n *\n * Accepts:\n *   - Numbers\n *   - Colors (hex, hsl, hsla, rgb, rgba)\n *   - Complex (combinations of one or more numbers or strings)\n *\n * ```jsx\n * const mixColor = interpolate([0, 1], ['#fff', '#000'])\n *\n * mixColor(0.5) // 'rgba(128, 128, 128, 1)'\n * ```\n *\n * TODO Revist this approach once we've moved to data models for values,\n * probably not needed to pregenerate mixer functions.\n *\n * @public\n */\nfunction interpolate(input, output, { clamp: isClamp = true, ease, mixer } = {}) {\n    const inputLength = input.length;\n    invariant(inputLength === output.length, \"Both input and output ranges must be the same length\");\n    /**\n     * If we're only provided a single input, we can just make a function\n     * that returns the output.\n     */\n    if (inputLength === 1)\n        return () => output[0];\n    if (inputLength === 2 && input[0] === input[1])\n        return () => output[1];\n    // If input runs highest -> lowest, reverse both arrays\n    if (input[0] > input[inputLength - 1]) {\n        input = [...input].reverse();\n        output = [...output].reverse();\n    }\n    const mixers = createMixers(output, ease, mixer);\n    const numMixers = mixers.length;\n    const interpolator = (v) => {\n        let i = 0;\n        if (numMixers > 1) {\n            for (; i < input.length - 2; i++) {\n                if (v < input[i + 1])\n                    break;\n            }\n        }\n        const progressInRange = progress(input[i], input[i + 1], v);\n        return mixers[i](progressInRange);\n    };\n    return isClamp\n        ? (v) => interpolator(clamp(input[0], input[inputLength - 1], v))\n        : interpolator;\n}\n\nexport { interpolate };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}