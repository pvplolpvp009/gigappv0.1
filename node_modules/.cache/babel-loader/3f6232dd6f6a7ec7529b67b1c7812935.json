{"ast":null,"code":"function buildProjectionTransform(delta, treeScale, latestTransform) {\n  var transform = \"\";\n  /**\n   * The translations we use to calculate are always relative to the viewport coordinate space.\n   * But when we apply scales, we also scale the coordinate space of an element and its children.\n   * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n   * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n   */\n\n  var xTranslate = delta.x.translate / treeScale.x;\n  var yTranslate = delta.y.translate / treeScale.y;\n  var zTranslate = (latestTransform === null || latestTransform === void 0 ? void 0 : latestTransform.z) || 0;\n\n  if (xTranslate || yTranslate || zTranslate) {\n    transform = \"translate3d(\".concat(xTranslate, \"px, \").concat(yTranslate, \"px, \").concat(zTranslate, \"px) \");\n  }\n  /**\n   * Apply scale correction for the tree transform.\n   * This will apply scale to the screen-orientated axes.\n   */\n\n\n  if (treeScale.x !== 1 || treeScale.y !== 1) {\n    transform += \"scale(\".concat(1 / treeScale.x, \", \").concat(1 / treeScale.y, \") \");\n  }\n\n  if (latestTransform) {\n    var transformPerspective = latestTransform.transformPerspective,\n        rotate = latestTransform.rotate,\n        rotateX = latestTransform.rotateX,\n        rotateY = latestTransform.rotateY,\n        skewX = latestTransform.skewX,\n        skewY = latestTransform.skewY;\n    if (transformPerspective) transform = \"perspective(\".concat(transformPerspective, \"px) \").concat(transform);\n    if (rotate) transform += \"rotate(\".concat(rotate, \"deg) \");\n    if (rotateX) transform += \"rotateX(\".concat(rotateX, \"deg) \");\n    if (rotateY) transform += \"rotateY(\".concat(rotateY, \"deg) \");\n    if (skewX) transform += \"skewX(\".concat(skewX, \"deg) \");\n    if (skewY) transform += \"skewY(\".concat(skewY, \"deg) \");\n  }\n  /**\n   * Apply scale to match the size of the element to the size we want it.\n   * This will apply scale to the element-orientated axes.\n   */\n\n\n  var elementScaleX = delta.x.scale * treeScale.x;\n  var elementScaleY = delta.y.scale * treeScale.y;\n\n  if (elementScaleX !== 1 || elementScaleY !== 1) {\n    transform += \"scale(\".concat(elementScaleX, \", \").concat(elementScaleY, \")\");\n  }\n\n  return transform || \"none\";\n}\n\nexport { buildProjectionTransform };","map":{"version":3,"names":["buildProjectionTransform","delta","treeScale","latestTransform","transform","xTranslate","x","translate","yTranslate","y","zTranslate","z","transformPerspective","rotate","rotateX","rotateY","skewX","skewY","elementScaleX","scale","elementScaleY"],"sources":["C:/Users/pvplo/OneDrive/Рабочий стол/editpallav-main/node_modules/framer-motion/dist/es/projection/styles/transform.mjs"],"sourcesContent":["function buildProjectionTransform(delta, treeScale, latestTransform) {\n    let transform = \"\";\n    /**\n     * The translations we use to calculate are always relative to the viewport coordinate space.\n     * But when we apply scales, we also scale the coordinate space of an element and its children.\n     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n     */\n    const xTranslate = delta.x.translate / treeScale.x;\n    const yTranslate = delta.y.translate / treeScale.y;\n    const zTranslate = (latestTransform === null || latestTransform === void 0 ? void 0 : latestTransform.z) || 0;\n    if (xTranslate || yTranslate || zTranslate) {\n        transform = `translate3d(${xTranslate}px, ${yTranslate}px, ${zTranslate}px) `;\n    }\n    /**\n     * Apply scale correction for the tree transform.\n     * This will apply scale to the screen-orientated axes.\n     */\n    if (treeScale.x !== 1 || treeScale.y !== 1) {\n        transform += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;\n    }\n    if (latestTransform) {\n        const { transformPerspective, rotate, rotateX, rotateY, skewX, skewY } = latestTransform;\n        if (transformPerspective)\n            transform = `perspective(${transformPerspective}px) ${transform}`;\n        if (rotate)\n            transform += `rotate(${rotate}deg) `;\n        if (rotateX)\n            transform += `rotateX(${rotateX}deg) `;\n        if (rotateY)\n            transform += `rotateY(${rotateY}deg) `;\n        if (skewX)\n            transform += `skewX(${skewX}deg) `;\n        if (skewY)\n            transform += `skewY(${skewY}deg) `;\n    }\n    /**\n     * Apply scale to match the size of the element to the size we want it.\n     * This will apply scale to the element-orientated axes.\n     */\n    const elementScaleX = delta.x.scale * treeScale.x;\n    const elementScaleY = delta.y.scale * treeScale.y;\n    if (elementScaleX !== 1 || elementScaleY !== 1) {\n        transform += `scale(${elementScaleX}, ${elementScaleY})`;\n    }\n    return transform || \"none\";\n}\n\nexport { buildProjectionTransform };\n"],"mappings":"AAAA,SAASA,wBAAT,CAAkCC,KAAlC,EAAyCC,SAAzC,EAAoDC,eAApD,EAAqE;EACjE,IAAIC,SAAS,GAAG,EAAhB;EACA;AACJ;AACA;AACA;AACA;AACA;;EACI,IAAMC,UAAU,GAAGJ,KAAK,CAACK,CAAN,CAAQC,SAAR,GAAoBL,SAAS,CAACI,CAAjD;EACA,IAAME,UAAU,GAAGP,KAAK,CAACQ,CAAN,CAAQF,SAAR,GAAoBL,SAAS,CAACO,CAAjD;EACA,IAAMC,UAAU,GAAG,CAACP,eAAe,KAAK,IAApB,IAA4BA,eAAe,KAAK,KAAK,CAArD,GAAyD,KAAK,CAA9D,GAAkEA,eAAe,CAACQ,CAAnF,KAAyF,CAA5G;;EACA,IAAIN,UAAU,IAAIG,UAAd,IAA4BE,UAAhC,EAA4C;IACxCN,SAAS,yBAAkBC,UAAlB,iBAAmCG,UAAnC,iBAAoDE,UAApD,SAAT;EACH;EACD;AACJ;AACA;AACA;;;EACI,IAAIR,SAAS,CAACI,CAAV,KAAgB,CAAhB,IAAqBJ,SAAS,CAACO,CAAV,KAAgB,CAAzC,EAA4C;IACxCL,SAAS,oBAAa,IAAIF,SAAS,CAACI,CAA3B,eAAiC,IAAIJ,SAAS,CAACO,CAA/C,OAAT;EACH;;EACD,IAAIN,eAAJ,EAAqB;IACjB,IAAQS,oBAAR,GAAyET,eAAzE,CAAQS,oBAAR;IAAA,IAA8BC,MAA9B,GAAyEV,eAAzE,CAA8BU,MAA9B;IAAA,IAAsCC,OAAtC,GAAyEX,eAAzE,CAAsCW,OAAtC;IAAA,IAA+CC,OAA/C,GAAyEZ,eAAzE,CAA+CY,OAA/C;IAAA,IAAwDC,KAAxD,GAAyEb,eAAzE,CAAwDa,KAAxD;IAAA,IAA+DC,KAA/D,GAAyEd,eAAzE,CAA+Dc,KAA/D;IACA,IAAIL,oBAAJ,EACIR,SAAS,yBAAkBQ,oBAAlB,iBAA6CR,SAA7C,CAAT;IACJ,IAAIS,MAAJ,EACIT,SAAS,qBAAcS,MAAd,UAAT;IACJ,IAAIC,OAAJ,EACIV,SAAS,sBAAeU,OAAf,UAAT;IACJ,IAAIC,OAAJ,EACIX,SAAS,sBAAeW,OAAf,UAAT;IACJ,IAAIC,KAAJ,EACIZ,SAAS,oBAAaY,KAAb,UAAT;IACJ,IAAIC,KAAJ,EACIb,SAAS,oBAAaa,KAAb,UAAT;EACP;EACD;AACJ;AACA;AACA;;;EACI,IAAMC,aAAa,GAAGjB,KAAK,CAACK,CAAN,CAAQa,KAAR,GAAgBjB,SAAS,CAACI,CAAhD;EACA,IAAMc,aAAa,GAAGnB,KAAK,CAACQ,CAAN,CAAQU,KAAR,GAAgBjB,SAAS,CAACO,CAAhD;;EACA,IAAIS,aAAa,KAAK,CAAlB,IAAuBE,aAAa,KAAK,CAA7C,EAAgD;IAC5ChB,SAAS,oBAAac,aAAb,eAA+BE,aAA/B,MAAT;EACH;;EACD,OAAOhB,SAAS,IAAI,MAApB;AACH;;AAED,SAASJ,wBAAT"},"metadata":{},"sourceType":"module"}