{"ast":null,"code":"import _toConsumableArray from \"C:/Users/pvplo/OneDrive/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/editpallav-main/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _toArray from \"C:/Users/pvplo/OneDrive/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/editpallav-main/node_modules/@babel/runtime/helpers/esm/toArray.js\";\nimport platform from \"../platform/index.js\";\nimport utils from \"../utils.js\";\nimport isURLSameOrigin from \"./isURLSameOrigin.js\";\nimport cookies from \"./cookies.js\";\nimport buildFullPath from \"../core/buildFullPath.js\";\nimport mergeConfig from \"../core/mergeConfig.js\";\nimport AxiosHeaders from \"../core/AxiosHeaders.js\";\nimport buildURL from \"./buildURL.js\";\nexport default (function (config) {\n  var newConfig = mergeConfig({}, config);\n  var data = newConfig.data,\n      withXSRFToken = newConfig.withXSRFToken,\n      xsrfHeaderName = newConfig.xsrfHeaderName,\n      xsrfCookieName = newConfig.xsrfCookieName,\n      headers = newConfig.headers,\n      auth = newConfig.auth;\n  newConfig.headers = headers = AxiosHeaders.from(headers);\n  newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url), config.params, config.paramsSerializer); // HTTP basic authentication\n\n  if (auth) {\n    headers.set('Authorization', 'Basic ' + btoa((auth.username || '') + ':' + (auth.password ? unescape(encodeURIComponent(auth.password)) : '')));\n  }\n\n  var contentType;\n\n  if (utils.isFormData(data)) {\n    if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {\n      headers.setContentType(undefined); // Let the browser set it\n    } else if ((contentType = headers.getContentType()) !== false) {\n      // fix semicolon duplication issue for ReactNative FormData implementation\n      var _ref = contentType ? contentType.split(';').map(function (token) {\n        return token.trim();\n      }).filter(Boolean) : [],\n          _ref2 = _toArray(_ref),\n          type = _ref2[0],\n          tokens = _ref2.slice(1);\n\n      headers.setContentType([type || 'multipart/form-data'].concat(_toConsumableArray(tokens)).join('; '));\n    }\n  } // Add xsrf header\n  // This is only done if running in a standard browser environment.\n  // Specifically not if we're in a web worker, or react-native.\n\n\n  if (platform.hasStandardBrowserEnv) {\n    withXSRFToken && utils.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));\n\n    if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin(newConfig.url)) {\n      // Add xsrf header\n      var xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);\n\n      if (xsrfValue) {\n        headers.set(xsrfHeaderName, xsrfValue);\n      }\n    }\n  }\n\n  return newConfig;\n});","map":{"version":3,"names":["platform","utils","isURLSameOrigin","cookies","buildFullPath","mergeConfig","AxiosHeaders","buildURL","config","newConfig","data","withXSRFToken","xsrfHeaderName","xsrfCookieName","headers","auth","from","url","baseURL","params","paramsSerializer","set","btoa","username","password","unescape","encodeURIComponent","contentType","isFormData","hasStandardBrowserEnv","hasStandardBrowserWebWorkerEnv","setContentType","undefined","getContentType","split","map","token","trim","filter","Boolean","type","tokens","join","isFunction","xsrfValue","read"],"sources":["C:/Users/pvplo/OneDrive/Рабочий стол/editpallav-main/node_modules/axios/lib/helpers/resolveConfig.js"],"sourcesContent":["import platform from \"../platform/index.js\";\nimport utils from \"../utils.js\";\nimport isURLSameOrigin from \"./isURLSameOrigin.js\";\nimport cookies from \"./cookies.js\";\nimport buildFullPath from \"../core/buildFullPath.js\";\nimport mergeConfig from \"../core/mergeConfig.js\";\nimport AxiosHeaders from \"../core/AxiosHeaders.js\";\nimport buildURL from \"./buildURL.js\";\n\nexport default (config) => {\n  const newConfig = mergeConfig({}, config);\n\n  let {data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth} = newConfig;\n\n  newConfig.headers = headers = AxiosHeaders.from(headers);\n\n  newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url), config.params, config.paramsSerializer);\n\n  // HTTP basic authentication\n  if (auth) {\n    headers.set('Authorization', 'Basic ' +\n      btoa((auth.username || '') + ':' + (auth.password ? unescape(encodeURIComponent(auth.password)) : ''))\n    );\n  }\n\n  let contentType;\n\n  if (utils.isFormData(data)) {\n    if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {\n      headers.setContentType(undefined); // Let the browser set it\n    } else if ((contentType = headers.getContentType()) !== false) {\n      // fix semicolon duplication issue for ReactNative FormData implementation\n      const [type, ...tokens] = contentType ? contentType.split(';').map(token => token.trim()).filter(Boolean) : [];\n      headers.setContentType([type || 'multipart/form-data', ...tokens].join('; '));\n    }\n  }\n\n  // Add xsrf header\n  // This is only done if running in a standard browser environment.\n  // Specifically not if we're in a web worker, or react-native.\n\n  if (platform.hasStandardBrowserEnv) {\n    withXSRFToken && utils.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));\n\n    if (withXSRFToken || (withXSRFToken !== false && isURLSameOrigin(newConfig.url))) {\n      // Add xsrf header\n      const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);\n\n      if (xsrfValue) {\n        headers.set(xsrfHeaderName, xsrfValue);\n      }\n    }\n  }\n\n  return newConfig;\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}