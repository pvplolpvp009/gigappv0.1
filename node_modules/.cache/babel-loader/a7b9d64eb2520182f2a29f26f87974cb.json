{"ast":null,"code":"import _objectSpread from \"C:/Users/pvplo/OneDrive/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/editpallav-main/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"C:/Users/pvplo/OneDrive/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/editpallav-main/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"C:/Users/pvplo/OneDrive/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/editpallav-main/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/pvplo/OneDrive/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/editpallav-main/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength, isNear } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEqualsRounded, isDeltaZero, aspectRatio, boxEquals } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\nimport { delay } from '../../utils/delay.mjs';\nimport { mixNumber } from '../../utils/mix/number.mjs';\nimport { record } from '../../debug/record.mjs';\nimport { isSVGElement } from '../../render/dom/utils/is-svg-element.mjs';\nimport { animateSingleValue } from '../../animation/interfaces/single-value.mjs';\nimport { clamp } from '../../utils/clamp.mjs';\nimport { cancelFrame, frameData, steps, frame } from '../../frameloop/frame.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { time } from '../../frameloop/sync-time.mjs';\nimport { microtask } from '../../frameloop/microtask.mjs';\nimport { getOptimisedAppearId } from '../../animation/optimized-appear/get-appear-id.mjs';\nvar transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\nvar hiddenVisibility = {\n  visibility: \"hidden\"\n};\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\n\nvar animationTarget = 1000;\nvar id = 0;\n/**\n * Use a mutable data object for debug data so as to not create a new\n * object every frame.\n */\n\nvar projectionFrameData = {\n  type: \"projectionFrame\",\n  totalNodes: 0,\n  resolvedTargetDeltas: 0,\n  recalculatedProjection: 0\n};\n\nfunction resetDistortingTransform(key, visualElement, values, sharedAnimationValues) {\n  var latestValues = visualElement.latestValues; // Record the distorting transform and then temporarily set it to 0\n\n  if (latestValues[key]) {\n    values[key] = latestValues[key];\n    visualElement.setStaticValue(key, 0);\n\n    if (sharedAnimationValues) {\n      sharedAnimationValues[key] = 0;\n    }\n  }\n}\n\nfunction isOptimisedAppearTree(projectionNode) {\n  projectionNode.hasCheckedOptimisedAppear = true;\n  if (projectionNode.root === projectionNode) return false;\n  var visualElement = projectionNode.options.visualElement;\n\n  if (!visualElement) {\n    return false;\n  } else if (getOptimisedAppearId(visualElement)) {\n    return true;\n  } else if (projectionNode.parent && !projectionNode.parent.hasCheckedOptimisedAppear) {\n    return isOptimisedAppearTree(projectionNode.parent);\n  } else {\n    return false;\n  }\n}\n\nfunction createProjectionNode(_ref) {\n  var attachResizeListener = _ref.attachResizeListener,\n      defaultParent = _ref.defaultParent,\n      measureScroll = _ref.measureScroll,\n      checkIsScrollRoot = _ref.checkIsScrollRoot,\n      _resetTransform = _ref.resetTransform;\n  return /*#__PURE__*/function () {\n    function ProjectionNode() {\n      var _this = this;\n\n      var latestValues = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent();\n\n      _classCallCheck(this, ProjectionNode);\n\n      /**\n       * A unique ID generated for every projection node.\n       */\n      this.id = id++;\n      /**\n       * An id that represents a unique session instigated by startUpdate.\n       */\n\n      this.animationId = 0;\n      /**\n       * A Set containing all this component's children. This is used to iterate\n       * through the children.\n       *\n       * TODO: This could be faster to iterate as a flat array stored on the root node.\n       */\n\n      this.children = new Set();\n      /**\n       * Options for the node. We use this to configure what kind of layout animations\n       * we should perform (if any).\n       */\n\n      this.options = {};\n      /**\n       * We use this to detect when its safe to shut down part of a projection tree.\n       * We have to keep projecting children for scale correction and relative projection\n       * until all their parents stop performing layout animations.\n       */\n\n      this.isTreeAnimating = false;\n      this.isAnimationBlocked = false;\n      /**\n       * Flag to true if we think this layout has been changed. We can't always know this,\n       * currently we set it to true every time a component renders, or if it has a layoutDependency\n       * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n       * and if one node is dirtied, they all are.\n       */\n\n      this.isLayoutDirty = false;\n      /**\n       * Flag to true if we think the projection calculations for this node needs\n       * recalculating as a result of an updated transform or layout animation.\n       */\n\n      this.isProjectionDirty = false;\n      /**\n       * Flag to true if the layout *or* transform has changed. This then gets propagated\n       * throughout the projection tree, forcing any element below to recalculate on the next frame.\n       */\n\n      this.isSharedProjectionDirty = false;\n      /**\n       * Flag transform dirty. This gets propagated throughout the whole tree but is only\n       * respected by shared nodes.\n       */\n\n      this.isTransformDirty = false;\n      /**\n       * Block layout updates for instant layout transitions throughout the tree.\n       */\n\n      this.updateManuallyBlocked = false;\n      this.updateBlockedByResize = false;\n      /**\n       * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n       * call.\n       */\n\n      this.isUpdating = false;\n      /**\n       * If this is an SVG element we currently disable projection transforms\n       */\n\n      this.isSVG = false;\n      /**\n       * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n       * its projection styles.\n       */\n\n      this.needsReset = false;\n      /**\n       * Flags whether this node should have its transform reset prior to measuring.\n       */\n\n      this.shouldResetTransform = false;\n      /**\n       * Store whether this node has been checked for optimised appear animations. As\n       * effects fire bottom-up, and we want to look up the tree for appear animations,\n       * this makes sure we only check each path once, stopping at nodes that\n       * have already been checked.\n       */\n\n      this.hasCheckedOptimisedAppear = false;\n      /**\n       * An object representing the calculated contextual/accumulated/tree scale.\n       * This will be used to scale calculcated projection transforms, as these are\n       * calculated in screen-space but need to be scaled for elements to layoutly\n       * make it to their calculated destinations.\n       *\n       * TODO: Lazy-init\n       */\n\n      this.treeScale = {\n        x: 1,\n        y: 1\n      };\n      /**\n       *\n       */\n\n      this.eventHandlers = new Map();\n      this.hasTreeAnimated = false; // Note: Currently only running on root node\n\n      this.updateScheduled = false;\n      this.projectionUpdateScheduled = false;\n\n      this.checkUpdateFailed = function () {\n        if (_this.isUpdating) {\n          _this.isUpdating = false;\n\n          _this.clearAllSnapshots();\n        }\n      };\n      /**\n       * This is a multi-step process as shared nodes might be of different depths. Nodes\n       * are sorted by depth order, so we need to resolve the entire tree before moving to\n       * the next step.\n       */\n\n\n      this.updateProjection = function () {\n        _this.projectionUpdateScheduled = false;\n        /**\n         * Reset debug counts. Manually resetting rather than creating a new\n         * object each frame.\n         */\n\n        projectionFrameData.totalNodes = projectionFrameData.resolvedTargetDeltas = projectionFrameData.recalculatedProjection = 0;\n\n        _this.nodes.forEach(propagateDirtyNodes);\n\n        _this.nodes.forEach(resolveTargetDelta);\n\n        _this.nodes.forEach(calcProjection);\n\n        _this.nodes.forEach(cleanDirtyNodes);\n\n        record(projectionFrameData);\n      };\n\n      this.hasProjected = false;\n      this.isVisible = true;\n      this.animationProgress = 0;\n      /**\n       * Shared layout\n       */\n      // TODO Only running on root node\n\n      this.sharedNodes = new Map();\n      this.latestValues = latestValues;\n      this.root = parent ? parent.root || parent : this;\n      this.path = parent ? [].concat(_toConsumableArray(parent.path), [parent]) : [];\n      this.parent = parent;\n      this.depth = parent ? parent.depth + 1 : 0;\n\n      for (var i = 0; i < this.path.length; i++) {\n        this.path[i].shouldResetTransform = true;\n      }\n\n      if (this.root === this) this.nodes = new FlatTree();\n    }\n\n    _createClass(ProjectionNode, [{\n      key: \"addEventListener\",\n      value: function addEventListener(name, handler) {\n        if (!this.eventHandlers.has(name)) {\n          this.eventHandlers.set(name, new SubscriptionManager());\n        }\n\n        return this.eventHandlers.get(name).add(handler);\n      }\n    }, {\n      key: \"notifyListeners\",\n      value: function notifyListeners(name) {\n        var subscriptionManager = this.eventHandlers.get(name);\n\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        subscriptionManager && subscriptionManager.notify.apply(subscriptionManager, args);\n      }\n    }, {\n      key: \"hasListeners\",\n      value: function hasListeners(name) {\n        return this.eventHandlers.has(name);\n      }\n      /**\n       * Lifecycles\n       */\n\n    }, {\n      key: \"mount\",\n      value: function mount(instance) {\n        var _this2 = this;\n\n        var isLayoutDirty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.root.hasTreeAnimated;\n        if (this.instance) return;\n        this.isSVG = isSVGElement(instance);\n        this.instance = instance;\n        var _this$options = this.options,\n            layoutId = _this$options.layoutId,\n            layout = _this$options.layout,\n            visualElement = _this$options.visualElement;\n\n        if (visualElement && !visualElement.current) {\n          visualElement.mount(instance);\n        }\n\n        this.root.nodes.add(this);\n        this.parent && this.parent.children.add(this);\n\n        if (isLayoutDirty && (layout || layoutId)) {\n          this.isLayoutDirty = true;\n        }\n\n        if (attachResizeListener) {\n          var cancelDelay;\n\n          var resizeUnblockUpdate = function resizeUnblockUpdate() {\n            return _this2.root.updateBlockedByResize = false;\n          };\n\n          attachResizeListener(instance, function () {\n            _this2.root.updateBlockedByResize = true;\n            cancelDelay && cancelDelay();\n            cancelDelay = delay(resizeUnblockUpdate, 250);\n\n            if (globalProjectionState.hasAnimatedSinceResize) {\n              globalProjectionState.hasAnimatedSinceResize = false;\n\n              _this2.nodes.forEach(finishAnimation);\n            }\n          });\n        }\n\n        if (layoutId) {\n          this.root.registerSharedNode(layoutId, this);\n        } // Only register the handler if it requires layout animation\n\n\n        if (this.options.animate !== false && visualElement && (layoutId || layout)) {\n          this.addEventListener(\"didUpdate\", function (_ref2) {\n            var delta = _ref2.delta,\n                hasLayoutChanged = _ref2.hasLayoutChanged,\n                hasRelativeTargetChanged = _ref2.hasRelativeTargetChanged,\n                newLayout = _ref2.layout;\n\n            if (_this2.isTreeAnimationBlocked()) {\n              _this2.target = undefined;\n              _this2.relativeTarget = undefined;\n              return;\n            } // TODO: Check here if an animation exists\n\n\n            var layoutTransition = _this2.options.transition || visualElement.getDefaultTransition() || defaultLayoutTransition;\n\n            var _visualElement$getPro = visualElement.getProps(),\n                onLayoutAnimationStart = _visualElement$getPro.onLayoutAnimationStart,\n                onLayoutAnimationComplete = _visualElement$getPro.onLayoutAnimationComplete;\n            /**\n             * The target layout of the element might stay the same,\n             * but its position relative to its parent has changed.\n             */\n\n\n            var targetChanged = !_this2.targetLayout || !boxEqualsRounded(_this2.targetLayout, newLayout) || hasRelativeTargetChanged;\n            /**\n             * If the layout hasn't seemed to have changed, it might be that the\n             * element is visually in the same place in the document but its position\n             * relative to its parent has indeed changed. So here we check for that.\n             */\n\n            var hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n\n            if (_this2.options.layoutRoot || _this2.resumeFrom && _this2.resumeFrom.instance || hasOnlyRelativeTargetChanged || hasLayoutChanged && (targetChanged || !_this2.currentAnimation)) {\n              if (_this2.resumeFrom) {\n                _this2.resumingFrom = _this2.resumeFrom;\n                _this2.resumingFrom.resumingFrom = undefined;\n              }\n\n              _this2.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n\n              var animationOptions = _objectSpread(_objectSpread({}, getValueTransition(layoutTransition, \"layout\")), {}, {\n                onPlay: onLayoutAnimationStart,\n                onComplete: onLayoutAnimationComplete\n              });\n\n              if (visualElement.shouldReduceMotion || _this2.options.layoutRoot) {\n                animationOptions.delay = 0;\n                animationOptions.type = false;\n              }\n\n              _this2.startAnimation(animationOptions);\n            } else {\n              /**\n               * If the layout hasn't changed and we have an animation that hasn't started yet,\n               * finish it immediately. Otherwise it will be animating from a location\n               * that was probably never commited to screen and look like a jumpy box.\n               */\n              if (!hasLayoutChanged) {\n                finishAnimation(_this2);\n              }\n\n              if (_this2.isLead() && _this2.options.onExitComplete) {\n                _this2.options.onExitComplete();\n              }\n            }\n\n            _this2.targetLayout = newLayout;\n          });\n        }\n      }\n    }, {\n      key: \"unmount\",\n      value: function unmount() {\n        this.options.layoutId && this.willUpdate();\n        this.root.nodes.remove(this);\n        var stack = this.getStack();\n        stack && stack.remove(this);\n        this.parent && this.parent.children.delete(this);\n        this.instance = undefined;\n        cancelFrame(this.updateProjection);\n      } // only on the root\n\n    }, {\n      key: \"blockUpdate\",\n      value: function blockUpdate() {\n        this.updateManuallyBlocked = true;\n      }\n    }, {\n      key: \"unblockUpdate\",\n      value: function unblockUpdate() {\n        this.updateManuallyBlocked = false;\n      }\n    }, {\n      key: \"isUpdateBlocked\",\n      value: function isUpdateBlocked() {\n        return this.updateManuallyBlocked || this.updateBlockedByResize;\n      }\n    }, {\n      key: \"isTreeAnimationBlocked\",\n      value: function isTreeAnimationBlocked() {\n        return this.isAnimationBlocked || this.parent && this.parent.isTreeAnimationBlocked() || false;\n      } // Note: currently only running on root node\n\n    }, {\n      key: \"startUpdate\",\n      value: function startUpdate() {\n        if (this.isUpdateBlocked()) return;\n        this.isUpdating = true;\n        this.nodes && this.nodes.forEach(resetSkewAndRotation);\n        this.animationId++;\n      }\n    }, {\n      key: \"getTransformTemplate\",\n      value: function getTransformTemplate() {\n        var visualElement = this.options.visualElement;\n        return visualElement && visualElement.getProps().transformTemplate;\n      }\n    }, {\n      key: \"willUpdate\",\n      value: function willUpdate() {\n        var shouldNotifyListeners = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        this.root.hasTreeAnimated = true;\n\n        if (this.root.isUpdateBlocked()) {\n          this.options.onExitComplete && this.options.onExitComplete();\n          return;\n        }\n        /**\n         * If we're running optimised appear animations then these must be\n         * cancelled before measuring the DOM. This is so we can measure\n         * the true layout of the element rather than the WAAPI animation\n         * which will be unaffected by the resetSkewAndRotate step.\n         *\n         * Note: This is a DOM write. Worst case scenario is this is sandwiched\n         * between other snapshot reads which will cause unnecessary style recalculations.\n         * This has to happen here though, as we don't yet know which nodes will need\n         * snapshots in startUpdate(), but we only want to cancel optimised animations\n         * if a layout animation measurement is actually going to be affected by them.\n         */\n\n\n        if (window.HandoffCancelAllAnimations && isOptimisedAppearTree(this)) {\n          window.HandoffCancelAllAnimations();\n        }\n\n        !this.root.isUpdating && this.root.startUpdate();\n        if (this.isLayoutDirty) return;\n        this.isLayoutDirty = true;\n\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n          node.shouldResetTransform = true;\n          node.updateScroll(\"snapshot\");\n\n          if (node.options.layoutRoot) {\n            node.willUpdate(false);\n          }\n        }\n\n        var _this$options2 = this.options,\n            layoutId = _this$options2.layoutId,\n            layout = _this$options2.layout;\n        if (layoutId === undefined && !layout) return;\n        var transformTemplate = this.getTransformTemplate();\n        this.prevTransformTemplateValue = transformTemplate ? transformTemplate(this.latestValues, \"\") : undefined;\n        this.updateSnapshot();\n        shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n      }\n    }, {\n      key: \"update\",\n      value: function update() {\n        this.updateScheduled = false;\n        var updateWasBlocked = this.isUpdateBlocked(); // When doing an instant transition, we skip the layout update,\n        // but should still clean up the measurements so that the next\n        // snapshot could be taken correctly.\n\n        if (updateWasBlocked) {\n          this.unblockUpdate();\n          this.clearAllSnapshots();\n          this.nodes.forEach(clearMeasurements);\n          return;\n        }\n\n        if (!this.isUpdating) {\n          this.nodes.forEach(clearIsLayoutDirty);\n        }\n\n        this.isUpdating = false;\n        /**\n         * Write\n         */\n\n        this.nodes.forEach(resetTransformStyle);\n        /**\n         * Read ==================\n         */\n        // Update layout measurements of updated children\n\n        this.nodes.forEach(updateLayout);\n        /**\n         * Write\n         */\n        // Notify listeners that the layout is updated\n\n        this.nodes.forEach(notifyLayoutUpdate);\n        this.clearAllSnapshots();\n        /**\n         * Manually flush any pending updates. Ideally\n         * we could leave this to the following requestAnimationFrame but this seems\n         * to leave a flash of incorrectly styled content.\n         */\n\n        var now = time.now();\n        frameData.delta = clamp(0, 1000 / 60, now - frameData.timestamp);\n        frameData.timestamp = now;\n        frameData.isProcessing = true;\n        steps.update.process(frameData);\n        steps.preRender.process(frameData);\n        steps.render.process(frameData);\n        frameData.isProcessing = false;\n      }\n    }, {\n      key: \"didUpdate\",\n      value: function didUpdate() {\n        var _this3 = this;\n\n        if (!this.updateScheduled) {\n          this.updateScheduled = true;\n          microtask.read(function () {\n            return _this3.update();\n          });\n        }\n      }\n    }, {\n      key: \"clearAllSnapshots\",\n      value: function clearAllSnapshots() {\n        this.nodes.forEach(clearSnapshot);\n        this.sharedNodes.forEach(removeLeadSnapshots);\n      }\n    }, {\n      key: \"scheduleUpdateProjection\",\n      value: function scheduleUpdateProjection() {\n        if (!this.projectionUpdateScheduled) {\n          this.projectionUpdateScheduled = true;\n          frame.preRender(this.updateProjection, false, true);\n        }\n      }\n    }, {\n      key: \"scheduleCheckAfterUnmount\",\n      value: function scheduleCheckAfterUnmount() {\n        var _this4 = this;\n\n        /**\n         * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n         * we manually call didUpdate to give a chance to the siblings to animate.\n         * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n         */\n        frame.postRender(function () {\n          if (_this4.isLayoutDirty) {\n            _this4.root.didUpdate();\n          } else {\n            _this4.root.checkUpdateFailed();\n          }\n        });\n      }\n      /**\n       * Update measurements\n       */\n\n    }, {\n      key: \"updateSnapshot\",\n      value: function updateSnapshot() {\n        if (this.snapshot || !this.instance) return;\n        this.snapshot = this.measure();\n      }\n    }, {\n      key: \"updateLayout\",\n      value: function updateLayout() {\n        if (!this.instance) return; // TODO: Incorporate into a forwarded scroll offset\n\n        this.updateScroll();\n\n        if (!(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty) {\n          return;\n        }\n        /**\n         * When a node is mounted, it simply resumes from the prevLead's\n         * snapshot instead of taking a new one, but the ancestors scroll\n         * might have updated while the prevLead is unmounted. We need to\n         * update the scroll again to make sure the layout we measure is\n         * up to date.\n         */\n\n\n        if (this.resumeFrom && !this.resumeFrom.instance) {\n          for (var i = 0; i < this.path.length; i++) {\n            var node = this.path[i];\n            node.updateScroll();\n          }\n        }\n\n        var prevLayout = this.layout;\n        this.layout = this.measure(false);\n        this.layoutCorrected = createBox();\n        this.isLayoutDirty = false;\n        this.projectionDelta = undefined;\n        this.notifyListeners(\"measure\", this.layout.layoutBox);\n        var visualElement = this.options.visualElement;\n        visualElement && visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n      }\n    }, {\n      key: \"updateScroll\",\n      value: function updateScroll() {\n        var phase = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"measure\";\n        var needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n\n        if (this.scroll && this.scroll.animationId === this.root.animationId && this.scroll.phase === phase) {\n          needsMeasurement = false;\n        }\n\n        if (needsMeasurement) {\n          this.scroll = {\n            animationId: this.root.animationId,\n            phase: phase,\n            isRoot: checkIsScrollRoot(this.instance),\n            offset: measureScroll(this.instance)\n          };\n        }\n      }\n    }, {\n      key: \"resetTransform\",\n      value: function resetTransform() {\n        if (!_resetTransform) return;\n        var isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n        var hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n        var transformTemplate = this.getTransformTemplate();\n        var transformTemplateValue = transformTemplate ? transformTemplate(this.latestValues, \"\") : undefined;\n        var transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n\n        if (isResetRequested && (hasProjection || hasTransform(this.latestValues) || transformTemplateHasChanged)) {\n          _resetTransform(this.instance, transformTemplateValue);\n\n          this.shouldResetTransform = false;\n          this.scheduleRender();\n        }\n      }\n    }, {\n      key: \"measure\",\n      value: function measure() {\n        var removeTransform = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        var pageBox = this.measurePageBox();\n        var layoutBox = this.removeElementScroll(pageBox);\n        /**\n         * Measurements taken during the pre-render stage\n         * still have transforms applied so we remove them\n         * via calculation.\n         */\n\n        if (removeTransform) {\n          layoutBox = this.removeTransform(layoutBox);\n        }\n\n        roundBox(layoutBox);\n        return {\n          animationId: this.root.animationId,\n          measuredBox: pageBox,\n          layoutBox: layoutBox,\n          latestValues: {},\n          source: this.id\n        };\n      }\n    }, {\n      key: \"measurePageBox\",\n      value: function measurePageBox() {\n        var visualElement = this.options.visualElement;\n        if (!visualElement) return createBox();\n        var box = visualElement.measureViewportBox(); // Remove viewport scroll to give page-relative coordinates\n\n        var scroll = this.root.scroll;\n\n        if (scroll) {\n          translateAxis(box.x, scroll.offset.x);\n          translateAxis(box.y, scroll.offset.y);\n        }\n\n        return box;\n      }\n    }, {\n      key: \"removeElementScroll\",\n      value: function removeElementScroll(box) {\n        var boxWithoutScroll = createBox();\n        copyBoxInto(boxWithoutScroll, box);\n        /**\n         * Performance TODO: Keep a cumulative scroll offset down the tree\n         * rather than loop back up the path.\n         */\n\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n          var scroll = node.scroll,\n              options = node.options;\n\n          if (node !== this.root && scroll && options.layoutScroll) {\n            /**\n             * If this is a new scroll root, we want to remove all previous scrolls\n             * from the viewport box.\n             */\n            if (scroll.isRoot) {\n              copyBoxInto(boxWithoutScroll, box);\n              var rootScroll = this.root.scroll;\n              /**\n               * Undo the application of page scroll that was originally added\n               * to the measured bounding box.\n               */\n\n              if (rootScroll) {\n                translateAxis(boxWithoutScroll.x, -rootScroll.offset.x);\n                translateAxis(boxWithoutScroll.y, -rootScroll.offset.y);\n              }\n            }\n\n            translateAxis(boxWithoutScroll.x, scroll.offset.x);\n            translateAxis(boxWithoutScroll.y, scroll.offset.y);\n          }\n        }\n\n        return boxWithoutScroll;\n      }\n    }, {\n      key: \"applyTransform\",\n      value: function applyTransform(box) {\n        var transformOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        var withTransforms = createBox();\n        copyBoxInto(withTransforms, box);\n\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n\n          if (!transformOnly && node.options.layoutScroll && node.scroll && node !== node.root) {\n            transformBox(withTransforms, {\n              x: -node.scroll.offset.x,\n              y: -node.scroll.offset.y\n            });\n          }\n\n          if (!hasTransform(node.latestValues)) continue;\n          transformBox(withTransforms, node.latestValues);\n        }\n\n        if (hasTransform(this.latestValues)) {\n          transformBox(withTransforms, this.latestValues);\n        }\n\n        return withTransforms;\n      }\n    }, {\n      key: \"removeTransform\",\n      value: function removeTransform(box) {\n        var boxWithoutTransform = createBox();\n        copyBoxInto(boxWithoutTransform, box);\n\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n          if (!node.instance) continue;\n          if (!hasTransform(node.latestValues)) continue;\n          hasScale(node.latestValues) && node.updateSnapshot();\n          var sourceBox = createBox();\n          var nodeBox = node.measurePageBox();\n          copyBoxInto(sourceBox, nodeBox);\n          removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n        }\n\n        if (hasTransform(this.latestValues)) {\n          removeBoxTransforms(boxWithoutTransform, this.latestValues);\n        }\n\n        return boxWithoutTransform;\n      }\n    }, {\n      key: \"setTargetDelta\",\n      value: function setTargetDelta(delta) {\n        this.targetDelta = delta;\n        this.root.scheduleUpdateProjection();\n        this.isProjectionDirty = true;\n      }\n    }, {\n      key: \"setOptions\",\n      value: function setOptions(options) {\n        this.options = _objectSpread(_objectSpread(_objectSpread({}, this.options), options), {}, {\n          crossfade: options.crossfade !== undefined ? options.crossfade : true\n        });\n      }\n    }, {\n      key: \"clearMeasurements\",\n      value: function clearMeasurements() {\n        this.scroll = undefined;\n        this.layout = undefined;\n        this.snapshot = undefined;\n        this.prevTransformTemplateValue = undefined;\n        this.targetDelta = undefined;\n        this.target = undefined;\n        this.isLayoutDirty = false;\n      }\n    }, {\n      key: \"forceRelativeParentToResolveTarget\",\n      value: function forceRelativeParentToResolveTarget() {\n        if (!this.relativeParent) return;\n        /**\n         * If the parent target isn't up-to-date, force it to update.\n         * This is an unfortunate de-optimisation as it means any updating relative\n         * projection will cause all the relative parents to recalculate back\n         * up the tree.\n         */\n\n        if (this.relativeParent.resolvedRelativeTargetAt !== frameData.timestamp) {\n          this.relativeParent.resolveTargetDelta(true);\n        }\n      }\n    }, {\n      key: \"resolveTargetDelta\",\n      value: function resolveTargetDelta() {\n        var forceRecalculation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n        var _a;\n        /**\n         * Once the dirty status of nodes has been spread through the tree, we also\n         * need to check if we have a shared node of a different depth that has itself\n         * been dirtied.\n         */\n\n\n        var lead = this.getLead();\n        this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n        this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n        this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);\n        var isShared = Boolean(this.resumingFrom) || this !== lead;\n        /**\n         * We don't use transform for this step of processing so we don't\n         * need to check whether any nodes have changed transform.\n         */\n\n        var canSkip = !(forceRecalculation || isShared && this.isSharedProjectionDirty || this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty) || this.attemptToResolveRelativeTarget);\n        if (canSkip) return;\n        var _this$options3 = this.options,\n            layout = _this$options3.layout,\n            layoutId = _this$options3.layoutId;\n        /**\n         * If we have no layout, we can't perform projection, so early return\n         */\n\n        if (!this.layout || !(layout || layoutId)) return;\n        this.resolvedRelativeTargetAt = frameData.timestamp;\n        /**\n         * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n         * a relativeParent. This will allow a component to perform scale correction\n         * even if no animation has started.\n         */\n\n        if (!this.targetDelta && !this.relativeTarget) {\n          var relativeParent = this.getClosestProjectingParent();\n\n          if (relativeParent && relativeParent.layout && this.animationProgress !== 1) {\n            this.relativeParent = relativeParent;\n            this.forceRelativeParentToResolveTarget();\n            this.relativeTarget = createBox();\n            this.relativeTargetOrigin = createBox();\n            calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n            copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n          } else {\n            this.relativeParent = this.relativeTarget = undefined;\n          }\n        }\n        /**\n         * If we have no relative target or no target delta our target isn't valid\n         * for this frame.\n         */\n\n\n        if (!this.relativeTarget && !this.targetDelta) return;\n        /**\n         * Lazy-init target data structure\n         */\n\n        if (!this.target) {\n          this.target = createBox();\n          this.targetWithTransforms = createBox();\n        }\n        /**\n         * If we've got a relative box for this component, resolve it into a target relative to the parent.\n         */\n\n\n        if (this.relativeTarget && this.relativeTargetOrigin && this.relativeParent && this.relativeParent.target) {\n          this.forceRelativeParentToResolveTarget();\n          calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n          /**\n           * If we've only got a targetDelta, resolve it into a target\n           */\n        } else if (this.targetDelta) {\n          if (Boolean(this.resumingFrom)) {\n            // TODO: This is creating a new object every frame\n            this.target = this.applyTransform(this.layout.layoutBox);\n          } else {\n            copyBoxInto(this.target, this.layout.layoutBox);\n          }\n\n          applyBoxDelta(this.target, this.targetDelta);\n        } else {\n          /**\n           * If no target, use own layout as target\n           */\n          copyBoxInto(this.target, this.layout.layoutBox);\n        }\n        /**\n         * If we've been told to attempt to resolve a relative target, do so.\n         */\n\n\n        if (this.attemptToResolveRelativeTarget) {\n          this.attemptToResolveRelativeTarget = false;\n\n          var _relativeParent = this.getClosestProjectingParent();\n\n          if (_relativeParent && Boolean(_relativeParent.resumingFrom) === Boolean(this.resumingFrom) && !_relativeParent.options.layoutScroll && _relativeParent.target && this.animationProgress !== 1) {\n            this.relativeParent = _relativeParent;\n            this.forceRelativeParentToResolveTarget();\n            this.relativeTarget = createBox();\n            this.relativeTargetOrigin = createBox();\n            calcRelativePosition(this.relativeTargetOrigin, this.target, _relativeParent.target);\n            copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n          } else {\n            this.relativeParent = this.relativeTarget = undefined;\n          }\n        }\n        /**\n         * Increase debug counter for resolved target deltas\n         */\n\n\n        projectionFrameData.resolvedTargetDeltas++;\n      }\n    }, {\n      key: \"getClosestProjectingParent\",\n      value: function getClosestProjectingParent() {\n        if (!this.parent || hasScale(this.parent.latestValues) || has2DTranslate(this.parent.latestValues)) {\n          return undefined;\n        }\n\n        if (this.parent.isProjecting()) {\n          return this.parent;\n        } else {\n          return this.parent.getClosestProjectingParent();\n        }\n      }\n    }, {\n      key: \"isProjecting\",\n      value: function isProjecting() {\n        return Boolean((this.relativeTarget || this.targetDelta || this.options.layoutRoot) && this.layout);\n      }\n    }, {\n      key: \"calcProjection\",\n      value: function calcProjection() {\n        var _a;\n\n        var lead = this.getLead();\n        var isShared = Boolean(this.resumingFrom) || this !== lead;\n        var canSkip = true;\n        /**\n         * If this is a normal layout animation and neither this node nor its nearest projecting\n         * is dirty then we can't skip.\n         */\n\n        if (this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty)) {\n          canSkip = false;\n        }\n        /**\n         * If this is a shared layout animation and this node's shared projection is dirty then\n         * we can't skip.\n         */\n\n\n        if (isShared && (this.isSharedProjectionDirty || this.isTransformDirty)) {\n          canSkip = false;\n        }\n        /**\n         * If we have resolved the target this frame we must recalculate the\n         * projection to ensure it visually represents the internal calculations.\n         */\n\n\n        if (this.resolvedRelativeTargetAt === frameData.timestamp) {\n          canSkip = false;\n        }\n\n        if (canSkip) return;\n        var _this$options4 = this.options,\n            layout = _this$options4.layout,\n            layoutId = _this$options4.layoutId;\n        /**\n         * If this section of the tree isn't animating we can\n         * delete our target sources for the following frame.\n         */\n\n        this.isTreeAnimating = Boolean(this.parent && this.parent.isTreeAnimating || this.currentAnimation || this.pendingAnimation);\n\n        if (!this.isTreeAnimating) {\n          this.targetDelta = this.relativeTarget = undefined;\n        }\n\n        if (!this.layout || !(layout || layoutId)) return;\n        /**\n         * Reset the corrected box with the latest values from box, as we're then going\n         * to perform mutative operations on it.\n         */\n\n        copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n        /**\n         * Record previous tree scales before updating.\n         */\n\n        var prevTreeScaleX = this.treeScale.x;\n        var prevTreeScaleY = this.treeScale.y;\n        /**\n         * Apply all the parent deltas to this box to produce the corrected box. This\n         * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n         */\n\n        applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n        /**\n         * If this layer needs to perform scale correction but doesn't have a target,\n         * use the layout as the target.\n         */\n\n        if (lead.layout && !lead.target && (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {\n          lead.target = lead.layout.layoutBox;\n          lead.targetWithTransforms = createBox();\n        }\n\n        var target = lead.target;\n\n        if (!target) {\n          /**\n           * If we don't have a target to project into, but we were previously\n           * projecting, we want to remove the stored transform and schedule\n           * a render to ensure the elements reflect the removed transform.\n           */\n          if (this.projectionTransform) {\n            this.projectionDelta = createDelta();\n            this.projectionTransform = \"none\";\n            this.scheduleRender();\n          }\n\n          return;\n        }\n\n        if (!this.projectionDelta) {\n          this.projectionDelta = createDelta();\n          this.projectionDeltaWithTransform = createDelta();\n        }\n\n        var prevProjectionTransform = this.projectionTransform;\n        /**\n         * Update the delta between the corrected box and the target box before user-set transforms were applied.\n         * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n         * for our layout reprojection, but still allow them to be scaled correctly by the user.\n         * It might be that to simplify this we may want to accept that user-set scale is also corrected\n         * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n         * to allow people to choose whether these styles are corrected based on just the\n         * layout reprojection or the final bounding box.\n         */\n\n        calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n        this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n\n        if (this.projectionTransform !== prevProjectionTransform || this.treeScale.x !== prevTreeScaleX || this.treeScale.y !== prevTreeScaleY) {\n          this.hasProjected = true;\n          this.scheduleRender();\n          this.notifyListeners(\"projectionUpdate\", target);\n        }\n        /**\n         * Increase debug counter for recalculated projections\n         */\n\n\n        projectionFrameData.recalculatedProjection++;\n      }\n    }, {\n      key: \"hide\",\n      value: function hide() {\n        this.isVisible = false; // TODO: Schedule render\n      }\n    }, {\n      key: \"show\",\n      value: function show() {\n        this.isVisible = true; // TODO: Schedule render\n      }\n    }, {\n      key: \"scheduleRender\",\n      value: function scheduleRender() {\n        var notifyAll = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        this.options.scheduleRender && this.options.scheduleRender();\n\n        if (notifyAll) {\n          var stack = this.getStack();\n          stack && stack.scheduleRender();\n        }\n\n        if (this.resumingFrom && !this.resumingFrom.instance) {\n          this.resumingFrom = undefined;\n        }\n      }\n    }, {\n      key: \"setAnimationOrigin\",\n      value: function setAnimationOrigin(delta) {\n        var _this5 = this;\n\n        var hasOnlyRelativeTargetChanged = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        var snapshot = this.snapshot;\n        var snapshotLatestValues = snapshot ? snapshot.latestValues : {};\n\n        var mixedValues = _objectSpread({}, this.latestValues);\n\n        var targetDelta = createDelta();\n\n        if (!this.relativeParent || !this.relativeParent.options.layoutRoot) {\n          this.relativeTarget = this.relativeTargetOrigin = undefined;\n        }\n\n        this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n        var relativeLayout = createBox();\n        var snapshotSource = snapshot ? snapshot.source : undefined;\n        var layoutSource = this.layout ? this.layout.source : undefined;\n        var isSharedLayoutAnimation = snapshotSource !== layoutSource;\n        var stack = this.getStack();\n        var isOnlyMember = !stack || stack.members.length <= 1;\n        var shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation && !isOnlyMember && this.options.crossfade === true && !this.path.some(hasOpacityCrossfade));\n        this.animationProgress = 0;\n        var prevRelativeTarget;\n\n        this.mixTargetDelta = function (latest) {\n          var progress = latest / 1000;\n          mixAxisDelta(targetDelta.x, delta.x, progress);\n          mixAxisDelta(targetDelta.y, delta.y, progress);\n\n          _this5.setTargetDelta(targetDelta);\n\n          if (_this5.relativeTarget && _this5.relativeTargetOrigin && _this5.layout && _this5.relativeParent && _this5.relativeParent.layout) {\n            calcRelativePosition(relativeLayout, _this5.layout.layoutBox, _this5.relativeParent.layout.layoutBox);\n            mixBox(_this5.relativeTarget, _this5.relativeTargetOrigin, relativeLayout, progress);\n            /**\n             * If this is an unchanged relative target we can consider the\n             * projection not dirty.\n             */\n\n            if (prevRelativeTarget && boxEquals(_this5.relativeTarget, prevRelativeTarget)) {\n              _this5.isProjectionDirty = false;\n            }\n\n            if (!prevRelativeTarget) prevRelativeTarget = createBox();\n            copyBoxInto(prevRelativeTarget, _this5.relativeTarget);\n          }\n\n          if (isSharedLayoutAnimation) {\n            _this5.animationValues = mixedValues;\n            mixValues(mixedValues, snapshotLatestValues, _this5.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n          }\n\n          _this5.root.scheduleUpdateProjection();\n\n          _this5.scheduleRender();\n\n          _this5.animationProgress = progress;\n        };\n\n        this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n      }\n    }, {\n      key: \"startAnimation\",\n      value: function startAnimation(options) {\n        var _this6 = this;\n\n        this.notifyListeners(\"animationStart\");\n        this.currentAnimation && this.currentAnimation.stop();\n\n        if (this.resumingFrom && this.resumingFrom.currentAnimation) {\n          this.resumingFrom.currentAnimation.stop();\n        }\n\n        if (this.pendingAnimation) {\n          cancelFrame(this.pendingAnimation);\n          this.pendingAnimation = undefined;\n        }\n        /**\n         * Start the animation in the next frame to have a frame with progress 0,\n         * where the target is the same as when the animation started, so we can\n         * calculate the relative positions correctly for instant transitions.\n         */\n\n\n        this.pendingAnimation = frame.update(function () {\n          globalProjectionState.hasAnimatedSinceResize = true;\n          _this6.currentAnimation = animateSingleValue(0, animationTarget, _objectSpread(_objectSpread({}, options), {}, {\n            onUpdate: function onUpdate(latest) {\n              _this6.mixTargetDelta(latest);\n\n              options.onUpdate && options.onUpdate(latest);\n            },\n            onComplete: function onComplete() {\n              options.onComplete && options.onComplete();\n\n              _this6.completeAnimation();\n            }\n          }));\n\n          if (_this6.resumingFrom) {\n            _this6.resumingFrom.currentAnimation = _this6.currentAnimation;\n          }\n\n          _this6.pendingAnimation = undefined;\n        });\n      }\n    }, {\n      key: \"completeAnimation\",\n      value: function completeAnimation() {\n        if (this.resumingFrom) {\n          this.resumingFrom.currentAnimation = undefined;\n          this.resumingFrom.preserveOpacity = undefined;\n        }\n\n        var stack = this.getStack();\n        stack && stack.exitAnimationComplete();\n        this.resumingFrom = this.currentAnimation = this.animationValues = undefined;\n        this.notifyListeners(\"animationComplete\");\n      }\n    }, {\n      key: \"finishAnimation\",\n      value: function finishAnimation() {\n        if (this.currentAnimation) {\n          this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n          this.currentAnimation.stop();\n        }\n\n        this.completeAnimation();\n      }\n    }, {\n      key: \"applyTransformsToTarget\",\n      value: function applyTransformsToTarget() {\n        var lead = this.getLead();\n        var targetWithTransforms = lead.targetWithTransforms,\n            target = lead.target,\n            layout = lead.layout,\n            latestValues = lead.latestValues;\n        if (!targetWithTransforms || !target || !layout) return;\n        /**\n         * If we're only animating position, and this element isn't the lead element,\n         * then instead of projecting into the lead box we instead want to calculate\n         * a new target that aligns the two boxes but maintains the layout shape.\n         */\n\n        if (this !== lead && this.layout && layout && shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n          target = this.target || createBox();\n          var xLength = calcLength(this.layout.layoutBox.x);\n          target.x.min = lead.target.x.min;\n          target.x.max = target.x.min + xLength;\n          var yLength = calcLength(this.layout.layoutBox.y);\n          target.y.min = lead.target.y.min;\n          target.y.max = target.y.min + yLength;\n        }\n\n        copyBoxInto(targetWithTransforms, target);\n        /**\n         * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n         * This is the final box that we will then project into by calculating a transform delta and\n         * applying it to the corrected box.\n         */\n\n        transformBox(targetWithTransforms, latestValues);\n        /**\n         * Update the delta between the corrected box and the final target box, after\n         * user-set transforms are applied to it. This will be used by the renderer to\n         * create a transform style that will reproject the element from its layout layout\n         * into the desired bounding box.\n         */\n\n        calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n      }\n    }, {\n      key: \"registerSharedNode\",\n      value: function registerSharedNode(layoutId, node) {\n        if (!this.sharedNodes.has(layoutId)) {\n          this.sharedNodes.set(layoutId, new NodeStack());\n        }\n\n        var stack = this.sharedNodes.get(layoutId);\n        stack.add(node);\n        var config = node.options.initialPromotionConfig;\n        node.promote({\n          transition: config ? config.transition : undefined,\n          preserveFollowOpacity: config && config.shouldPreserveFollowOpacity ? config.shouldPreserveFollowOpacity(node) : undefined\n        });\n      }\n    }, {\n      key: \"isLead\",\n      value: function isLead() {\n        var stack = this.getStack();\n        return stack ? stack.lead === this : true;\n      }\n    }, {\n      key: \"getLead\",\n      value: function getLead() {\n        var _a;\n\n        var layoutId = this.options.layoutId;\n        return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n      }\n    }, {\n      key: \"getPrevLead\",\n      value: function getPrevLead() {\n        var _a;\n\n        var layoutId = this.options.layoutId;\n        return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n      }\n    }, {\n      key: \"getStack\",\n      value: function getStack() {\n        var layoutId = this.options.layoutId;\n        if (layoutId) return this.root.sharedNodes.get(layoutId);\n      }\n    }, {\n      key: \"promote\",\n      value: function promote() {\n        var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n            needsReset = _ref3.needsReset,\n            transition = _ref3.transition,\n            preserveFollowOpacity = _ref3.preserveFollowOpacity;\n\n        var stack = this.getStack();\n        if (stack) stack.promote(this, preserveFollowOpacity);\n\n        if (needsReset) {\n          this.projectionDelta = undefined;\n          this.needsReset = true;\n        }\n\n        if (transition) this.setOptions({\n          transition: transition\n        });\n      }\n    }, {\n      key: \"relegate\",\n      value: function relegate() {\n        var stack = this.getStack();\n\n        if (stack) {\n          return stack.relegate(this);\n        } else {\n          return false;\n        }\n      }\n    }, {\n      key: \"resetSkewAndRotation\",\n      value: function resetSkewAndRotation() {\n        var visualElement = this.options.visualElement;\n        if (!visualElement) return; // If there's no detected skew or rotation values, we can early return without a forced render.\n\n        var hasDistortingTransform = false;\n        /**\n         * An unrolled check for rotation values. Most elements don't have any rotation and\n         * skipping the nested loop and new object creation is 50% faster.\n         */\n\n        var latestValues = visualElement.latestValues;\n\n        if (latestValues.z || latestValues.rotate || latestValues.rotateX || latestValues.rotateY || latestValues.rotateZ || latestValues.skewX || latestValues.skewY) {\n          hasDistortingTransform = true;\n        } // If there's no distorting values, we don't need to do any more.\n\n\n        if (!hasDistortingTransform) return;\n        var resetValues = {};\n\n        if (latestValues.z) {\n          resetDistortingTransform(\"z\", visualElement, resetValues, this.animationValues);\n        } // Check the skew and rotate value of all axes and reset to 0\n\n\n        for (var i = 0; i < transformAxes.length; i++) {\n          resetDistortingTransform(\"rotate\".concat(transformAxes[i]), visualElement, resetValues, this.animationValues);\n          resetDistortingTransform(\"skew\".concat(transformAxes[i]), visualElement, resetValues, this.animationValues);\n        } // Force a render of this element to apply the transform with all skews and rotations\n        // set to 0.\n\n\n        visualElement.render(); // Put back all the values we reset\n\n        for (var key in resetValues) {\n          visualElement.setStaticValue(key, resetValues[key]);\n\n          if (this.animationValues) {\n            this.animationValues[key] = resetValues[key];\n          }\n        } // Schedule a render for the next frame. This ensures we won't visually\n        // see the element with the reset rotate value applied.\n\n\n        visualElement.scheduleRender();\n      }\n    }, {\n      key: \"getProjectionStyles\",\n      value: function getProjectionStyles(styleProp) {\n        var _a, _b;\n\n        if (!this.instance || this.isSVG) return undefined;\n\n        if (!this.isVisible) {\n          return hiddenVisibility;\n        }\n\n        var styles = {\n          visibility: \"\"\n        };\n        var transformTemplate = this.getTransformTemplate();\n\n        if (this.needsReset) {\n          this.needsReset = false;\n          styles.opacity = \"\";\n          styles.pointerEvents = resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n          styles.transform = transformTemplate ? transformTemplate(this.latestValues, \"\") : \"none\";\n          return styles;\n        }\n\n        var lead = this.getLead();\n\n        if (!this.projectionDelta || !this.layout || !lead.target) {\n          var emptyStyles = {};\n\n          if (this.options.layoutId) {\n            emptyStyles.opacity = this.latestValues.opacity !== undefined ? this.latestValues.opacity : 1;\n            emptyStyles.pointerEvents = resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n          }\n\n          if (this.hasProjected && !hasTransform(this.latestValues)) {\n            emptyStyles.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n            this.hasProjected = false;\n          }\n\n          return emptyStyles;\n        }\n\n        var valuesToRender = lead.animationValues || lead.latestValues;\n        this.applyTransformsToTarget();\n        styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n\n        if (transformTemplate) {\n          styles.transform = transformTemplate(valuesToRender, styles.transform);\n        }\n\n        var _this$projectionDelta = this.projectionDelta,\n            x = _this$projectionDelta.x,\n            y = _this$projectionDelta.y;\n        styles.transformOrigin = \"\".concat(x.origin * 100, \"% \").concat(y.origin * 100, \"% 0\");\n\n        if (lead.animationValues) {\n          /**\n           * If the lead component is animating, assign this either the entering/leaving\n           * opacity\n           */\n          styles.opacity = lead === this ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1 : this.preserveOpacity ? this.latestValues.opacity : valuesToRender.opacityExit;\n        } else {\n          /**\n           * Or we're not animating at all, set the lead component to its layout\n           * opacity and other components to hidden.\n           */\n          styles.opacity = lead === this ? valuesToRender.opacity !== undefined ? valuesToRender.opacity : \"\" : valuesToRender.opacityExit !== undefined ? valuesToRender.opacityExit : 0;\n        }\n        /**\n         * Apply scale correction\n         */\n\n\n        for (var key in scaleCorrectors) {\n          if (valuesToRender[key] === undefined) continue;\n          var _scaleCorrectors$key = scaleCorrectors[key],\n              correct = _scaleCorrectors$key.correct,\n              applyTo = _scaleCorrectors$key.applyTo;\n          /**\n           * Only apply scale correction to the value if we have an\n           * active projection transform. Otherwise these values become\n           * vulnerable to distortion if the element changes size without\n           * a corresponding layout animation.\n           */\n\n          var corrected = styles.transform === \"none\" ? valuesToRender[key] : correct(valuesToRender[key], lead);\n\n          if (applyTo) {\n            var num = applyTo.length;\n\n            for (var i = 0; i < num; i++) {\n              styles[applyTo[i]] = corrected;\n            }\n          } else {\n            styles[key] = corrected;\n          }\n        }\n        /**\n         * Disable pointer events on follow components. This is to ensure\n         * that if a follow component covers a lead component it doesn't block\n         * pointer events on the lead.\n         */\n\n\n        if (this.options.layoutId) {\n          styles.pointerEvents = lead === this ? resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\" : \"none\";\n        }\n\n        return styles;\n      }\n    }, {\n      key: \"clearSnapshot\",\n      value: function clearSnapshot() {\n        this.resumeFrom = this.snapshot = undefined;\n      } // Only run on root\n\n    }, {\n      key: \"resetTree\",\n      value: function resetTree() {\n        this.root.nodes.forEach(function (node) {\n          var _a;\n\n          return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n        });\n        this.root.nodes.forEach(clearMeasurements);\n        this.root.sharedNodes.clear();\n      }\n    }]);\n\n    return ProjectionNode;\n  }();\n}\n\nfunction updateLayout(node) {\n  node.updateLayout();\n}\n\nfunction notifyLayoutUpdate(node) {\n  var _a;\n\n  var snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n\n  if (node.isLead() && node.layout && snapshot && node.hasListeners(\"didUpdate\")) {\n    var _node$layout = node.layout,\n        layout = _node$layout.layoutBox,\n        measuredLayout = _node$layout.measuredBox;\n    var animationType = node.options.animationType;\n    var isShared = snapshot.source !== node.layout.source; // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n    // animations for instance if layout=\"size\" and an element has only changed position\n\n    if (animationType === \"size\") {\n      eachAxis(function (axis) {\n        var axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];\n        var length = calcLength(axisSnapshot);\n        axisSnapshot.min = layout[axis].min;\n        axisSnapshot.max = axisSnapshot.min + length;\n      });\n    } else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n      eachAxis(function (axis) {\n        var axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];\n        var length = calcLength(layout[axis]);\n        axisSnapshot.max = axisSnapshot.min + length;\n        /**\n         * Ensure relative target gets resized and rerendererd\n         */\n\n        if (node.relativeTarget && !node.currentAnimation) {\n          node.isProjectionDirty = true;\n          node.relativeTarget[axis].max = node.relativeTarget[axis].min + length;\n        }\n      });\n    }\n\n    var layoutDelta = createDelta();\n    calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n    var visualDelta = createDelta();\n\n    if (isShared) {\n      calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n    } else {\n      calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n    }\n\n    var hasLayoutChanged = !isDeltaZero(layoutDelta);\n    var hasRelativeTargetChanged = false;\n\n    if (!node.resumeFrom) {\n      var relativeParent = node.getClosestProjectingParent();\n      /**\n       * If the relativeParent is itself resuming from a different element then\n       * the relative snapshot is not relavent\n       */\n\n      if (relativeParent && !relativeParent.resumeFrom) {\n        var parentSnapshot = relativeParent.snapshot,\n            parentLayout = relativeParent.layout;\n\n        if (parentSnapshot && parentLayout) {\n          var relativeSnapshot = createBox();\n          calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n          var relativeLayout = createBox();\n          calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n\n          if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {\n            hasRelativeTargetChanged = true;\n          }\n\n          if (relativeParent.options.layoutRoot) {\n            node.relativeTarget = relativeLayout;\n            node.relativeTargetOrigin = relativeSnapshot;\n            node.relativeParent = relativeParent;\n          }\n        }\n      }\n    }\n\n    node.notifyListeners(\"didUpdate\", {\n      layout: layout,\n      snapshot: snapshot,\n      delta: visualDelta,\n      layoutDelta: layoutDelta,\n      hasLayoutChanged: hasLayoutChanged,\n      hasRelativeTargetChanged: hasRelativeTargetChanged\n    });\n  } else if (node.isLead()) {\n    var onExitComplete = node.options.onExitComplete;\n    onExitComplete && onExitComplete();\n  }\n  /**\n   * Clearing transition\n   * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n   * and why we need it at all\n   */\n\n\n  node.options.transition = undefined;\n}\n\nfunction propagateDirtyNodes(node) {\n  /**\n   * Increase debug counter for nodes encountered this frame\n   */\n  projectionFrameData.totalNodes++;\n  if (!node.parent) return;\n  /**\n   * If this node isn't projecting, propagate isProjectionDirty. It will have\n   * no performance impact but it will allow the next child that *is* projecting\n   * but *isn't* dirty to just check its parent to see if *any* ancestor needs\n   * correcting.\n   */\n\n  if (!node.isProjecting()) {\n    node.isProjectionDirty = node.parent.isProjectionDirty;\n  }\n  /**\n   * Propagate isSharedProjectionDirty and isTransformDirty\n   * throughout the whole tree. A future revision can take another look at\n   * this but for safety we still recalcualte shared nodes.\n   */\n\n\n  node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty || node.parent.isProjectionDirty || node.parent.isSharedProjectionDirty));\n  node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);\n}\n\nfunction cleanDirtyNodes(node) {\n  node.isProjectionDirty = node.isSharedProjectionDirty = node.isTransformDirty = false;\n}\n\nfunction clearSnapshot(node) {\n  node.clearSnapshot();\n}\n\nfunction clearMeasurements(node) {\n  node.clearMeasurements();\n}\n\nfunction clearIsLayoutDirty(node) {\n  node.isLayoutDirty = false;\n}\n\nfunction resetTransformStyle(node) {\n  var visualElement = node.options.visualElement;\n\n  if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n    visualElement.notify(\"BeforeLayoutMeasure\");\n  }\n\n  node.resetTransform();\n}\n\nfunction finishAnimation(node) {\n  node.finishAnimation();\n  node.targetDelta = node.relativeTarget = node.target = undefined;\n  node.isProjectionDirty = true;\n}\n\nfunction resolveTargetDelta(node) {\n  node.resolveTargetDelta();\n}\n\nfunction calcProjection(node) {\n  node.calcProjection();\n}\n\nfunction resetSkewAndRotation(node) {\n  node.resetSkewAndRotation();\n}\n\nfunction removeLeadSnapshots(stack) {\n  stack.removeLeadSnapshot();\n}\n\nfunction mixAxisDelta(output, delta, p) {\n  output.translate = mixNumber(delta.translate, 0, p);\n  output.scale = mixNumber(delta.scale, 1, p);\n  output.origin = delta.origin;\n  output.originPoint = delta.originPoint;\n}\n\nfunction mixAxis(output, from, to, p) {\n  output.min = mixNumber(from.min, to.min, p);\n  output.max = mixNumber(from.max, to.max, p);\n}\n\nfunction mixBox(output, from, to, p) {\n  mixAxis(output.x, from.x, to.x, p);\n  mixAxis(output.y, from.y, to.y, p);\n}\n\nfunction hasOpacityCrossfade(node) {\n  return node.animationValues && node.animationValues.opacityExit !== undefined;\n}\n\nvar defaultLayoutTransition = {\n  duration: 0.45,\n  ease: [0.4, 0, 0.1, 1]\n};\n\nvar userAgentContains = function userAgentContains(string) {\n  return typeof navigator !== \"undefined\" && navigator.userAgent && navigator.userAgent.toLowerCase().includes(string);\n};\n/**\n * Measured bounding boxes must be rounded in Safari and\n * left untouched in Chrome, otherwise non-integer layouts within scaled-up elements\n * can appear to jump.\n */\n\n\nvar roundPoint = userAgentContains(\"applewebkit/\") && !userAgentContains(\"chrome/\") ? Math.round : noop;\n\nfunction roundAxis(axis) {\n  // Round to the nearest .5 pixels to support subpixel layouts\n  axis.min = roundPoint(axis.min);\n  axis.max = roundPoint(axis.max);\n}\n\nfunction roundBox(box) {\n  roundAxis(box.x);\n  roundAxis(box.y);\n}\n\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n  return animationType === \"position\" || animationType === \"preserve-aspect\" && !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2);\n}\n\nexport { cleanDirtyNodes, createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };","map":{"version":3,"names":["SubscriptionManager","mixValues","copyBoxInto","translateAxis","transformBox","applyBoxDelta","applyTreeDeltas","calcRelativePosition","calcRelativeBox","calcBoxDelta","calcLength","isNear","removeBoxTransforms","createBox","createDelta","getValueTransition","boxEqualsRounded","isDeltaZero","aspectRatio","boxEquals","NodeStack","scaleCorrectors","buildProjectionTransform","eachAxis","hasTransform","hasScale","has2DTranslate","FlatTree","resolveMotionValue","globalProjectionState","delay","mixNumber","record","isSVGElement","animateSingleValue","clamp","cancelFrame","frameData","steps","frame","noop","time","microtask","getOptimisedAppearId","transformAxes","hiddenVisibility","visibility","animationTarget","id","projectionFrameData","type","totalNodes","resolvedTargetDeltas","recalculatedProjection","resetDistortingTransform","key","visualElement","values","sharedAnimationValues","latestValues","setStaticValue","isOptimisedAppearTree","projectionNode","hasCheckedOptimisedAppear","root","options","parent","createProjectionNode","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","animationId","children","Set","isTreeAnimating","isAnimationBlocked","isLayoutDirty","isProjectionDirty","isSharedProjectionDirty","isTransformDirty","updateManuallyBlocked","updateBlockedByResize","isUpdating","isSVG","needsReset","shouldResetTransform","treeScale","x","y","eventHandlers","Map","hasTreeAnimated","updateScheduled","projectionUpdateScheduled","checkUpdateFailed","clearAllSnapshots","updateProjection","nodes","forEach","propagateDirtyNodes","resolveTargetDelta","calcProjection","cleanDirtyNodes","hasProjected","isVisible","animationProgress","sharedNodes","path","depth","i","length","name","handler","has","set","get","add","subscriptionManager","args","notify","instance","layoutId","layout","current","mount","cancelDelay","resizeUnblockUpdate","hasAnimatedSinceResize","finishAnimation","registerSharedNode","animate","addEventListener","delta","hasLayoutChanged","hasRelativeTargetChanged","newLayout","isTreeAnimationBlocked","target","undefined","relativeTarget","layoutTransition","transition","getDefaultTransition","defaultLayoutTransition","getProps","onLayoutAnimationStart","onLayoutAnimationComplete","targetChanged","targetLayout","hasOnlyRelativeTargetChanged","layoutRoot","resumeFrom","currentAnimation","resumingFrom","setAnimationOrigin","animationOptions","onPlay","onComplete","shouldReduceMotion","startAnimation","isLead","onExitComplete","willUpdate","remove","stack","getStack","delete","isUpdateBlocked","resetSkewAndRotation","transformTemplate","shouldNotifyListeners","window","HandoffCancelAllAnimations","startUpdate","node","updateScroll","getTransformTemplate","prevTransformTemplateValue","updateSnapshot","notifyListeners","updateWasBlocked","unblockUpdate","clearMeasurements","clearIsLayoutDirty","resetTransformStyle","updateLayout","notifyLayoutUpdate","now","timestamp","isProcessing","update","process","preRender","render","read","clearSnapshot","removeLeadSnapshots","postRender","didUpdate","snapshot","measure","alwaysMeasureLayout","prevLayout","layoutCorrected","projectionDelta","layoutBox","phase","needsMeasurement","Boolean","layoutScroll","scroll","isRoot","offset","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","scheduleRender","removeTransform","pageBox","measurePageBox","removeElementScroll","roundBox","measuredBox","source","box","measureViewportBox","boxWithoutScroll","rootScroll","transformOnly","withTransforms","boxWithoutTransform","sourceBox","nodeBox","targetDelta","scheduleUpdateProjection","crossfade","relativeParent","resolvedRelativeTargetAt","forceRecalculation","_a","lead","getLead","isShared","canSkip","attemptToResolveRelativeTarget","getClosestProjectingParent","forceRelativeParentToResolveTarget","relativeTargetOrigin","targetWithTransforms","applyTransform","isProjecting","pendingAnimation","prevTreeScaleX","prevTreeScaleY","projectionTransform","projectionDeltaWithTransform","prevProjectionTransform","notifyAll","snapshotLatestValues","mixedValues","relativeLayout","snapshotSource","layoutSource","isSharedLayoutAnimation","isOnlyMember","members","shouldCrossfadeOpacity","some","hasOpacityCrossfade","prevRelativeTarget","mixTargetDelta","latest","progress","mixAxisDelta","setTargetDelta","mixBox","animationValues","stop","onUpdate","completeAnimation","preserveOpacity","exitAnimationComplete","shouldAnimatePositionOnly","animationType","xLength","min","max","yLength","config","initialPromotionConfig","promote","preserveFollowOpacity","shouldPreserveFollowOpacity","prevLead","setOptions","relegate","hasDistortingTransform","z","rotate","rotateX","rotateY","rotateZ","skewX","skewY","resetValues","styleProp","_b","styles","opacity","pointerEvents","transform","emptyStyles","valuesToRender","applyTransformsToTarget","transformOrigin","origin","opacityExit","correct","applyTo","corrected","num","clear","hasListeners","measuredLayout","axis","axisSnapshot","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onBeforeLayoutMeasure","removeLeadSnapshot","output","p","translate","scale","originPoint","mixAxis","from","to","duration","ease","userAgentContains","string","navigator","userAgent","toLowerCase","includes","roundPoint","Math","round","roundAxis"],"sources":["C:/Users/pvplo/OneDrive/Рабочий стол/editpallav-main/node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs"],"sourcesContent":["import { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength, isNear } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEqualsRounded, isDeltaZero, aspectRatio, boxEquals } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\nimport { delay } from '../../utils/delay.mjs';\nimport { mixNumber } from '../../utils/mix/number.mjs';\nimport { record } from '../../debug/record.mjs';\nimport { isSVGElement } from '../../render/dom/utils/is-svg-element.mjs';\nimport { animateSingleValue } from '../../animation/interfaces/single-value.mjs';\nimport { clamp } from '../../utils/clamp.mjs';\nimport { cancelFrame, frameData, steps, frame } from '../../frameloop/frame.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { time } from '../../frameloop/sync-time.mjs';\nimport { microtask } from '../../frameloop/microtask.mjs';\nimport { getOptimisedAppearId } from '../../animation/optimized-appear/get-appear-id.mjs';\n\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\nconst hiddenVisibility = { visibility: \"hidden\" };\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nlet id = 0;\n/**\n * Use a mutable data object for debug data so as to not create a new\n * object every frame.\n */\nconst projectionFrameData = {\n    type: \"projectionFrame\",\n    totalNodes: 0,\n    resolvedTargetDeltas: 0,\n    recalculatedProjection: 0,\n};\nfunction resetDistortingTransform(key, visualElement, values, sharedAnimationValues) {\n    const { latestValues } = visualElement;\n    // Record the distorting transform and then temporarily set it to 0\n    if (latestValues[key]) {\n        values[key] = latestValues[key];\n        visualElement.setStaticValue(key, 0);\n        if (sharedAnimationValues) {\n            sharedAnimationValues[key] = 0;\n        }\n    }\n}\nfunction isOptimisedAppearTree(projectionNode) {\n    projectionNode.hasCheckedOptimisedAppear = true;\n    if (projectionNode.root === projectionNode)\n        return false;\n    const { visualElement } = projectionNode.options;\n    if (!visualElement) {\n        return false;\n    }\n    else if (getOptimisedAppearId(visualElement)) {\n        return true;\n    }\n    else if (projectionNode.parent &&\n        !projectionNode.parent.hasCheckedOptimisedAppear) {\n        return isOptimisedAppearTree(projectionNode.parent);\n    }\n    else {\n        return false;\n    }\n}\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\n    return class ProjectionNode {\n        constructor(latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {\n            /**\n             * A unique ID generated for every projection node.\n             */\n            this.id = id++;\n            /**\n             * An id that represents a unique session instigated by startUpdate.\n             */\n            this.animationId = 0;\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            /**\n             * Flag to true if we think the projection calculations for this node needs\n             * recalculating as a result of an updated transform or layout animation.\n             */\n            this.isProjectionDirty = false;\n            /**\n             * Flag to true if the layout *or* transform has changed. This then gets propagated\n             * throughout the projection tree, forcing any element below to recalculate on the next frame.\n             */\n            this.isSharedProjectionDirty = false;\n            /**\n             * Flag transform dirty. This gets propagated throughout the whole tree but is only\n             * respected by shared nodes.\n             */\n            this.isTransformDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * Store whether this node has been checked for optimised appear animations. As\n             * effects fire bottom-up, and we want to look up the tree for appear animations,\n             * this makes sure we only check each path once, stopping at nodes that\n             * have already been checked.\n             */\n            this.hasCheckedOptimisedAppear = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            this.hasTreeAnimated = false;\n            // Note: Currently only running on root node\n            this.updateScheduled = false;\n            this.projectionUpdateScheduled = false;\n            this.checkUpdateFailed = () => {\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            /**\n             * This is a multi-step process as shared nodes might be of different depths. Nodes\n             * are sorted by depth order, so we need to resolve the entire tree before moving to\n             * the next step.\n             */\n            this.updateProjection = () => {\n                this.projectionUpdateScheduled = false;\n                /**\n                 * Reset debug counts. Manually resetting rather than creating a new\n                 * object each frame.\n                 */\n                projectionFrameData.totalNodes =\n                    projectionFrameData.resolvedTargetDeltas =\n                        projectionFrameData.recalculatedProjection =\n                            0;\n                this.nodes.forEach(propagateDirtyNodes);\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n                this.nodes.forEach(cleanDirtyNodes);\n                record(projectionFrameData);\n            };\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [...parent.path, parent] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            for (let i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager && subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        /**\n         * Lifecycles\n         */\n        mount(instance, isLayoutDirty = this.root.hasTreeAnimated) {\n            if (this.instance)\n                return;\n            this.isSVG = isSVGElement(instance);\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.current) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            this.parent && this.parent.children.add(this);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let cancelDelay;\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\n                attachResizeListener(instance, () => {\n                    this.root.updateBlockedByResize = true;\n                    cancelDelay && cancelDelay();\n                    cancelDelay = delay(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout, }) => {\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = this.options.transition ||\n                        visualElement.getDefaultTransition() ||\n                        defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    const targetChanged = !this.targetLayout ||\n                        !boxEqualsRounded(this.targetLayout, newLayout) ||\n                        hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (this.options.layoutRoot ||\n                        (this.resumeFrom && this.resumeFrom.instance) ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (targetChanged || !this.currentAnimation))) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        const animationOptions = {\n                            ...getValueTransition(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete,\n                        };\n                        if (visualElement.shouldReduceMotion ||\n                            this.options.layoutRoot) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged) {\n                            finishAnimation(this);\n                        }\n                        if (this.isLead() && this.options.onExitComplete) {\n                            this.options.onExitComplete();\n                        }\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            const stack = this.getStack();\n            stack && stack.remove(this);\n            this.parent && this.parent.children.delete(this);\n            this.instance = undefined;\n            cancelFrame(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            return (this.isAnimationBlocked ||\n                (this.parent && this.parent.isTreeAnimationBlocked()) ||\n                false);\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            this.nodes && this.nodes.forEach(resetSkewAndRotation);\n            this.animationId++;\n        }\n        getTransformTemplate() {\n            const { visualElement } = this.options;\n            return visualElement && visualElement.getProps().transformTemplate;\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            this.root.hasTreeAnimated = true;\n            if (this.root.isUpdateBlocked()) {\n                this.options.onExitComplete && this.options.onExitComplete();\n                return;\n            }\n            /**\n             * If we're running optimised appear animations then these must be\n             * cancelled before measuring the DOM. This is so we can measure\n             * the true layout of the element rather than the WAAPI animation\n             * which will be unaffected by the resetSkewAndRotate step.\n             *\n             * Note: This is a DOM write. Worst case scenario is this is sandwiched\n             * between other snapshot reads which will cause unnecessary style recalculations.\n             * This has to happen here though, as we don't yet know which nodes will need\n             * snapshots in startUpdate(), but we only want to cancel optimised animations\n             * if a layout animation measurement is actually going to be affected by them.\n             */\n            if (window.HandoffCancelAllAnimations &&\n                isOptimisedAppearTree(this)) {\n                window.HandoffCancelAllAnimations();\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                node.updateScroll(\"snapshot\");\n                if (node.options.layoutRoot) {\n                    node.willUpdate(false);\n                }\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout)\n                return;\n            const transformTemplate = this.getTransformTemplate();\n            this.prevTransformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        update() {\n            this.updateScheduled = false;\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating) {\n                this.nodes.forEach(clearIsLayoutDirty);\n            }\n            this.isUpdating = false;\n            /**\n             * Write\n             */\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            /**\n             * Manually flush any pending updates. Ideally\n             * we could leave this to the following requestAnimationFrame but this seems\n             * to leave a flash of incorrectly styled content.\n             */\n            const now = time.now();\n            frameData.delta = clamp(0, 1000 / 60, now - frameData.timestamp);\n            frameData.timestamp = now;\n            frameData.isProcessing = true;\n            steps.update.process(frameData);\n            steps.preRender.process(frameData);\n            steps.render.process(frameData);\n            frameData.isProcessing = false;\n        }\n        didUpdate() {\n            if (!this.updateScheduled) {\n                this.updateScheduled = true;\n                microtask.read(() => this.update());\n            }\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            if (!this.projectionUpdateScheduled) {\n                this.projectionUpdateScheduled = true;\n                frame.preRender(this.updateProjection, false, true);\n            }\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            frame.postRender(() => {\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                }\n                else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */\n        updateSnapshot() {\n            if (this.snapshot || !this.instance)\n                return;\n            this.snapshot = this.measure();\n        }\n        updateLayout() {\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (let i = 0; i < this.path.length; i++) {\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const prevLayout = this.layout;\n            this.layout = this.measure(false);\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\n            const { visualElement } = this.options;\n            visualElement &&\n                visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n        }\n        updateScroll(phase = \"measure\") {\n            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n            if (this.scroll &&\n                this.scroll.animationId === this.root.animationId &&\n                this.scroll.phase === phase) {\n                needsMeasurement = false;\n            }\n            if (needsMeasurement) {\n                this.scroll = {\n                    animationId: this.root.animationId,\n                    phase,\n                    isRoot: checkIsScrollRoot(this.instance),\n                    offset: measureScroll(this.instance),\n                };\n            }\n        }\n        resetTransform() {\n            if (!resetTransform)\n                return;\n            const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplate = this.getTransformTemplate();\n            const transformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure(removeTransform = true) {\n            const pageBox = this.measurePageBox();\n            let layoutBox = this.removeElementScroll(pageBox);\n            /**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */\n            if (removeTransform) {\n                layoutBox = this.removeTransform(layoutBox);\n            }\n            roundBox(layoutBox);\n            return {\n                animationId: this.root.animationId,\n                measuredBox: pageBox,\n                layoutBox,\n                latestValues: {},\n                source: this.id,\n            };\n        }\n        measurePageBox() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return createBox();\n            const box = visualElement.measureViewportBox();\n            // Remove viewport scroll to give page-relative coordinates\n            const { scroll } = this.root;\n            if (scroll) {\n                translateAxis(box.x, scroll.offset.x);\n                translateAxis(box.y, scroll.offset.y);\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            const boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                const { scroll, options } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (scroll.isRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                        const { scroll: rootScroll } = this.root;\n                        /**\n                         * Undo the application of page scroll that was originally added\n                         * to the measured bounding box.\n                         */\n                        if (rootScroll) {\n                            translateAxis(boxWithoutScroll.x, -rootScroll.offset.x);\n                            translateAxis(boxWithoutScroll.y, -rootScroll.offset.y);\n                        }\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll.offset.x);\n                    translateAxis(boxWithoutScroll.y, scroll.offset.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.offset.x,\n                        y: -node.scroll.offset.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            const boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = createBox();\n                const nodeBox = node.measurePageBox();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n            this.isProjectionDirty = true;\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true,\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        forceRelativeParentToResolveTarget() {\n            if (!this.relativeParent)\n                return;\n            /**\n             * If the parent target isn't up-to-date, force it to update.\n             * This is an unfortunate de-optimisation as it means any updating relative\n             * projection will cause all the relative parents to recalculate back\n             * up the tree.\n             */\n            if (this.relativeParent.resolvedRelativeTargetAt !==\n                frameData.timestamp) {\n                this.relativeParent.resolveTargetDelta(true);\n            }\n        }\n        resolveTargetDelta(forceRecalculation = false) {\n            var _a;\n            /**\n             * Once the dirty status of nodes has been spread through the tree, we also\n             * need to check if we have a shared node of a different depth that has itself\n             * been dirtied.\n             */\n            const lead = this.getLead();\n            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n            this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            /**\n             * We don't use transform for this step of processing so we don't\n             * need to check whether any nodes have changed transform.\n             */\n            const canSkip = !(forceRecalculation ||\n                (isShared && this.isSharedProjectionDirty) ||\n                this.isProjectionDirty ||\n                ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty) ||\n                this.attemptToResolveRelativeTarget);\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            this.resolvedRelativeTargetAt = frameData.timestamp;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            if (!this.targetDelta && !this.relativeTarget) {\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    relativeParent.layout &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                this.relativeParent &&\n                this.relativeParent.target) {\n                this.forceRelativeParentToResolveTarget();\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.layoutBox);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.layoutBox);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.layoutBox);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    Boolean(relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !relativeParent.options.layoutScroll &&\n                    relativeParent.target &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * Increase debug counter for resolved target deltas\n             */\n            projectionFrameData.resolvedTargetDeltas++;\n        }\n        getClosestProjectingParent() {\n            if (!this.parent ||\n                hasScale(this.parent.latestValues) ||\n                has2DTranslate(this.parent.latestValues)) {\n                return undefined;\n            }\n            if (this.parent.isProjecting()) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        isProjecting() {\n            return Boolean((this.relativeTarget ||\n                this.targetDelta ||\n                this.options.layoutRoot) &&\n                this.layout);\n        }\n        calcProjection() {\n            var _a;\n            const lead = this.getLead();\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            let canSkip = true;\n            /**\n             * If this is a normal layout animation and neither this node nor its nearest projecting\n             * is dirty then we can't skip.\n             */\n            if (this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If this is a shared layout animation and this node's shared projection is dirty then\n             * we can't skip.\n             */\n            if (isShared &&\n                (this.isSharedProjectionDirty || this.isTransformDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If we have resolved the target this frame we must recalculate the\n             * projection to ensure it visually represents the internal calculations.\n             */\n            if (this.resolvedRelativeTargetAt === frameData.timestamp) {\n                canSkip = false;\n            }\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean((this.parent && this.parent.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n            /**\n             * Record previous tree scales before updating.\n             */\n            const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n            /**\n             * If this layer needs to perform scale correction but doesn't have a target,\n             * use the layout as the target.\n             */\n            if (lead.layout &&\n                !lead.target &&\n                (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {\n                lead.target = lead.layout.layoutBox;\n                lead.targetWithTransforms = createBox();\n            }\n            const { target } = lead;\n            if (!target) {\n                /**\n                 * If we don't have a target to project into, but we were previously\n                 * projecting, we want to remove the stored transform and schedule\n                 * a render to ensure the elements reflect the removed transform.\n                 */\n                if (this.projectionTransform) {\n                    this.projectionDelta = createDelta();\n                    this.projectionTransform = \"none\";\n                    this.scheduleRender();\n                }\n                return;\n            }\n            if (!this.projectionDelta) {\n                this.projectionDelta = createDelta();\n                this.projectionDeltaWithTransform = createDelta();\n            }\n            const prevProjectionTransform = this.projectionTransform;\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n            if (this.projectionTransform !== prevProjectionTransform ||\n                this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n            /**\n             * Increase debug counter for recalculated projections\n             */\n            projectionFrameData.recalculatedProjection++;\n        }\n        hide() {\n            this.isVisible = false;\n            // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n            // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            this.options.scheduleRender && this.options.scheduleRender();\n            if (notifyAll) {\n                const stack = this.getStack();\n                stack && stack.scheduleRender();\n            }\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = snapshot\n                ? snapshot.latestValues\n                : {};\n            const mixedValues = { ...this.latestValues };\n            const targetDelta = createDelta();\n            if (!this.relativeParent ||\n                !this.relativeParent.options.layoutRoot) {\n                this.relativeTarget = this.relativeTargetOrigin = undefined;\n            }\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = createBox();\n            const snapshotSource = snapshot ? snapshot.source : undefined;\n            const layoutSource = this.layout ? this.layout.source : undefined;\n            const isSharedLayoutAnimation = snapshotSource !== layoutSource;\n            const stack = this.getStack();\n            const isOnlyMember = !stack || stack.members.length <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            let prevRelativeTarget;\n            this.mixTargetDelta = (latest) => {\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget &&\n                    this.relativeTargetOrigin &&\n                    this.layout &&\n                    this.relativeParent &&\n                    this.relativeParent.layout) {\n                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                    /**\n                     * If this is an unchanged relative target we can consider the\n                     * projection not dirty.\n                     */\n                    if (prevRelativeTarget &&\n                        boxEquals(this.relativeTarget, prevRelativeTarget)) {\n                        this.isProjectionDirty = false;\n                    }\n                    if (!prevRelativeTarget)\n                        prevRelativeTarget = createBox();\n                    copyBoxInto(prevRelativeTarget, this.relativeTarget);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n        }\n        startAnimation(options) {\n            this.notifyListeners(\"animationStart\");\n            this.currentAnimation && this.currentAnimation.stop();\n            if (this.resumingFrom && this.resumingFrom.currentAnimation) {\n                this.resumingFrom.currentAnimation.stop();\n            }\n            if (this.pendingAnimation) {\n                cancelFrame(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = frame.update(() => {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                this.currentAnimation = animateSingleValue(0, animationTarget, {\n                    ...options,\n                    onUpdate: (latest) => {\n                        this.mixTargetDelta(latest);\n                        options.onUpdate && options.onUpdate(latest);\n                    },\n                    onComplete: () => {\n                        options.onComplete && options.onComplete();\n                        this.completeAnimation();\n                    },\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            const stack = this.getStack();\n            stack && stack.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            if (this.currentAnimation) {\n                this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */\n            if (this !== lead &&\n                this.layout &&\n                layout &&\n                shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n                target = this.target || createBox();\n                const xLength = calcLength(this.layout.layoutBox.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = calcLength(this.layout.layoutBox.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            const config = node.options.initialPromotionConfig;\n            node.promote({\n                transition: config ? config.transition : undefined,\n                preserveFollowOpacity: config && config.shouldPreserveFollowOpacity\n                    ? config.shouldPreserveFollowOpacity(node)\n                    : undefined,\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        }\n        getPrevLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\n            const stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        }\n        resetSkewAndRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return;\n            // If there's no detected skew or rotation values, we can early return without a forced render.\n            let hasDistortingTransform = false;\n            /**\n             * An unrolled check for rotation values. Most elements don't have any rotation and\n             * skipping the nested loop and new object creation is 50% faster.\n             */\n            const { latestValues } = visualElement;\n            if (latestValues.z ||\n                latestValues.rotate ||\n                latestValues.rotateX ||\n                latestValues.rotateY ||\n                latestValues.rotateZ ||\n                latestValues.skewX ||\n                latestValues.skewY) {\n                hasDistortingTransform = true;\n            }\n            // If there's no distorting values, we don't need to do any more.\n            if (!hasDistortingTransform)\n                return;\n            const resetValues = {};\n            if (latestValues.z) {\n                resetDistortingTransform(\"z\", visualElement, resetValues, this.animationValues);\n            }\n            // Check the skew and rotate value of all axes and reset to 0\n            for (let i = 0; i < transformAxes.length; i++) {\n                resetDistortingTransform(`rotate${transformAxes[i]}`, visualElement, resetValues, this.animationValues);\n                resetDistortingTransform(`skew${transformAxes[i]}`, visualElement, resetValues, this.animationValues);\n            }\n            // Force a render of this element to apply the transform with all skews and rotations\n            // set to 0.\n            visualElement.render();\n            // Put back all the values we reset\n            for (const key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n                if (this.animationValues) {\n                    this.animationValues[key] = resetValues[key];\n                }\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        getProjectionStyles(styleProp) {\n            var _a, _b;\n            if (!this.instance || this.isSVG)\n                return undefined;\n            if (!this.isVisible) {\n                return hiddenVisibility;\n            }\n            const styles = {\n                visibility: \"\",\n            };\n            const transformTemplate = this.getTransformTemplate();\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                const emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity =\n                        this.latestValues.opacity !== undefined\n                            ? this.latestValues.opacity\n                            : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            const { x, y } = this.projectionDelta;\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity !== undefined\n                            ? valuesToRender.opacity\n                            : \"\"\n                        : valuesToRender.opacityExit !== undefined\n                            ? valuesToRender.opacityExit\n                            : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (const key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                const { correct, applyTo } = scaleCorrectors[key];\n                /**\n                 * Only apply scale correction to the value if we have an\n                 * active projection transform. Otherwise these values become\n                 * vulnerable to distortion if the element changes size without\n                 * a corresponding layout animation.\n                 */\n                const corrected = styles.transform === \"none\"\n                    ? valuesToRender[key]\n                    : correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for (let i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node) => { var _a; return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop(); });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a;\n    const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        const isShared = snapshot.source !== node.layout.source;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n                /**\n                 * Ensure relative target gets resized and rerendererd\n                 */\n                if (node.relativeTarget && !node.currentAnimation) {\n                    node.isProjectionDirty = true;\n                    node.relativeTarget[axis].max =\n                        node.relativeTarget[axis].min + length;\n                }\n            });\n        }\n        const layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n        const visualDelta = createDelta();\n        if (isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            const relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (relativeParent && !relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n                    const relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n                    if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                    if (relativeParent.options.layoutRoot) {\n                        node.relativeTarget = relativeLayout;\n                        node.relativeTargetOrigin = relativeSnapshot;\n                        node.relativeParent = relativeParent;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged,\n        });\n    }\n    else if (node.isLead()) {\n        const { onExitComplete } = node.options;\n        onExitComplete && onExitComplete();\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n    /**\n     * Increase debug counter for nodes encountered this frame\n     */\n    projectionFrameData.totalNodes++;\n    if (!node.parent)\n        return;\n    /**\n     * If this node isn't projecting, propagate isProjectionDirty. It will have\n     * no performance impact but it will allow the next child that *is* projecting\n     * but *isn't* dirty to just check its parent to see if *any* ancestor needs\n     * correcting.\n     */\n    if (!node.isProjecting()) {\n        node.isProjectionDirty = node.parent.isProjectionDirty;\n    }\n    /**\n     * Propagate isSharedProjectionDirty and isTransformDirty\n     * throughout the whole tree. A future revision can take another look at\n     * this but for safety we still recalcualte shared nodes.\n     */\n    node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty ||\n        node.parent.isProjectionDirty ||\n        node.parent.isSharedProjectionDirty));\n    node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);\n}\nfunction cleanDirtyNodes(node) {\n    node.isProjectionDirty =\n        node.isSharedProjectionDirty =\n            node.isTransformDirty =\n                false;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction clearIsLayoutDirty(node) {\n    node.isLayoutDirty = false;\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n    node.isProjectionDirty = true;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetSkewAndRotation(node) {\n    node.resetSkewAndRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mixNumber(delta.translate, 0, p);\n    output.scale = mixNumber(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mixNumber(from.min, to.min, p);\n    output.max = mixNumber(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nconst userAgentContains = (string) => typeof navigator !== \"undefined\" &&\n    navigator.userAgent &&\n    navigator.userAgent.toLowerCase().includes(string);\n/**\n * Measured bounding boxes must be rounded in Safari and\n * left untouched in Chrome, otherwise non-integer layouts within scaled-up elements\n * can appear to jump.\n */\nconst roundPoint = userAgentContains(\"applewebkit/\") && !userAgentContains(\"chrome/\")\n    ? Math.round\n    : noop;\nfunction roundAxis(axis) {\n    // Round to the nearest .5 pixels to support subpixel layouts\n    axis.min = roundPoint(axis.min);\n    axis.max = roundPoint(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return (animationType === \"position\" ||\n        (animationType === \"preserve-aspect\" &&\n            !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2)));\n}\n\nexport { cleanDirtyNodes, createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}