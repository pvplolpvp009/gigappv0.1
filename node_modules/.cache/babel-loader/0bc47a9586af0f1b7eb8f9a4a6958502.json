{"ast":null,"code":"import _objectSpread from \"C:/Users/pvplo/OneDrive/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/editpallav-main/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"C:/Users/pvplo/OneDrive/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/editpallav-main/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _toConsumableArray from \"C:/Users/pvplo/OneDrive/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/editpallav-main/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nvar _excluded = [\"transition\", \"transitionEnd\"];\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { isKeyframesTarget } from '../../animation/utils/is-keyframes-target.mjs';\nimport { shallowCompare } from '../../utils/shallow-compare.mjs';\nimport { isVariantLabel } from './is-variant-label.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\nimport { variantPriorityOrder } from './variant-props.mjs';\nimport { animateVisualElement } from '../../animation/interfaces/visual-element.mjs';\n\nvar reversePriorityOrder = _toConsumableArray(variantPriorityOrder).reverse();\n\nvar numAnimationTypes = variantPriorityOrder.length;\n\nfunction animateList(visualElement) {\n  return function (animations) {\n    return Promise.all(animations.map(function (_ref) {\n      var animation = _ref.animation,\n          options = _ref.options;\n      return animateVisualElement(visualElement, animation, options);\n    }));\n  };\n}\n\nfunction createAnimationState(visualElement) {\n  var animate = animateList(visualElement);\n  var state = createState();\n  var isInitialRender = true;\n  /**\n   * This function will be used to reduce the animation definitions for\n   * each active animation type into an object of resolved values for it.\n   */\n\n  var buildResolvedTypeValues = function buildResolvedTypeValues(type) {\n    return function (acc, definition) {\n      var _a;\n\n      var resolved = resolveVariant(visualElement, definition, type === \"exit\" ? (_a = visualElement.presenceContext) === null || _a === void 0 ? void 0 : _a.custom : undefined);\n\n      if (resolved) {\n        var transition = resolved.transition,\n            transitionEnd = resolved.transitionEnd,\n            target = _objectWithoutProperties(resolved, _excluded);\n\n        acc = _objectSpread(_objectSpread(_objectSpread({}, acc), target), transitionEnd);\n      }\n\n      return acc;\n    };\n  };\n  /**\n   * This just allows us to inject mocked animation functions\n   * @internal\n   */\n\n\n  function setAnimateFunction(makeAnimator) {\n    animate = makeAnimator(visualElement);\n  }\n  /**\n   * When we receive new props, we need to:\n   * 1. Create a list of protected keys for each type. This is a directory of\n   *    value keys that are currently being \"handled\" by types of a higher priority\n   *    so that whenever an animation is played of a given type, these values are\n   *    protected from being animated.\n   * 2. Determine if an animation type needs animating.\n   * 3. Determine if any values have been removed from a type and figure out\n   *    what to animate those to.\n   */\n\n\n  function animateChanges(changedActiveType) {\n    var props = visualElement.getProps();\n    var context = visualElement.getVariantContext(true) || {};\n    /**\n     * A list of animations that we'll build into as we iterate through the animation\n     * types. This will get executed at the end of the function.\n     */\n\n    var animations = [];\n    /**\n     * Keep track of which values have been removed. Then, as we hit lower priority\n     * animation types, we can check if they contain removed values and animate to that.\n     */\n\n    var removedKeys = new Set();\n    /**\n     * A dictionary of all encountered keys. This is an object to let us build into and\n     * copy it without iteration. Each time we hit an animation type we set its protected\n     * keys - the keys its not allowed to animate - to the latest version of this object.\n     */\n\n    var encounteredKeys = {};\n    /**\n     * If a variant has been removed at a given index, and this component is controlling\n     * variant animations, we want to ensure lower-priority variants are forced to animate.\n     */\n\n    var removedVariantIndex = Infinity;\n    /**\n     * Iterate through all animation types in reverse priority order. For each, we want to\n     * detect which values it's handling and whether or not they've changed (and therefore\n     * need to be animated). If any values have been removed, we want to detect those in\n     * lower priority props and flag for animation.\n     */\n\n    var _loop = function _loop(i) {\n      var type = reversePriorityOrder[i];\n      var typeState = state[type];\n      var prop = props[type] !== undefined ? props[type] : context[type];\n      var propIsVariant = isVariantLabel(prop);\n      /**\n       * If this type has *just* changed isActive status, set activeDelta\n       * to that status. Otherwise set to null.\n       */\n\n      var activeDelta = type === changedActiveType ? typeState.isActive : null;\n      if (activeDelta === false) removedVariantIndex = i;\n      /**\n       * If this prop is an inherited variant, rather than been set directly on the\n       * component itself, we want to make sure we allow the parent to trigger animations.\n       *\n       * TODO: Can probably change this to a !isControllingVariants check\n       */\n\n      var isInherited = prop === context[type] && prop !== props[type] && propIsVariant;\n      /**\n       *\n       */\n\n      if (isInherited && isInitialRender && visualElement.manuallyAnimateOnMount) {\n        isInherited = false;\n      }\n      /**\n       * Set all encountered keys so far as the protected keys for this type. This will\n       * be any key that has been animated or otherwise handled by active, higher-priortiy types.\n       */\n\n\n      typeState.protectedKeys = _objectSpread({}, encounteredKeys); // Check if we can skip analysing this prop early\n\n      if ( // If it isn't active and hasn't *just* been set as inactive\n      !typeState.isActive && activeDelta === null || // If we didn't and don't have any defined prop for this animation type\n      !prop && !typeState.prevProp || // Or if the prop doesn't define an animation\n      isAnimationControls(prop) || typeof prop === \"boolean\") {\n        return \"continue\";\n      }\n      /**\n       * As we go look through the values defined on this type, if we detect\n       * a changed value or a value that was removed in a higher priority, we set\n       * this to true and add this prop to the animation list.\n       */\n\n\n      var variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);\n      var shouldAnimateType = variantDidChange || // If we're making this variant active, we want to always make it active\n      type === changedActiveType && typeState.isActive && !isInherited && propIsVariant || // If we removed a higher-priority variant (i is in reverse order)\n      i > removedVariantIndex && propIsVariant;\n      var handledRemovedValues = false;\n      /**\n       * As animations can be set as variant lists, variants or target objects, we\n       * coerce everything to an array if it isn't one already\n       */\n\n      var definitionList = Array.isArray(prop) ? prop : [prop];\n      /**\n       * Build an object of all the resolved values. We'll use this in the subsequent\n       * animateChanges calls to determine whether a value has changed.\n       */\n\n      var resolvedValues = definitionList.reduce(buildResolvedTypeValues(type), {});\n      if (activeDelta === false) resolvedValues = {};\n      /**\n       * Now we need to loop through all the keys in the prev prop and this prop,\n       * and decide:\n       * 1. If the value has changed, and needs animating\n       * 2. If it has been removed, and needs adding to the removedKeys set\n       * 3. If it has been removed in a higher priority type and needs animating\n       * 4. If it hasn't been removed in a higher priority but hasn't changed, and\n       *    needs adding to the type's protectedKeys list.\n       */\n\n      var _typeState$prevResolv = typeState.prevResolvedValues,\n          prevResolvedValues = _typeState$prevResolv === void 0 ? {} : _typeState$prevResolv;\n\n      var allKeys = _objectSpread(_objectSpread({}, prevResolvedValues), resolvedValues);\n\n      var markToAnimate = function markToAnimate(key) {\n        shouldAnimateType = true;\n\n        if (removedKeys.has(key)) {\n          handledRemovedValues = true;\n          removedKeys.delete(key);\n        }\n\n        typeState.needsAnimating[key] = true;\n        var motionValue = visualElement.getValue(key);\n        if (motionValue) motionValue.liveStyle = false;\n      };\n\n      for (var key in allKeys) {\n        var next = resolvedValues[key];\n        var prev = prevResolvedValues[key]; // If we've already handled this we can just skip ahead\n\n        if (encounteredKeys.hasOwnProperty(key)) continue;\n        /**\n         * If the value has changed, we probably want to animate it.\n         */\n\n        var valueHasChanged = false;\n\n        if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {\n          valueHasChanged = !shallowCompare(next, prev);\n        } else {\n          valueHasChanged = next !== prev;\n        }\n\n        if (valueHasChanged) {\n          if (next !== undefined && next !== null) {\n            // If next is defined and doesn't equal prev, it needs animating\n            markToAnimate(key);\n          } else {\n            // If it's undefined, it's been removed.\n            removedKeys.add(key);\n          }\n        } else if (next !== undefined && removedKeys.has(key)) {\n          /**\n           * If next hasn't changed and it isn't undefined, we want to check if it's\n           * been removed by a higher priority\n           */\n          markToAnimate(key);\n        } else {\n          /**\n           * If it hasn't changed, we add it to the list of protected values\n           * to ensure it doesn't get animated.\n           */\n          typeState.protectedKeys[key] = true;\n        }\n      }\n      /**\n       * Update the typeState so next time animateChanges is called we can compare the\n       * latest prop and resolvedValues to these.\n       */\n\n\n      typeState.prevProp = prop;\n      typeState.prevResolvedValues = resolvedValues;\n      /**\n       *\n       */\n\n      if (typeState.isActive) {\n        encounteredKeys = _objectSpread(_objectSpread({}, encounteredKeys), resolvedValues);\n      }\n\n      if (isInitialRender && visualElement.blockInitialAnimation) {\n        shouldAnimateType = false;\n      }\n      /**\n       * If this is an inherited prop we want to hard-block animations\n       */\n\n\n      if (shouldAnimateType && (!isInherited || handledRemovedValues)) {\n        animations.push.apply(animations, _toConsumableArray(definitionList.map(function (animation) {\n          return {\n            animation: animation,\n            options: {\n              type: type\n            }\n          };\n        })));\n      }\n    };\n\n    for (var i = 0; i < numAnimationTypes; i++) {\n      var _ret = _loop(i);\n\n      if (_ret === \"continue\") continue;\n    }\n    /**\n     * If there are some removed value that haven't been dealt with,\n     * we need to create a new animation that falls back either to the value\n     * defined in the style prop, or the last read value.\n     */\n\n\n    if (removedKeys.size) {\n      var fallbackAnimation = {};\n      removedKeys.forEach(function (key) {\n        var fallbackTarget = visualElement.getBaseTarget(key);\n        var motionValue = visualElement.getValue(key);\n        if (motionValue) motionValue.liveStyle = true; // @ts-expect-error - @mattgperry to figure if we should do something here\n\n        fallbackAnimation[key] = fallbackTarget !== null && fallbackTarget !== void 0 ? fallbackTarget : null;\n      });\n      animations.push({\n        animation: fallbackAnimation\n      });\n    }\n\n    var shouldAnimate = Boolean(animations.length);\n\n    if (isInitialRender && (props.initial === false || props.initial === props.animate) && !visualElement.manuallyAnimateOnMount) {\n      shouldAnimate = false;\n    }\n\n    isInitialRender = false;\n    return shouldAnimate ? animate(animations) : Promise.resolve();\n  }\n  /**\n   * Change whether a certain animation type is active.\n   */\n\n\n  function setActive(type, isActive) {\n    var _a; // If the active state hasn't changed, we can safely do nothing here\n\n\n    if (state[type].isActive === isActive) return Promise.resolve(); // Propagate active change to children\n\n    (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach(function (child) {\n      var _a;\n\n      return (_a = child.animationState) === null || _a === void 0 ? void 0 : _a.setActive(type, isActive);\n    });\n    state[type].isActive = isActive;\n    var animations = animateChanges(type);\n\n    for (var key in state) {\n      state[key].protectedKeys = {};\n    }\n\n    return animations;\n  }\n\n  return {\n    animateChanges: animateChanges,\n    setActive: setActive,\n    setAnimateFunction: setAnimateFunction,\n    getState: function getState() {\n      return state;\n    }\n  };\n}\n\nfunction checkVariantsDidChange(prev, next) {\n  if (typeof next === \"string\") {\n    return next !== prev;\n  } else if (Array.isArray(next)) {\n    return !shallowCompare(next, prev);\n  }\n\n  return false;\n}\n\nfunction createTypeState() {\n  var isActive = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  return {\n    isActive: isActive,\n    protectedKeys: {},\n    needsAnimating: {},\n    prevResolvedValues: {}\n  };\n}\n\nfunction createState() {\n  return {\n    animate: createTypeState(true),\n    whileInView: createTypeState(),\n    whileHover: createTypeState(),\n    whileTap: createTypeState(),\n    whileDrag: createTypeState(),\n    whileFocus: createTypeState(),\n    exit: createTypeState()\n  };\n}\n\nexport { checkVariantsDidChange, createAnimationState };","map":{"version":3,"names":["isAnimationControls","isKeyframesTarget","shallowCompare","isVariantLabel","resolveVariant","variantPriorityOrder","animateVisualElement","reversePriorityOrder","reverse","numAnimationTypes","length","animateList","visualElement","animations","Promise","all","map","animation","options","createAnimationState","animate","state","createState","isInitialRender","buildResolvedTypeValues","type","acc","definition","_a","resolved","presenceContext","custom","undefined","transition","transitionEnd","target","setAnimateFunction","makeAnimator","animateChanges","changedActiveType","props","getProps","context","getVariantContext","removedKeys","Set","encounteredKeys","removedVariantIndex","Infinity","i","typeState","prop","propIsVariant","activeDelta","isActive","isInherited","manuallyAnimateOnMount","protectedKeys","prevProp","variantDidChange","checkVariantsDidChange","shouldAnimateType","handledRemovedValues","definitionList","Array","isArray","resolvedValues","reduce","prevResolvedValues","allKeys","markToAnimate","key","has","delete","needsAnimating","motionValue","getValue","liveStyle","next","prev","hasOwnProperty","valueHasChanged","add","blockInitialAnimation","push","size","fallbackAnimation","forEach","fallbackTarget","getBaseTarget","shouldAnimate","Boolean","initial","resolve","setActive","variantChildren","child","animationState","getState","createTypeState","whileInView","whileHover","whileTap","whileDrag","whileFocus","exit"],"sources":["C:/Users/pvplo/OneDrive/Рабочий стол/editpallav-main/node_modules/framer-motion/dist/es/render/utils/animation-state.mjs"],"sourcesContent":["import { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { isKeyframesTarget } from '../../animation/utils/is-keyframes-target.mjs';\nimport { shallowCompare } from '../../utils/shallow-compare.mjs';\nimport { isVariantLabel } from './is-variant-label.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\nimport { variantPriorityOrder } from './variant-props.mjs';\nimport { animateVisualElement } from '../../animation/interfaces/visual-element.mjs';\n\nconst reversePriorityOrder = [...variantPriorityOrder].reverse();\nconst numAnimationTypes = variantPriorityOrder.length;\nfunction animateList(visualElement) {\n    return (animations) => Promise.all(animations.map(({ animation, options }) => animateVisualElement(visualElement, animation, options)));\n}\nfunction createAnimationState(visualElement) {\n    let animate = animateList(visualElement);\n    const state = createState();\n    let isInitialRender = true;\n    /**\n     * This function will be used to reduce the animation definitions for\n     * each active animation type into an object of resolved values for it.\n     */\n    const buildResolvedTypeValues = (type) => (acc, definition) => {\n        var _a;\n        const resolved = resolveVariant(visualElement, definition, type === \"exit\"\n            ? (_a = visualElement.presenceContext) === null || _a === void 0 ? void 0 : _a.custom\n            : undefined);\n        if (resolved) {\n            const { transition, transitionEnd, ...target } = resolved;\n            acc = { ...acc, ...target, ...transitionEnd };\n        }\n        return acc;\n    };\n    /**\n     * This just allows us to inject mocked animation functions\n     * @internal\n     */\n    function setAnimateFunction(makeAnimator) {\n        animate = makeAnimator(visualElement);\n    }\n    /**\n     * When we receive new props, we need to:\n     * 1. Create a list of protected keys for each type. This is a directory of\n     *    value keys that are currently being \"handled\" by types of a higher priority\n     *    so that whenever an animation is played of a given type, these values are\n     *    protected from being animated.\n     * 2. Determine if an animation type needs animating.\n     * 3. Determine if any values have been removed from a type and figure out\n     *    what to animate those to.\n     */\n    function animateChanges(changedActiveType) {\n        const props = visualElement.getProps();\n        const context = visualElement.getVariantContext(true) || {};\n        /**\n         * A list of animations that we'll build into as we iterate through the animation\n         * types. This will get executed at the end of the function.\n         */\n        const animations = [];\n        /**\n         * Keep track of which values have been removed. Then, as we hit lower priority\n         * animation types, we can check if they contain removed values and animate to that.\n         */\n        const removedKeys = new Set();\n        /**\n         * A dictionary of all encountered keys. This is an object to let us build into and\n         * copy it without iteration. Each time we hit an animation type we set its protected\n         * keys - the keys its not allowed to animate - to the latest version of this object.\n         */\n        let encounteredKeys = {};\n        /**\n         * If a variant has been removed at a given index, and this component is controlling\n         * variant animations, we want to ensure lower-priority variants are forced to animate.\n         */\n        let removedVariantIndex = Infinity;\n        /**\n         * Iterate through all animation types in reverse priority order. For each, we want to\n         * detect which values it's handling and whether or not they've changed (and therefore\n         * need to be animated). If any values have been removed, we want to detect those in\n         * lower priority props and flag for animation.\n         */\n        for (let i = 0; i < numAnimationTypes; i++) {\n            const type = reversePriorityOrder[i];\n            const typeState = state[type];\n            const prop = props[type] !== undefined\n                ? props[type]\n                : context[type];\n            const propIsVariant = isVariantLabel(prop);\n            /**\n             * If this type has *just* changed isActive status, set activeDelta\n             * to that status. Otherwise set to null.\n             */\n            const activeDelta = type === changedActiveType ? typeState.isActive : null;\n            if (activeDelta === false)\n                removedVariantIndex = i;\n            /**\n             * If this prop is an inherited variant, rather than been set directly on the\n             * component itself, we want to make sure we allow the parent to trigger animations.\n             *\n             * TODO: Can probably change this to a !isControllingVariants check\n             */\n            let isInherited = prop === context[type] &&\n                prop !== props[type] &&\n                propIsVariant;\n            /**\n             *\n             */\n            if (isInherited &&\n                isInitialRender &&\n                visualElement.manuallyAnimateOnMount) {\n                isInherited = false;\n            }\n            /**\n             * Set all encountered keys so far as the protected keys for this type. This will\n             * be any key that has been animated or otherwise handled by active, higher-priortiy types.\n             */\n            typeState.protectedKeys = { ...encounteredKeys };\n            // Check if we can skip analysing this prop early\n            if (\n            // If it isn't active and hasn't *just* been set as inactive\n            (!typeState.isActive && activeDelta === null) ||\n                // If we didn't and don't have any defined prop for this animation type\n                (!prop && !typeState.prevProp) ||\n                // Or if the prop doesn't define an animation\n                isAnimationControls(prop) ||\n                typeof prop === \"boolean\") {\n                continue;\n            }\n            /**\n             * As we go look through the values defined on this type, if we detect\n             * a changed value or a value that was removed in a higher priority, we set\n             * this to true and add this prop to the animation list.\n             */\n            const variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);\n            let shouldAnimateType = variantDidChange ||\n                // If we're making this variant active, we want to always make it active\n                (type === changedActiveType &&\n                    typeState.isActive &&\n                    !isInherited &&\n                    propIsVariant) ||\n                // If we removed a higher-priority variant (i is in reverse order)\n                (i > removedVariantIndex && propIsVariant);\n            let handledRemovedValues = false;\n            /**\n             * As animations can be set as variant lists, variants or target objects, we\n             * coerce everything to an array if it isn't one already\n             */\n            const definitionList = Array.isArray(prop) ? prop : [prop];\n            /**\n             * Build an object of all the resolved values. We'll use this in the subsequent\n             * animateChanges calls to determine whether a value has changed.\n             */\n            let resolvedValues = definitionList.reduce(buildResolvedTypeValues(type), {});\n            if (activeDelta === false)\n                resolvedValues = {};\n            /**\n             * Now we need to loop through all the keys in the prev prop and this prop,\n             * and decide:\n             * 1. If the value has changed, and needs animating\n             * 2. If it has been removed, and needs adding to the removedKeys set\n             * 3. If it has been removed in a higher priority type and needs animating\n             * 4. If it hasn't been removed in a higher priority but hasn't changed, and\n             *    needs adding to the type's protectedKeys list.\n             */\n            const { prevResolvedValues = {} } = typeState;\n            const allKeys = {\n                ...prevResolvedValues,\n                ...resolvedValues,\n            };\n            const markToAnimate = (key) => {\n                shouldAnimateType = true;\n                if (removedKeys.has(key)) {\n                    handledRemovedValues = true;\n                    removedKeys.delete(key);\n                }\n                typeState.needsAnimating[key] = true;\n                const motionValue = visualElement.getValue(key);\n                if (motionValue)\n                    motionValue.liveStyle = false;\n            };\n            for (const key in allKeys) {\n                const next = resolvedValues[key];\n                const prev = prevResolvedValues[key];\n                // If we've already handled this we can just skip ahead\n                if (encounteredKeys.hasOwnProperty(key))\n                    continue;\n                /**\n                 * If the value has changed, we probably want to animate it.\n                 */\n                let valueHasChanged = false;\n                if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {\n                    valueHasChanged = !shallowCompare(next, prev);\n                }\n                else {\n                    valueHasChanged = next !== prev;\n                }\n                if (valueHasChanged) {\n                    if (next !== undefined && next !== null) {\n                        // If next is defined and doesn't equal prev, it needs animating\n                        markToAnimate(key);\n                    }\n                    else {\n                        // If it's undefined, it's been removed.\n                        removedKeys.add(key);\n                    }\n                }\n                else if (next !== undefined && removedKeys.has(key)) {\n                    /**\n                     * If next hasn't changed and it isn't undefined, we want to check if it's\n                     * been removed by a higher priority\n                     */\n                    markToAnimate(key);\n                }\n                else {\n                    /**\n                     * If it hasn't changed, we add it to the list of protected values\n                     * to ensure it doesn't get animated.\n                     */\n                    typeState.protectedKeys[key] = true;\n                }\n            }\n            /**\n             * Update the typeState so next time animateChanges is called we can compare the\n             * latest prop and resolvedValues to these.\n             */\n            typeState.prevProp = prop;\n            typeState.prevResolvedValues = resolvedValues;\n            /**\n             *\n             */\n            if (typeState.isActive) {\n                encounteredKeys = { ...encounteredKeys, ...resolvedValues };\n            }\n            if (isInitialRender && visualElement.blockInitialAnimation) {\n                shouldAnimateType = false;\n            }\n            /**\n             * If this is an inherited prop we want to hard-block animations\n             */\n            if (shouldAnimateType && (!isInherited || handledRemovedValues)) {\n                animations.push(...definitionList.map((animation) => ({\n                    animation: animation,\n                    options: { type },\n                })));\n            }\n        }\n        /**\n         * If there are some removed value that haven't been dealt with,\n         * we need to create a new animation that falls back either to the value\n         * defined in the style prop, or the last read value.\n         */\n        if (removedKeys.size) {\n            const fallbackAnimation = {};\n            removedKeys.forEach((key) => {\n                const fallbackTarget = visualElement.getBaseTarget(key);\n                const motionValue = visualElement.getValue(key);\n                if (motionValue)\n                    motionValue.liveStyle = true;\n                // @ts-expect-error - @mattgperry to figure if we should do something here\n                fallbackAnimation[key] = fallbackTarget !== null && fallbackTarget !== void 0 ? fallbackTarget : null;\n            });\n            animations.push({ animation: fallbackAnimation });\n        }\n        let shouldAnimate = Boolean(animations.length);\n        if (isInitialRender &&\n            (props.initial === false || props.initial === props.animate) &&\n            !visualElement.manuallyAnimateOnMount) {\n            shouldAnimate = false;\n        }\n        isInitialRender = false;\n        return shouldAnimate ? animate(animations) : Promise.resolve();\n    }\n    /**\n     * Change whether a certain animation type is active.\n     */\n    function setActive(type, isActive) {\n        var _a;\n        // If the active state hasn't changed, we can safely do nothing here\n        if (state[type].isActive === isActive)\n            return Promise.resolve();\n        // Propagate active change to children\n        (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach((child) => { var _a; return (_a = child.animationState) === null || _a === void 0 ? void 0 : _a.setActive(type, isActive); });\n        state[type].isActive = isActive;\n        const animations = animateChanges(type);\n        for (const key in state) {\n            state[key].protectedKeys = {};\n        }\n        return animations;\n    }\n    return {\n        animateChanges,\n        setActive,\n        setAnimateFunction,\n        getState: () => state,\n    };\n}\nfunction checkVariantsDidChange(prev, next) {\n    if (typeof next === \"string\") {\n        return next !== prev;\n    }\n    else if (Array.isArray(next)) {\n        return !shallowCompare(next, prev);\n    }\n    return false;\n}\nfunction createTypeState(isActive = false) {\n    return {\n        isActive,\n        protectedKeys: {},\n        needsAnimating: {},\n        prevResolvedValues: {},\n    };\n}\nfunction createState() {\n    return {\n        animate: createTypeState(true),\n        whileInView: createTypeState(),\n        whileHover: createTypeState(),\n        whileTap: createTypeState(),\n        whileDrag: createTypeState(),\n        whileFocus: createTypeState(),\n        exit: createTypeState(),\n    };\n}\n\nexport { checkVariantsDidChange, createAnimationState };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}