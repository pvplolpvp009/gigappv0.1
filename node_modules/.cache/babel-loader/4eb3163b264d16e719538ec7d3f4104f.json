{"ast":null,"code":"import _toConsumableArray from \"C:/Users/pvplo/OneDrive/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/editpallav-main/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { jsx, Fragment } from 'react/jsx-runtime';\nimport { useContext, useRef, cloneElement, Children, isValidElement } from 'react';\nimport { useForceUpdate } from '../../utils/use-force-update.mjs';\nimport { useIsMounted } from '../../utils/use-is-mounted.mjs';\nimport { PresenceChild } from './PresenceChild.mjs';\nimport { LayoutGroupContext } from '../../context/LayoutGroupContext.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { useUnmountEffect } from '../../utils/use-unmount-effect.mjs';\nimport { invariant } from '../../utils/errors.mjs';\n\nvar getChildKey = function getChildKey(child) {\n  return child.key || \"\";\n};\n\nfunction updateChildLookup(children, allChildren) {\n  children.forEach(function (child) {\n    var key = getChildKey(child);\n    allChildren.set(key, child);\n  });\n}\n\nfunction onlyElements(children) {\n  var filtered = []; // We use forEach here instead of map as map mutates the component key by preprending `.$`\n\n  Children.forEach(children, function (child) {\n    if (isValidElement(child)) filtered.push(child);\n  });\n  return filtered;\n}\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */\n\n\nvar AnimatePresence = function AnimatePresence(_ref) {\n  var children = _ref.children,\n      custom = _ref.custom,\n      _ref$initial = _ref.initial,\n      initial = _ref$initial === void 0 ? true : _ref$initial,\n      onExitComplete = _ref.onExitComplete,\n      exitBeforeEnter = _ref.exitBeforeEnter,\n      _ref$presenceAffectsL = _ref.presenceAffectsLayout,\n      presenceAffectsLayout = _ref$presenceAffectsL === void 0 ? true : _ref$presenceAffectsL,\n      _ref$mode = _ref.mode,\n      mode = _ref$mode === void 0 ? \"sync\" : _ref$mode;\n  invariant(!exitBeforeEnter, \"Replace exitBeforeEnter with mode='wait'\"); // We want to force a re-render once all exiting animations have finished. We\n  // either use a local forceRender function, or one from a parent context if it exists.\n\n  var forceRender = useContext(LayoutGroupContext).forceRender || useForceUpdate()[0];\n  var isMounted = useIsMounted(); // Filter out any children that aren't ReactElements. We can only track ReactElements with a props.key\n\n  var filteredChildren = onlyElements(children);\n  var childrenToRender = filteredChildren;\n  var exitingChildren = useRef(new Map()).current; // Keep a living record of the children we're actually rendering so we\n  // can diff to figure out which are entering and exiting\n\n  var presentChildren = useRef(childrenToRender); // A lookup table to quickly reference components by key\n\n  var allChildren = useRef(new Map()).current; // If this is the initial component render, just deal with logic surrounding whether\n  // we play onMount animations or not.\n\n  var isInitialRender = useRef(true);\n  useIsomorphicLayoutEffect(function () {\n    isInitialRender.current = false;\n    updateChildLookup(filteredChildren, allChildren);\n    presentChildren.current = childrenToRender;\n  });\n  useUnmountEffect(function () {\n    isInitialRender.current = true;\n    allChildren.clear();\n    exitingChildren.clear();\n  });\n\n  if (isInitialRender.current) {\n    return jsx(Fragment, {\n      children: childrenToRender.map(function (child) {\n        return jsx(PresenceChild, {\n          isPresent: true,\n          initial: initial ? undefined : false,\n          presenceAffectsLayout: presenceAffectsLayout,\n          mode: mode,\n          children: child\n        }, getChildKey(child));\n      })\n    });\n  } // If this is a subsequent render, deal with entering and exiting children\n\n\n  childrenToRender = _toConsumableArray(childrenToRender); // Diff the keys of the currently-present and target children to update our\n  // exiting list.\n\n  var presentKeys = presentChildren.current.map(getChildKey);\n  var targetKeys = filteredChildren.map(getChildKey); // Diff the present children with our target children and mark those that are exiting\n\n  var numPresent = presentKeys.length;\n\n  for (var i = 0; i < numPresent; i++) {\n    var key = presentKeys[i];\n\n    if (targetKeys.indexOf(key) === -1 && !exitingChildren.has(key)) {\n      exitingChildren.set(key, undefined);\n    }\n  } // If we currently have exiting children, and we're deferring rendering incoming children\n  // until after all current children have exiting, empty the childrenToRender array\n\n\n  if (mode === \"wait\" && exitingChildren.size) {\n    childrenToRender = [];\n  } // Loop through all currently exiting components and clone them to overwrite `animate`\n  // with any `exit` prop they might have defined.\n\n\n  exitingChildren.forEach(function (component, key) {\n    // If this component is actually entering again, early return\n    if (targetKeys.indexOf(key) !== -1) return;\n    var child = allChildren.get(key);\n    if (!child) return;\n    var insertionIndex = presentKeys.indexOf(key);\n    var exitingComponent = component;\n\n    if (!exitingComponent) {\n      var onExit = function onExit() {\n        // clean up the exiting children map\n        exitingChildren.delete(key); // compute the keys of children that were rendered once but are no longer present\n        // this could happen in case of too many fast consequent renderings\n        // @link https://github.com/framer/motion/issues/2023\n\n        var leftOverKeys = Array.from(allChildren.keys()).filter(function (childKey) {\n          return !targetKeys.includes(childKey);\n        }); // clean up the all children map\n\n        leftOverKeys.forEach(function (leftOverKey) {\n          return allChildren.delete(leftOverKey);\n        }); // make sure to render only the children that are actually visible\n\n        presentChildren.current = filteredChildren.filter(function (presentChild) {\n          var presentChildKey = getChildKey(presentChild);\n          return (// filter out the node exiting\n            presentChildKey === key || // filter out the leftover children\n            leftOverKeys.includes(presentChildKey)\n          );\n        }); // Defer re-rendering until all exiting children have indeed left\n\n        if (!exitingChildren.size) {\n          if (isMounted.current === false) return;\n          forceRender();\n          onExitComplete && onExitComplete();\n        }\n      };\n\n      exitingComponent = jsx(PresenceChild, {\n        isPresent: false,\n        onExitComplete: onExit,\n        custom: custom,\n        presenceAffectsLayout: presenceAffectsLayout,\n        mode: mode,\n        children: child\n      }, getChildKey(child));\n      exitingChildren.set(key, exitingComponent);\n    }\n\n    childrenToRender.splice(insertionIndex, 0, exitingComponent);\n  }); // Add `MotionContext` even to children that don't need it to ensure we're rendering\n  // the same tree between renders\n\n  childrenToRender = childrenToRender.map(function (child) {\n    var key = child.key;\n    return exitingChildren.has(key) ? child : jsx(PresenceChild, {\n      isPresent: true,\n      presenceAffectsLayout: presenceAffectsLayout,\n      mode: mode,\n      children: child\n    }, getChildKey(child));\n  });\n\n  if (process.env.NODE_ENV !== \"production\" && mode === \"wait\" && childrenToRender.length > 1) {\n    console.warn(\"You're attempting to animate multiple children within AnimatePresence, but its mode is set to \\\"wait\\\". This will lead to odd visual behaviour.\");\n  }\n\n  return jsx(Fragment, {\n    children: exitingChildren.size ? childrenToRender : childrenToRender.map(function (child) {\n      return cloneElement(child);\n    })\n  });\n};\n\nexport { AnimatePresence };","map":{"version":3,"names":["jsx","Fragment","useContext","useRef","cloneElement","Children","isValidElement","useForceUpdate","useIsMounted","PresenceChild","LayoutGroupContext","useIsomorphicLayoutEffect","useUnmountEffect","invariant","getChildKey","child","key","updateChildLookup","children","allChildren","forEach","set","onlyElements","filtered","push","AnimatePresence","custom","initial","onExitComplete","exitBeforeEnter","presenceAffectsLayout","mode","forceRender","isMounted","filteredChildren","childrenToRender","exitingChildren","Map","current","presentChildren","isInitialRender","clear","map","isPresent","undefined","presentKeys","targetKeys","numPresent","length","i","indexOf","has","size","component","get","insertionIndex","exitingComponent","onExit","delete","leftOverKeys","Array","from","keys","filter","childKey","includes","leftOverKey","presentChild","presentChildKey","splice","process","env","NODE_ENV","console","warn"],"sources":["C:/Users/pvplo/OneDrive/Рабочий стол/editpallav-main/node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs"],"sourcesContent":["import { jsx, Fragment } from 'react/jsx-runtime';\nimport { useContext, useRef, cloneElement, Children, isValidElement } from 'react';\nimport { useForceUpdate } from '../../utils/use-force-update.mjs';\nimport { useIsMounted } from '../../utils/use-is-mounted.mjs';\nimport { PresenceChild } from './PresenceChild.mjs';\nimport { LayoutGroupContext } from '../../context/LayoutGroupContext.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { useUnmountEffect } from '../../utils/use-unmount-effect.mjs';\nimport { invariant } from '../../utils/errors.mjs';\n\nconst getChildKey = (child) => child.key || \"\";\nfunction updateChildLookup(children, allChildren) {\n    children.forEach((child) => {\n        const key = getChildKey(child);\n        allChildren.set(key, child);\n    });\n}\nfunction onlyElements(children) {\n    const filtered = [];\n    // We use forEach here instead of map as map mutates the component key by preprending `.$`\n    Children.forEach(children, (child) => {\n        if (isValidElement(child))\n            filtered.push(child);\n    });\n    return filtered;\n}\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */\nconst AnimatePresence = ({ children, custom, initial = true, onExitComplete, exitBeforeEnter, presenceAffectsLayout = true, mode = \"sync\", }) => {\n    invariant(!exitBeforeEnter, \"Replace exitBeforeEnter with mode='wait'\");\n    // We want to force a re-render once all exiting animations have finished. We\n    // either use a local forceRender function, or one from a parent context if it exists.\n    const forceRender = useContext(LayoutGroupContext).forceRender || useForceUpdate()[0];\n    const isMounted = useIsMounted();\n    // Filter out any children that aren't ReactElements. We can only track ReactElements with a props.key\n    const filteredChildren = onlyElements(children);\n    let childrenToRender = filteredChildren;\n    const exitingChildren = useRef(new Map()).current;\n    // Keep a living record of the children we're actually rendering so we\n    // can diff to figure out which are entering and exiting\n    const presentChildren = useRef(childrenToRender);\n    // A lookup table to quickly reference components by key\n    const allChildren = useRef(new Map()).current;\n    // If this is the initial component render, just deal with logic surrounding whether\n    // we play onMount animations or not.\n    const isInitialRender = useRef(true);\n    useIsomorphicLayoutEffect(() => {\n        isInitialRender.current = false;\n        updateChildLookup(filteredChildren, allChildren);\n        presentChildren.current = childrenToRender;\n    });\n    useUnmountEffect(() => {\n        isInitialRender.current = true;\n        allChildren.clear();\n        exitingChildren.clear();\n    });\n    if (isInitialRender.current) {\n        return (jsx(Fragment, { children: childrenToRender.map((child) => (jsx(PresenceChild, { isPresent: true, initial: initial ? undefined : false, presenceAffectsLayout: presenceAffectsLayout, mode: mode, children: child }, getChildKey(child)))) }));\n    }\n    // If this is a subsequent render, deal with entering and exiting children\n    childrenToRender = [...childrenToRender];\n    // Diff the keys of the currently-present and target children to update our\n    // exiting list.\n    const presentKeys = presentChildren.current.map(getChildKey);\n    const targetKeys = filteredChildren.map(getChildKey);\n    // Diff the present children with our target children and mark those that are exiting\n    const numPresent = presentKeys.length;\n    for (let i = 0; i < numPresent; i++) {\n        const key = presentKeys[i];\n        if (targetKeys.indexOf(key) === -1 && !exitingChildren.has(key)) {\n            exitingChildren.set(key, undefined);\n        }\n    }\n    // If we currently have exiting children, and we're deferring rendering incoming children\n    // until after all current children have exiting, empty the childrenToRender array\n    if (mode === \"wait\" && exitingChildren.size) {\n        childrenToRender = [];\n    }\n    // Loop through all currently exiting components and clone them to overwrite `animate`\n    // with any `exit` prop they might have defined.\n    exitingChildren.forEach((component, key) => {\n        // If this component is actually entering again, early return\n        if (targetKeys.indexOf(key) !== -1)\n            return;\n        const child = allChildren.get(key);\n        if (!child)\n            return;\n        const insertionIndex = presentKeys.indexOf(key);\n        let exitingComponent = component;\n        if (!exitingComponent) {\n            const onExit = () => {\n                // clean up the exiting children map\n                exitingChildren.delete(key);\n                // compute the keys of children that were rendered once but are no longer present\n                // this could happen in case of too many fast consequent renderings\n                // @link https://github.com/framer/motion/issues/2023\n                const leftOverKeys = Array.from(allChildren.keys()).filter((childKey) => !targetKeys.includes(childKey));\n                // clean up the all children map\n                leftOverKeys.forEach((leftOverKey) => allChildren.delete(leftOverKey));\n                // make sure to render only the children that are actually visible\n                presentChildren.current = filteredChildren.filter((presentChild) => {\n                    const presentChildKey = getChildKey(presentChild);\n                    return (\n                    // filter out the node exiting\n                    presentChildKey === key ||\n                        // filter out the leftover children\n                        leftOverKeys.includes(presentChildKey));\n                });\n                // Defer re-rendering until all exiting children have indeed left\n                if (!exitingChildren.size) {\n                    if (isMounted.current === false)\n                        return;\n                    forceRender();\n                    onExitComplete && onExitComplete();\n                }\n            };\n            exitingComponent = (jsx(PresenceChild, { isPresent: false, onExitComplete: onExit, custom: custom, presenceAffectsLayout: presenceAffectsLayout, mode: mode, children: child }, getChildKey(child)));\n            exitingChildren.set(key, exitingComponent);\n        }\n        childrenToRender.splice(insertionIndex, 0, exitingComponent);\n    });\n    // Add `MotionContext` even to children that don't need it to ensure we're rendering\n    // the same tree between renders\n    childrenToRender = childrenToRender.map((child) => {\n        const key = child.key;\n        return exitingChildren.has(key) ? (child) : (jsx(PresenceChild, { isPresent: true, presenceAffectsLayout: presenceAffectsLayout, mode: mode, children: child }, getChildKey(child)));\n    });\n    if (process.env.NODE_ENV !== \"production\" &&\n        mode === \"wait\" &&\n        childrenToRender.length > 1) {\n        console.warn(`You're attempting to animate multiple children within AnimatePresence, but its mode is set to \"wait\". This will lead to odd visual behaviour.`);\n    }\n    return (jsx(Fragment, { children: exitingChildren.size\n            ? childrenToRender\n            : childrenToRender.map((child) => cloneElement(child)) }));\n};\n\nexport { AnimatePresence };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}