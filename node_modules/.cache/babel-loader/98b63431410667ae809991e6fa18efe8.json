{"ast":null,"code":"import _classCallCheck from \"C:/Users/pvplo/OneDrive/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/editpallav-main/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/pvplo/OneDrive/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/editpallav-main/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\nvar Queue = /*#__PURE__*/function () {\n  function Queue() {\n    _classCallCheck(this, Queue);\n\n    this.order = [];\n    this.scheduled = new Set();\n  }\n\n  _createClass(Queue, [{\n    key: \"add\",\n    value: function add(process) {\n      if (!this.scheduled.has(process)) {\n        this.scheduled.add(process);\n        this.order.push(process);\n        return true;\n      }\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(process) {\n      var index = this.order.indexOf(process);\n\n      if (index !== -1) {\n        this.order.splice(index, 1);\n        this.scheduled.delete(process);\n      }\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.order.length = 0;\n      this.scheduled.clear();\n    }\n  }]);\n\n  return Queue;\n}();\n\nfunction createRenderStep(runNextFrame) {\n  /**\n   * We create and reuse two queues, one to queue jobs for the current frame\n   * and one for the next. We reuse to avoid triggering GC after x frames.\n   */\n  var thisFrame = new Queue();\n  var nextFrame = new Queue();\n  var numToRun = 0;\n  /**\n   * Track whether we're currently processing jobs in this step. This way\n   * we can decide whether to schedule new jobs for this frame or next.\n   */\n\n  var isProcessing = false;\n  var flushNextFrame = false;\n  /**\n   * A set of processes which were marked keepAlive when scheduled.\n   */\n\n  var toKeepAlive = new WeakSet();\n  var step = {\n    /**\n     * Schedule a process to run on the next frame.\n     */\n    schedule: function schedule(callback) {\n      var keepAlive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var immediate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var addToCurrentFrame = immediate && isProcessing;\n      var queue = addToCurrentFrame ? thisFrame : nextFrame;\n      if (keepAlive) toKeepAlive.add(callback);\n\n      if (queue.add(callback) && addToCurrentFrame && isProcessing) {\n        // If we're adding it to the currently running queue, update its measured size\n        numToRun = thisFrame.order.length;\n      }\n\n      return callback;\n    },\n\n    /**\n     * Cancel the provided callback from running on the next frame.\n     */\n    cancel: function cancel(callback) {\n      nextFrame.remove(callback);\n      toKeepAlive.delete(callback);\n    },\n\n    /**\n     * Execute all schedule callbacks.\n     */\n    process: function process(frameData) {\n      /**\n       * If we're already processing we've probably been triggered by a flushSync\n       * inside an existing process. Instead of executing, mark flushNextFrame\n       * as true and ensure we flush the following frame at the end of this one.\n       */\n      if (isProcessing) {\n        flushNextFrame = true;\n        return;\n      }\n\n      isProcessing = true;\n      var _ref = [nextFrame, thisFrame];\n      thisFrame = _ref[0];\n      nextFrame = _ref[1];\n      // Clear the next frame queue\n      nextFrame.clear(); // Execute this frame\n\n      numToRun = thisFrame.order.length;\n\n      if (numToRun) {\n        for (var i = 0; i < numToRun; i++) {\n          var callback = thisFrame.order[i];\n\n          if (toKeepAlive.has(callback)) {\n            step.schedule(callback);\n            runNextFrame();\n          }\n\n          callback(frameData);\n        }\n      }\n\n      isProcessing = false;\n\n      if (flushNextFrame) {\n        flushNextFrame = false;\n        step.process(frameData);\n      }\n    }\n  };\n  return step;\n}\n\nexport { createRenderStep };","map":{"version":3,"names":["Queue","order","scheduled","Set","process","has","add","push","index","indexOf","splice","delete","length","clear","createRenderStep","runNextFrame","thisFrame","nextFrame","numToRun","isProcessing","flushNextFrame","toKeepAlive","WeakSet","step","schedule","callback","keepAlive","immediate","addToCurrentFrame","queue","cancel","remove","frameData","i"],"sources":["C:/Users/pvplo/OneDrive/Рабочий стол/editpallav-main/node_modules/framer-motion/dist/es/frameloop/render-step.mjs"],"sourcesContent":["class Queue {\n    constructor() {\n        this.order = [];\n        this.scheduled = new Set();\n    }\n    add(process) {\n        if (!this.scheduled.has(process)) {\n            this.scheduled.add(process);\n            this.order.push(process);\n            return true;\n        }\n    }\n    remove(process) {\n        const index = this.order.indexOf(process);\n        if (index !== -1) {\n            this.order.splice(index, 1);\n            this.scheduled.delete(process);\n        }\n    }\n    clear() {\n        this.order.length = 0;\n        this.scheduled.clear();\n    }\n}\nfunction createRenderStep(runNextFrame) {\n    /**\n     * We create and reuse two queues, one to queue jobs for the current frame\n     * and one for the next. We reuse to avoid triggering GC after x frames.\n     */\n    let thisFrame = new Queue();\n    let nextFrame = new Queue();\n    let numToRun = 0;\n    /**\n     * Track whether we're currently processing jobs in this step. This way\n     * we can decide whether to schedule new jobs for this frame or next.\n     */\n    let isProcessing = false;\n    let flushNextFrame = false;\n    /**\n     * A set of processes which were marked keepAlive when scheduled.\n     */\n    const toKeepAlive = new WeakSet();\n    const step = {\n        /**\n         * Schedule a process to run on the next frame.\n         */\n        schedule: (callback, keepAlive = false, immediate = false) => {\n            const addToCurrentFrame = immediate && isProcessing;\n            const queue = addToCurrentFrame ? thisFrame : nextFrame;\n            if (keepAlive)\n                toKeepAlive.add(callback);\n            if (queue.add(callback) && addToCurrentFrame && isProcessing) {\n                // If we're adding it to the currently running queue, update its measured size\n                numToRun = thisFrame.order.length;\n            }\n            return callback;\n        },\n        /**\n         * Cancel the provided callback from running on the next frame.\n         */\n        cancel: (callback) => {\n            nextFrame.remove(callback);\n            toKeepAlive.delete(callback);\n        },\n        /**\n         * Execute all schedule callbacks.\n         */\n        process: (frameData) => {\n            /**\n             * If we're already processing we've probably been triggered by a flushSync\n             * inside an existing process. Instead of executing, mark flushNextFrame\n             * as true and ensure we flush the following frame at the end of this one.\n             */\n            if (isProcessing) {\n                flushNextFrame = true;\n                return;\n            }\n            isProcessing = true;\n            [thisFrame, nextFrame] = [nextFrame, thisFrame];\n            // Clear the next frame queue\n            nextFrame.clear();\n            // Execute this frame\n            numToRun = thisFrame.order.length;\n            if (numToRun) {\n                for (let i = 0; i < numToRun; i++) {\n                    const callback = thisFrame.order[i];\n                    if (toKeepAlive.has(callback)) {\n                        step.schedule(callback);\n                        runNextFrame();\n                    }\n                    callback(frameData);\n                }\n            }\n            isProcessing = false;\n            if (flushNextFrame) {\n                flushNextFrame = false;\n                step.process(frameData);\n            }\n        },\n    };\n    return step;\n}\n\nexport { createRenderStep };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}